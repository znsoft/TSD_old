 
 //4 Интерфейсные Функции экспортируемые в вебсервис ======================== из которых  ПолучитьОстатки уже не используется и ее можно применить в другой стезе или удалить накуй
 Функция ТСД(ШК,ВидОперации) //простые функции : на входе 2 строки , на выходе 1 строка
	 ТекущийФилиал = Константы.ТекущийСклад.Получить();
	 ПараметрыСеанса.глТекПользователь = Справочники.Пользователи.НайтиПоРеквизиту("Логин", ИмяПользователя());
	 
	 Ответ = "Недействителен";
	 Структура = ПрочитатьШтрихКод(ШК);
	 Попытка Место = Структура.Данные;товар = Место; 
	 Исключение товар = Справочники.Номенклатура.НайтиПоКоду(ШК);
	 КонецПопытки;
	 Если ВидОперации="ТоварПоКоду" Тогда
		 Попытка	Ответ = товар.Наименование; Исключение КонецПопытки;
		 
	 ИначеЕсли Найти(ВидОперации,"ЗапРег:")>0 Тогда
		 Ответ = ""; 
		 Если ПараметрыСеанса.глТекПользователь.Пустая() Тогда 
			 Ответ = "Error";
		 Иначе
			 переменная = сред(ВидОперации,8,100);
			 ЗаписатьРег(переменная,ШК);
			 Ответ = Строка(СчитатьРег(переменная));
		 КонецЕсли;
		 
		 //КонецЕсли;
		 
		 
	 ИначеЕсли ВидОперации="Авторизация" Тогда
		 Ответ = "Успех"; 
		 Если ПараметрыСеанса.глТекПользователь.Пустая() или ПараметрыСеанса.глТекПользователь.ПометкаУдаления Тогда 
			 Ответ = "Пользователь не найден!!!";
		 Иначе
			 Кол = читатьрег("КоличествоЗапусков",0);
			 ВерсияКлиента = СчитатьРег("ВерсияКлиента");
			 ТаблицаВосстановленияСеанса = СЧитатьРег("ТаблицаВосстановленияСеанса");
			 ДинамическаяЯчейка = СЧитатьРег("ДинамическаяЯчейка");
			 
			 Очиститьрег(); 
			 Если не ТаблицаВосстановленияСеанса = Неопределено Тогда
				 ЗаписатьРег("ТаблицаВосстановленияСеанса",ТаблицаВосстановленияСеанса);
			 КонецЕсли;
			 ЗаписатьРег("ИмяКомпьютера",ПолноеИмяПользователя());
			 Если ЗначениеЗаполнено(ВерсияКлиента) Тогда
				 Если ВерсияКлиента<>ШК Тогда 
					 ЗаписатьРег("ЗавершитьСеанс",ВерсияКлиента);	
				 КонецЕсли;
			 КонецЕсли;
			 Если ЗначениеЗаполнено(ДинамическаяЯчейка) Тогда
				ЗаписатьРег("ДинамическаяЯчейка",ДинамическаяЯчейка); 
				 
			 КонецЕсли;
			 
			 ЗаписатьРег("КоличествоЗапусков",Кол+1);
			 
			 ЗаписатьРег("Онлайн",Истина);
			 ЗаписатьРег("ВерсияКлиента",ШК);
			 ЗаписатьРег("ТекущийФилиал",ТекущийФилиал);
			 НачатьЗакрывВсеКроме(Перечисления.ВидыСкладскихОпераций.НачалоРаботы);
		 КонецЕсли;
		 
	 ИначеЕсли ВидОперации="Выход" Тогда
		 Ответ = "Успех"; 
		 Если ПараметрыСеанса.глТекПользователь.Пустая() Тогда 
			 Ответ = "Пользователь ненайден!!!";
		 Иначе
			 Если считатьРег("АдресИнвентаризации") <> НЕопределено Тогда 
				 РазблокироватьАдрес(считатьРег("АдресИнвентаризации"));
				 УдалитьРег("АдресИнвентаризации");
			 КонецЕсли;
			 Кол = читатьрег("КоличествоЗапусков",0);
			 очиститьрег();   
			 ЗаписатьРег("КоличествоЗапусков",Кол);
			 ЗакрытьВсеКроме(Неопределено);			
			 РегистрыСведений.УчетВремениРабот.ЗаписатьОкончаниеОперации(Перечисления.ВидыСкладскихОпераций.НачалоРаботы);
			 
		 КонецЕсли;
		 
		 
		 
	 ИначеЕсли ВидОперации="ФилиалПоGUID" Тогда
		 ууид = новый УникальныйИдентификатор(ШК);
		 филиал = Справочники.Контрагенты.ПолучитьСсылку(ууид);
		 Если не филиал.Пустая() Тогда 
			 Ответ = филиал.Наименование;
		 КонецЕсли;
		 
	 ИначеЕсли ВидОперации="НовоеЗадание" Тогда
		 номерзадания = 0;//ПолучитьНомерСледующегоЗаданияДляФиксацииОпераций();
		 Ответ = Формат(номерзадания,"ЧН=; ЧГ=0");
		 ЗаписатьРег("НомерЗадания",номерзадания);
		 
	 ИначеЕсли ВидОперации="ТранзитнаяЗона" Тогда
		 Ответ = "Т00-00-0";
		 
	 ИначеЕсли ВидОперации="ПроверитьАдрес" Тогда
		 текущаястраница = СчитатьРег("текущаяСтраница");
		 Если текущаястраница = 6 Тогда
			 Ответ =  СканЗаданияОбщий(ШК,1);
			 ТипДанных =СчитатьРег("СчитаныйШК.ТипДанных");
			 Если (не ПустаяСтрока(Ответ)) или (не ТипДанных = 11) Тогда
				 возврат "Недействителен";
			 КонецЕсли;
			 НачатьЗакрывВсеКроме(Перечисления.ВидыСкладскихОпераций.ПодборТовара);

			 ЗаписатьРег("текущаяСтраница",3);
			 Возврат "Ок";	
		 КонецЕсли;
		 Адрес = проверитьадрес(ШК);
		 Если Адрес = "Т00-00-0" Тогда 
			 
			 возврат "Недействителен";
		 КонецЕсли;
		 

		 Если СчитатьРег("СейчасИнвентаризация") <> НЕопределено Тогда 
			 Если Адрес = "А01-01-1" Тогда
				 Ответ = "Недействителен";
				 Возврат Ответ;
			 КонецЕсли;
			 РазблокироватьАдрес(считатьРег("АдресИнвентаризации"));
			 ЗаписатьРег("АдресИнвентаризации",Адрес);
			 //ЗаписатьРег("АдресПолки",Адрес);
			 Если не ПытатьсяБлокироватьАдрес(Адрес)  Тогда
				 Ответ = "Недействителен";
				 Возврат Ответ;
			 КонецЕсли;
			 			 НачатьЗакрывВсеКроме(Перечисления.ВидыСкладскихОпераций.Инвентаризация);

		 КонецЕсли;
		 
		 
		 Если ЗначениеЗаполнено(Адрес) И ТипЗНЧ(Адрес) = Тип("Строка") И СтрДлина(Адрес) = 8 Тогда
			 // + Проверка на правильность заполнения адреса
			 Адреса = РегистрыСведений.АдресаМестХранения;
			 ОтборАдреса = Новый Структура("Адрес");
			 ОтборАдреса.Адрес = Адрес;
			 
			 ВыборкаАдреса = Адреса.Выбрать(ОтборАдреса);
			 Если ВыборкаАдреса.Следующий() Тогда	
				 Ответ = ВыборкаАдреса.Адрес; 
				 ЗаписатьРег("ПеремещениеДЯ",ВыборкаАдреса.НазначениеМестаХранения = Перечисления.НазначениеМестаХранения.ДинамическаяЯчейка);
				 ЗаписатьРег("АдресПолкиПолучателя",Ответ);
				 ЗаписатьРег("Разм",СчитатьРег("Вид_Окна"));
				 Если СчитатьРег("Вид_Окна")= "Адрес получатель:" ТОгда Ответ= "Т00-00-0" КонецЕсли;
				 
				 ЗаписатьРег("АдресПолки",Ответ);
				 //Возврат "Недействителен";
			 КонецЕсли;
			 //Возврат ВыборкаАдреса.Адрес; 
			 
		 КонецЕсли;
		 Если Ответ = "Недействителен" Тогда
			 Запрос = Новый Запрос;
			 Запрос.Текст = 
			 "ВЫБРАТЬ
			 |	АдресаМестХранения.Адрес КАК Адрес
			 |ИЗ
			 |	РегистрСведений.АдресаМестХранения КАК АдресаМестХранения
			 |ГДЕ
			 |	АдресаМестХранения.Адрес = &Адрес";
			 Запрос.УстановитьПараметр("Адрес", ШК);
			 Результат = Запрос.Выполнить();
			 ВыборкаДетальныеЗаписи = Результат.Выбрать();
			 Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				 Ответ = ВыборкаДетальныеЗаписи.Адрес;
				 ЗаписатьРег("Разм",СчитатьРег("Вид_Окна"));
				 Если СчитатьРег("Вид_Окна")= "Адрес получатель:" ТОгда
					 			 НачатьЗакрывВсеКроме(Перечисления.ВидыСкладскихОпераций.РазмещениеТовара);

					 Ответ= "Т00-00-0" иначе 
					НачатьЗакрывВсеКроме(Перечисления.ВидыСкладскихОпераций.ПеремещениеТовара);	 
						 
					 КонецЕсли;
				 
				 ЗаписатьРег("АдресПолки",Ответ);
				 
			 КонецЕсли;
			 //Возврат "Недействителен"; 
		 КонецЕсли;
		 ЧитатьРег("ВремяНачалаЗадания",ТекущаяДатаСервер());
		 //ЗаписатьРег("ВремяНачалаЗадания",ТекущаяДатаСервер());

		 
	 Иначе
		 Структура = ПрочитатьШтрихКод(ВидОперации);
		 Попытка Место = Структура.Данные;товар = Место; 
		 Исключение товар = Справочники.Номенклатура.НайтиПоКоду(ВидОперации);
		 КонецПопытки;
		 Если не товар.Пустая() Тогда 
			 Запрос = Новый Запрос;
			 Запрос.Текст = 
			 "ВЫБРАТЬ
			 |	Счет_41_АдресныйОстатки.Номенклатура.Наименование КАК Наименование,
			 |	Счет_41_АдресныйОстатки.Номенклатура.Код КАК Код,
			 |	СУММА(Счет_41_АдресныйОстатки.КоличествоОстаток) КАК Количество
			 |ИЗ
			 |	РегистрНакопления.Счет_41_Адресный.Остатки(, ) КАК Счет_41_АдресныйОстатки
			 |ГДЕ
			 |	(Счет_41_АдресныйОстатки.Адрес = &Адрес
			 |			ИЛИ Счет_41_АдресныйОстатки.Адрес = &адр)
			 |	И (НЕ Счет_41_АдресныйОстатки.НеОприходованныйТовар)
			 |	И Счет_41_АдресныйОстатки.Номенклатура = &Номенклатура
			 |
			 |СГРУППИРОВАТЬ ПО
			 |	Счет_41_АдресныйОстатки.Номенклатура.Код,
			 |	Счет_41_АдресныйОстатки.Номенклатура.Наименование";
			 
			 Запрос.УстановитьПараметр("адр", ШК);
			 Запрос.УстановитьПараметр("Адрес", проверитьадрес(ШК));
			 Запрос.УстановитьПараметр("Номенклатура", товар);
			 
			 Результат = Запрос.Выполнить();
			 
			 ВыборкаДетальныеЗаписи = Результат.Выбрать();
			 
			 Если  ВыборкаДетальныеЗаписи.Следующий() Тогда
				 Ответ = Формат(ВыборкаДетальныеЗаписи.Количество,"ЧН=; ЧГ=0");
			 КонецЕсли;
		 КонецЕсли;
	 КонецЕсли;
	 ЗаписатьРег("ВремяКонтакта",ТекущаяДатаСервер());
	 Возврат Ответ;
 КонецФункции
 
 Функция ПолучитьОстатки(склад)   // функция устарела и возможно от нее нужно будет избавиться т.к она продублирована в "списке товаров" , но для проверки вставил переменную   "ПолучениеостатковСтарымСпособом"
	 //эту функцию можно будет удалить , удалить ее из сервиса и переопубликовать сервис на сервере 
	 СтрокаНоменклатуры = ФабрикаXDTO.Тип("http://www.dns-shop.tsd.ru", "СтрокаНоменклатуры");
	 _ФабрикаXDTO = ФабрикаXDTO;
	 СписокНоменклатуры = _ФабрикаXDTO.Тип("http://www.dns-shop.tsd.ru", "СписокНоменклатуры");
	 ВходныеДанные = _ФабрикаXDTO.Создать(СписокНоменклатуры);	  	
	 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
	 Операция.Код          = "ВыборкаДетальныеЗаписи.Код";
	 Операция.Наименование = "ВыборкаДетальныеЗаписи.Наименование";
	 Операция.Количество   = 0;//ВыборкаДетальныеЗаписи.Количество;
	 ВходныеДанные.Номенклатура.Добавить(Операция);
	 Возврат ВходныеДанные;
 КонецФункции
 
 Функция СписокТовара(ВидОперации,Список) // Основная функция "монолит" через которую происходит все общение с девайсом , название сложилось исторически :( , в одной функции оказалось проще кодировать на девайсе т.к все обращения к серверу унифицированны и контроллируемы нежели обращение к куче функций вебсервиса и у каждой свой тип данных 
	 Попытка
		 ПараметрыСеанса.глТекПользователь = Справочники.Пользователи.НайтиПоРеквизиту("Логин", ИмяПользователя());
	 Исключение 
		 Если не ВидОперации = "СписокПользователей" Тогда
			 ВызватьИсключение "Перелогиньтесь, вы не найдены в справочнике пользователей " +ОписаниеОшибки();	 
		 КонецЕсли;
	 КонецПопытки;
	 //Sleep(2000);
	 СтрокаНоменклатуры = ФабрикаXDTO.Тип("http://www.dns-shop.tsd.ru", "СтрокаНоменклатуры");
	 _ФабрикаXDTO = ФабрикаXDTO;
	 СписокНоменклатуры = _ФабрикаXDTO.Тип("http://www.dns-shop.tsd.ru", "СписокНоменклатуры");
	 ВходныеДанные = _ФабрикаXDTO.Создать(СписокНоменклатуры);	
	 НомерПакета = 0;
	 ТекущиеМилисекунды = ТекущаяДатаМилисекунды();
	 //ЗаписатьЗначения("НачалоПакета",0,НомерПакета ,Истина);
	 Если (не ВидОперации = "ПотокШК") и (не ВидОперации = "НайтиСписокТоваров")и (не ВидОперации = "Список Сканов") и ЕстьЕщеСессииПользователя(Список) Тогда 
		 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
		 Операция.Код          = "ЗакрытьСессию";
		 Операция.Наименование = "Сеанс завершен другим терминалом";
		 Операция.Количество   = 0;
		 ВходныеДанные.Номенклатура.Добавить(Операция);
		 Возврат ВходныеДанные;
	 КонецЕсли;
	 ТС = ТекущаяДатаМилисекунды();
	 ТекущиеМилисекунды = ТС;	
	 Попытка		
		 //ТекущиеМилисекунды = ТекущаяДатаМилисекунды();
		 ЗаписатьРег("ВремяКонтакта",ТекущаяДатаСервер());
		 ЗаписатьРег("ВидОперации",ВидОперации);
		 //СписокДокументов = Новый СписокЗначений();
		 //СписокДокументов = читатьрег("СписокДокументов",СписокДокументов);
		 Наименование =	 Список.Номенклатура.Получить(0).Наименование;
		 Код  		 = 	 Список.Номенклатура.Получить(0).Код;
		 Количество	 = 	 Список.Номенклатура.Получить(0).Количество;
	 Исключение 
	 КонецПопытки;	
	 Попытка //начинаем глобальную отладку через спецрегистр
		 Если ВидОперации = "Подтвердить Дефрагментацию" Тогда
			 Адрес = ПроверитьАдрес(Код);
			 Ответ = ЗавершитьМоиЗаданияДефрагментацииСобрано(ПараметрыСеанса.глТекПользователь,Адрес);
			 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
			 Операция.Код          = ?(ПустаяСтрока(Ответ),"Выход","Error");
			 Операция.Наименование = " "+Ответ;
			 Операция.Количество   = ?(ПустаяСтрока(Ответ),4,35);
			 ЗаписатьРег("АдресСканирован",ПустаяСтрока(Ответ));
			 ВходныеДанные.Номенклатура.Добавить(Операция);
		 КонецЕсли;
		 
		 Если ВидОперации = "ПотокШК" Тогда
			 //в эту операцию подается список товаров 
			 //код = ШК ЕАН товара и его количество и Наименование = Адрес , 
			 //ЗаписатьРег("ПотокШК", Код+" "+ Наименование+" "+Строка(Количество));//+" "+ Строка(Список.Номенклатура.Количество()));
			 к =0;
			 Для каждого товар из Список.Номенклатура Цикл
				 //ЗаписатьРег("ПотокШК"+строка(к), товар.Код+" "+ товар.Наименование+" "+Строка(товар.Количество));
				 Завершить = Ложь;
				 ВходныеДанные = СканЗадания(ВходныеДанные, товар.Код, товар.Количество,товар.Код,Завершить);
				 ПоследняяКомманда = ВходныеДанные.Номенклатура.Получить(0).Код;
				 Если Завершить = Истина тогда прервать; КонецЕсли; 
				 к= к+1;
			 КонецЦикла;
		 КонецЕсли;
		 
		 Если ВидОперации = "НайтиСписокТоваров" Тогда
			 //в эту операцию подается список товаров 
			 //код = ШК ЕАН товара и его количество и Наименование = Адрес , 
			 //ЗаписатьРег("ПотокШК", Код+" "+ Наименование+" "+Строка(Количество));//+" "+ Строка(Список.Номенклатура.Количество()));
			 к =0;
			 Для каждого товар из Список.Номенклатура Цикл
				 ЗаписатьРег("НайтиСписок"+строка(к), товар.Код+" "+ товар.Наименование+" "+Строка(товар.Количество));
				 ВходныеДанные = СканСпискаТоваров(ВходныеДанные, товар.Код, товар.Количество,товар.Наименование);
				 к= к+1;
			 КонецЦикла;
		 КонецЕсли;
		 
		 Если ВидОперации = "ПроверитьАдрес" Тогда
			 
			 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
			 Операция.Код          = "";
			 Операция.Наименование = СчитатьАдрес(ВходныеДанные,Код, Количество, Наименование);
			 Операция.Количество   = 0;
			 ВходныеДанные.Номенклатура.Добавить(Операция);
			 
		 КонецЕсли;
		 
		 Если ВидОперации = "СканДереваЗадания" Тогда
			 Завершить = Ложь;
			 ВходныеДанные = СканЗадания(ВходныеДанные, Код, Количество,Наименование,Завершить);
			 возврат ВходныеДанные;
		 КонецЕсли;
		 //-------------------------------------------------------------------------------------------------------	
		 Если ВидОперации = "РазрешеныКнопки" Тогда 
			 СканированиеАдреса = ЛОжь;
			 //УдалитьРег("ВопросНаСтранице");
			 Горизонталь = Количество;// узнаем разрешение Экрана устройства
			 Попытка
				 Вертикаль = Число(Код);
			 Исключение КонецПопытки;
			 Впервые = Ложь;
			 Если Наименование = "ОсновноеОкно_Впервые" Тогда 
				 Наименование = "ОсновноеОкно";
				 Впервые = Истина; 
				 ЗаписатьРег("Впервые",Истина);
				 СледКнопка = СЧитатьРег("Вид_Окна");
			 КонецЕсли;
			 ЗаписатьРег("Горизонталь",Горизонталь);
			 ЗаписатьРег("Вертикаль",Вертикаль);
			 ЗаписатьРег("Вид_Окна",Наименование);
			 ИнформацияПоТовару = СчитатьРег("ИнформацияПоТовару");
			 ТаблицаВосстановленияСеанса = СЧитатьРег("ТаблицаВосстановленияСеанса");
			 ЕстьСеанс = Ложь;
			 Если не ТаблицаВосстановленияСеанса = Неопределено Тогда
				 Если ТаблицаВосстановленияСеанса.Количество() > 0 тогда
					 ЕстьСеанс = Истина;
					 СтрокаСеанса = ТаблицаВосстановленияСеанса.Получить(0);
				 КонецЕсли;
			 КонецЕсли;
			 
			 
			 //ЗаписатьРег("ТекущееОкно",);
			 combo = 4002;
			 list =	4001;
			 treelist =	4005;
			 Userlist  =  4004;
			 password = 4007;
			 Namespace  = 4008;
			 //еще 2 кнопки 4013 4014 невидимые
			 сз = новый СписокЗначений();
			 Если Наименование = "Размещение Выбор Транспорта" Тогда
				 //combo 	 zagolovokokna
				 //ЗаписатьРег(Наименование,Истина);
				 РазместитьКнопкуТСД(ВходныеДанные,"Размещаемое ТС",0,0,0,8,16,Истина);
				 //РазместитьКнопкуТСД(ВходныеДанные,Строка(ПараметрыСеанса.глТекПользователь.Наименование),4015,1,вертикаль-70,0,50,Истина);
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "2";
				 Операция.Наименование = "Отменa";
				 Операция.Количество   = ПреобразоватьКоординаты(горизонталь/3,2*вертикаль/3,75,46);
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 
				 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "4011";
				 Операция.Наименование = "и транспортируйте в адрес размещения";
				 Операция.Количество   = ПреобразоватьКоординаты(0,60,0,40);
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = Формат(Цел(list),"ЧДЦ=0; ЧН=; ЧГ=0"); //0= типа енабле дизабле контрол
				 Операция.Наименование = "Сканируйте транспортное средство из зоны ""Т"" для размещения товара";
				 Операция.Количество   = ПреобразоватьКоординаты(1,1,0,60);
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 ЗаписатьРег("текущаяСтраница",2);
				 
				 //Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 //Операция.Код          = "0";
				 //Операция.Наименование = "Тpанспортное Средство";
				 //Операция.Количество   = ПреобразоватьКоординаты(0,0,8,16);//form font size
				 //ВходныеДанные.Номенклатура.Добавить(Операция);
				 Возврат ВходныеДанные;
				 
				 
				 
				 
			 КонецЕсли;
			 Если Наименование = "ПогрузкаВыгрузка" Тогда    //тут решил размещать кнопки на экране ТСД через функцию
				 ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,"    Разгрузка/Погрузка   ",0,0,0,8,16,Истина);
				 ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные," ",4001,Горизонталь,вертикаль,1,1,Ложь); //убираем окно инфы с экрана
				 ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,Строка(ПараметрыСеанса.глТекПользователь.Наименование),4015,1,вертикаль-70,0,50,Истина);
				 ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,,4002,Горизонталь,вертикаль,1,1,Ложь);
				 ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,"Отмена",4023,Горизонталь/4,2*вертикаль/4,Горизонталь/2,вертикаль/5,Истина);
				 ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,"Погрузка",4011,Горизонталь/4,вертикаль/4,Горизонталь/2,вертикаль/5,Истина);
				 ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,"Разгрузка",4013,Горизонталь/4,2,Горизонталь/2,вертикаль/5,Истина);
				 //ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,"Разгрузка",4014,Горизонталь/4,2,Горизонталь/2,вертикаль/5,Истина); кнопка есть но она невидима
				 //НачатьЗакрывВсеКроме(Перечисления.ВидыСкладскихОпераций.ПодборТовара);
				 Если считатьРег("АдресИнвентаризации") <> НЕопределено Тогда 
					 РазблокироватьАдрес(считатьРег("АдресИнвентаризации"));
					 УдалитьРег("АдресИнвентаризации");
				 КонецЕсли;
			 КонецЕсли;
			 Если Наименование = "Разгрузка Список" Тогда    //Формирую двухколоночную Табличную часть на экране
				 ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,"       Разгрузка   ",0,0,0,8,16,Истина);   // по идее это в заголовке формы
				 ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,,list,0,63,0,159,Истина);
				 ВходныеДанные = УдалитьКолонкуСписка(ВходныеДанные,0); //
				 ВходныеДанные = УдалитьКолонкуСписка(ВходныеДанные,1); //
				 ВходныеДанные = УдалитьКолонкуСписка(ВходныеДанные,2); //
				 ВходныеДанные = УдалитьКолонкуСписка(ВходныеДанные,3); //
				 
				 ДобавитьКолонкуТСД(ВходныеДанные,"Документ",Горизонталь/1.8); //
				 ДобавитьКолонкуТСД(ВходныеДанные,"",0);//Горизонталь/2.4); //
				 //ДобавитьКолонкуТСД(ВходныеДанные,"",0); //
				 ДобавитьКолонкуТСД(ВходныеДанные,"Номер",Горизонталь/2.4,1); //
				 РазместитьКнопкуТСД(ВходныеДанные,"Выберите номер ТТН по которой прибыл груз",1006,0,0,0,60,Истина);
				 ВходныеДанные = ШрифтЭлементаТСД(ВходныеДанные,1006,8,11,0,0);
				 ВходныеДанные = ШрифтЭлементаТСД(ВходныеДанные,list,8,11,0,0);
				 ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,"Далее",4020,3,Вертикаль - 98,Горизонталь/2-3,40,Истина);
				 ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,"Отмена",4023,Горизонталь/2,Вертикаль - 98,Горизонталь/2-3,40,Истина);
				 
				 ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,Строка(ПараметрыСеанса.глТекПользователь.Наименование),4500,20,вертикаль-56,0,50,Истина);
				 //ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,,4002,Горизонталь,вертикаль,1,1,Ложь);
				 //ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,"Отмена",4023,Горизонталь/4,2*вертикаль/4,Горизонталь/2,вертикаль/5,Истина);
				 //ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,"Погрузка",4011,Горизонталь/4,вертикаль/4,Горизонталь/2,вертикаль/5,Истина);
				 //ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,"Разгрузка",4013,Горизонталь/4,2,Горизонталь/2,вертикаль/5,Истина);
				 //ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,"Разгрузка",4014,Горизонталь/4,2,Горизонталь/2,вертикаль/5,Истина); кнопка есть но она невидима
				 Задания = ПолучитьСписокЗаданийРазгрузки();
				 ВходныеДанные = ЗаполнитьТаблицу(ВходныеДанные,Задания,117);
				 //ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,"    Разгрузка   ",0,0,0,8,16,Истина);   // по идее это в заголовке формы
				 
				 //НачатьЗакрывВсеКроме(Перечисления.ВидыСкладскихОпераций.ПодборТовара);
				 Если считатьРег("АдресИнвентаризации") <> НЕопределено Тогда 
					 РазблокироватьАдрес(считатьРег("АдресИнвентаризации"));
					 УдалитьРег("АдресИнвентаризации");
				 КонецЕсли;
			 КонецЕсли;
			 Если Наименование = "Разгрузка СписокСтандартный" Тогда
				 ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,"    Сотрудники   ",0,0,0,8,16,Истина);
				 ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,,list,0,63,0,159,Истина);
				 ВходныеДанные = УдалитьКолонкуСписка(ВходныеДанные,0); //
				 ВходныеДанные = УдалитьКолонкуСписка(ВходныеДанные,1); //
				 ВходныеДанные = УдалитьКолонкуСписка(ВходныеДанные,2); //
				 ВходныеДанные = УдалитьКолонкуСписка(ВходныеДанные,3); //
				 ВходныеДанные = УдалитьКолонкуСписка(ВходныеДанные,4); //
				 ВходныеДанные = УдалитьКолонкуСписка(ВходныеДанные,0); //
				 
				 ВходныеДанные = ДобавитьКолонкуТСД(ВходныеДанные,"Сотрудники",Горизонталь-8); //
				 ВходныеДанные = ДобавитьКолонкуТСД(ВходныеДанные,"",0); //
				 ВходныеДанные = ДобавитьКолонкуТСД(ВходныеДанные,"",0); //
				 ТТН = СчитатьРег("ВыбраннаяТТН");
				 Если ТТН = Неопределено Тогда	ВызватьИсключение "Ошибка получения ТТН"; КонецЕсли;
				 ТТНОбъект = ТТН.ПолучитьОбъект();
				 Номер = ТТНОбъект.Номер;
				 Авто = СокрЛП(ТТНОбъект.НомерТТНПеревозчика);
				 Авто = ?(ПустаяСтрока(Авто),"авто: "+СокрЛП(ТТНОбъект.Транспорт),Авто);
				 ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,"Номер "+СокрЛП(Авто)+Символы.ВК+Символы.ПС+"ТТН:"+Номер+Символы.ВК+Символы.ПС+"Сканируйте бэйджики сотрудников",4011,0,20,0,60,Истина);
				 ВходныеДанные = ШрифтЭлементаТСД(ВходныеДанные,4011,8,11,0,0);
				 ВходныеДанные = ШрифтЭлементаТСД(ВходныеДанные,list,8,13,0,0);
				 ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,"",4010,0,0,1,1,Ложь);
				 ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,"",4009,0,0,1,1,Ложь);
				 ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,"Очистить",4005,63,0,90,20,Истина);
				 ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,"Удалить",4003,0,0,60,20,Истина);
				 ВходныеДанные = ШрифтЭлементаТСД(ВходныеДанные,4005,6,9,0,0);
				 ВходныеДанные = ШрифтЭлементаТСД(ВходныеДанные,4003,6,9,0,0);
				 ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,"",4004,0,0,1,1,Ложь);
				 ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,"Отмена",4008,Горизонталь/2,Вертикаль - 98,Горизонталь/2-3,40,Истина);
				 ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,Строка(ПараметрыСеанса.глТекПользователь.Наименование),4500,20,вертикаль-56,0,50,Истина);
				 
				 Если (СчитатьРег("РазгрузкаНачата")=Истина) ТОгда 
					 ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,"Закончить",4007,3,Вертикаль - 98,Горизонталь/2-3,40,Истина); 
					 СотрудникиРазгрузки = читатьРег("СотрудникиРазгрузки",Новый Массив);
					 Запрос = Новый Запрос;
					 Запрос.Текст = 
					 "ВЫБРАТЬ РАЗЛИЧНЫЕ
					 |	""vis"" + Пользователи.Код КАК Код,
					 |	Пользователи.Наименование,
					 |	1 КАК Количество
					 |ИЗ
					 |	Справочник.Пользователи КАК Пользователи
					 |ГДЕ
					 |	Пользователи.Ссылка В(&Ссылка)
					 |	И (НЕ Пользователи.ПометкаУдаления)";
					 Запрос.УстановитьПараметр("Ссылка", СотрудникиРазгрузки);
					 Результат = Запрос.Выполнить();
					 ТЗ = Результат.Выгрузить();
					 ВходныеДанные = ЗаполнитьТаблицу(ВходныеДанные,ТЗ);
				 иначе
					 //УдалитьРег()
					 ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,"Начать",4007,3,Вертикаль - 98,Горизонталь/2-3,40,Истина);
				 КонецЕсли;
				 //ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,"    Сотрудники   ",0,0,0,8,16,Истина);
				 
				 //НачатьЗакрывВсеКроме(Перечисления.ВидыСкладскихОпераций.ПодборТовара);
				 Если считатьРег("АдресИнвентаризации") <> НЕопределено Тогда 
					 РазблокироватьАдрес(считатьРег("АдресИнвентаризации"));
					 УдалитьРег("АдресИнвентаризации");
				 КонецЕсли;
				 
				 
			 КонецЕсли;
			 Если Наименование = "Погрузка Форма перемещения товара" Тогда
				 РазместитьКнопкуТСД(ВходныеДанные,"Погрузка филиала",0,0,0,8,15,Истина);
				 //ШрифтЭлементаТСД(ВходныеДанные,4005,7,10,0,10);
				 РазместитьКнопкуТСД(ВходныеДанные,Строка(ПараметрыСеанса.глТекПользователь.Наименование),4011,0,вертикаль-120,0,61,Истина);
				 РазместитьКнопкуТСД(ВходныеДанные,"Отмена",4013,Горизонталь-65,вертикаль-60,60,27,Истина);
				 РазместитьКнопкуТСД(ВходныеДанные,"выберите филиал" ,4012,0,вертикаль-80,60,60);
				 РазместитьКнопкуТСД(ВходныеДанные,"",4023,0,0,1,1,Ложь,Ложь);
				 РазместитьКнопкуТСД(ВходныеДанные,"",1,0,0,1,1,Ложь,Ложь);
				 РазместитьКнопкуТСД(ВходныеДанные,"",4501,0,0,1,1,Ложь,Ложь);
				 РазместитьКнопкуТСД(ВходныеДанные," ",4024,0,0,1,1,Ложь,Ложь);
				 
				 //НачатьЗакрывВсеКроме(Перечисления.ВидыСкладскихОпераций.ПогрузкаМашины);
				 Если считатьРег("АдресИнвентаризации") <> НЕопределено Тогда 
					 РазблокироватьАдрес(считатьРег("АдресИнвентаризации"));
					 УдалитьРег("АдресИнвентаризации");
				 КонецЕсли;
			 КонецЕсли;
			 Если Наименование = "Погрузка Дерево Поиск" Тогда
				 //РазместитьКнопкуТСД(ВходныеДанные,"Выбор транспорта",0,0,0,8,10,Истина);
				 //ШрифтЭлементаТСД(ВходныеДанные,4005,7,10,0,10);
				 //РазместитьКнопкуТСД(ВходныеДанные,"",combo,Горизонталь-65,вертикаль-60,60,27,Истина);
				 РазместитьКнопкуТСД(ВходныеДанные,"Выберите Транспортное средство" ,4500,0,0,0,60,Истина);
				 
				 ДобавитьСтроку(ВходныеДанные,"Расположение","4002",ПреобразоватьКоординаты(3,60,0,20));
				 ДобавитьСтроку(ВходныеДанные,"Расположение","4005",ПреобразоватьКоординаты(0,80,0,130));
				 РазместитьКнопкуТСД(ВходныеДанные,Строка(ПараметрыСеанса.глТекПользователь.Наименование),4011,0,вертикаль-120,0,61,Истина);
				 РазместитьКнопкуТСД(ВходныеДанные,"Отмена",4013,Горизонталь-65,вертикаль-60,60,27,Истина);
				 РазместитьКнопкуТСД(ВходныеДанные," ",4023,0,0,1,1,Ложь,Ложь);
				 РазместитьКнопкуТСД(ВходныеДанные," ",1,0,0,1,1,Ложь,Ложь);
				 РазместитьКнопкуТСД(ВходныеДанные," ",4501,0,0,1,1,Ложь,Ложь);
				 РазместитьКнопкуТСД(ВходныеДанные," ",4024,0,0,1,1,Ложь,Ложь);
				 
				 //НачатьЗакрывВсеКроме(Перечисления.ВидыСкладскихОпераций.ПогрузкаМашины);
				 Если считатьРег("АдресИнвентаризации") <> НЕопределено Тогда 
					 РазблокироватьАдрес(считатьРег("АдресИнвентаризации"));
					 УдалитьРег("АдресИнвентаризации");
				 КонецЕсли;
			 КонецЕсли;
			 Если Наименование = "Погрузка Форма перемещения товара" Тогда
				 РазместитьКнопкуТСД(ВходныеДанные,"Погрузка филиала",0,0,0,8,15,Истина);
				 //ШрифтЭлементаТСД(ВходныеДанные,4005,7,10,0,10);
				 РазместитьКнопкуТСД(ВходныеДанные,Строка(ПараметрыСеанса.глТекПользователь.Наименование),4011,0,вертикаль-120,0,61,Истина);
				 РазместитьКнопкуТСД(ВходныеДанные,"Отмена",4013,Горизонталь-75,вертикаль-60,70,27,Истина);
				 РазместитьКнопкуТСД(ВходныеДанные,"выберите филиал" ,4012,0,вертикаль-80,60,60,Ложь,Ложь);
				 РазместитьКнопкуТСД(ВходныеДанные,"",4023,0,0,1,1,Ложь,Ложь);
				 РазместитьКнопкуТСД(ВходныеДанные,"",1,0,0,1,1,Ложь,Ложь);
				 РазместитьКнопкуТСД(ВходныеДанные,"",4501,0,0,1,1,Ложь,Ложь);
				 РазместитьКнопкуТСД(ВходныеДанные," ",4024,0,0,1,1,Ложь,Ложь);
				 
				 //НачатьЗакрывВсеКроме(Перечисления.ВидыСкладскихОпераций.ПогрузкаМашины);
				 Если считатьРег("АдресИнвентаризации") <> НЕопределено Тогда 
					 РазблокироватьАдрес(считатьРег("АдресИнвентаризации"));
					 УдалитьРег("АдресИнвентаризации");
				 КонецЕсли;
			 КонецЕсли;
			 Если Наименование = "Погрузка Список2" Тогда
				 ТТН = СчитатьРег("ВыбранныйТранспорт");
				 Если ТТН = Неопределено Тогда	ВызватьИсключение "Ошибка получения Автомобиля"; КонецЕсли;
				 //ТТНОбъект = ТТН.ПолучитьОбъект();
				 Номер = Строка(ТТН);
				 //Авто = Номер;
				 //Авто = ?(ПустаяСтрока(Авто),"авто: "+СокрЛП(ТТН),Авто);
				 //РазместитьКнопкуТСД(ВходныеДанные,"Номер автомобиля "+СокрЛП(Авто)
				 
				 
				 РазместитьКнопкуТСД(ВходныеДанные,"         Погрузка   ",0,0,0,8,16,Истина);
				 РазместитьКнопкуТСД(ВходныеДанные,,list,0,63,0,133,Истина);
				 УдалитьКолонкуСписка(ВходныеДанные,0); //
				 УдалитьКолонкуСписка(ВходныеДанные,1); //
				 УдалитьКолонкуСписка(ВходныеДанные,2); //
				 УдалитьКолонкуСписка(ВходныеДанные,3); //
				 ДобавитьКолонкуТСД(ВходныеДанные," ",0,0); //
				 ДобавитьКолонкуТСД(ВходныеДанные," ",0,0); //
				 ДобавитьКолонкуТСД(ВходныеДанные,"Тип",Горизонталь-50,1); //
				 ДобавитьКолонкуТСД(ВходныеДанные,"Количество",50,2); //
				 УдалитьКолонкуСписка(ВходныеДанные,4); //
				 РазместитьКнопкуТСД(ВходныеДанные,"Убрать все",4005,Горизонталь-Горизонталь/3+5,Вертикаль - 58 - 29,Горизонталь/3-7,27,Истина);
				 РазместитьКнопкуТСД(ВходныеДанные,"Отмена",4008,Горизонталь-Горизонталь/3+5,Вертикаль - 58,Горизонталь/3-7,23,Истина);
				 РазместитьКнопкуТСД(ВходныеДанные,"Завершить",4010,Горизонталь/3+8,Вертикаль - 58-29,Горизонталь/3-3,23+29,Истина);
				 РазместитьКнопкуТСД(ВходныеДанные,"Следующий"+Символы.ВК+Символы.ПС+"филиал",4007,1,Вертикаль - 58-29,Горизонталь/3+7,23+29,Истина);//Проверяемся 2718
				 РазместитьКнопкуТСД(ВходныеДанные,"Всего",4013,1,133+63-20,70,20,Ложь);
				 РазместитьКнопкуТСД(ВходныеДанные,"0",4014,69,133+63-20,40,20,Ложь);
				 ШрифтЭлементаТСД(ВходныеДанные,4013,8,13,0,0);
				 ШрифтЭлементаТСД(ВходныеДанные,4013,8,13,0,0);
				 
				 ШрифтЭлементаТСД(ВходныеДанные,4011,8,11,0,0);
				 ШрифтЭлементаТСД(ВходныеДанные,list,8,13,0,0);
				 ШрифтЭлементаТСД(ВходныеДанные,4008,6,9,0,0);
				 ШрифтЭлементаТСД(ВходныеДанные,4005,6,9,0,0);
				 ШрифтЭлементаТСД(ВходныеДанные,4010,7,11,0,0);
				 ШрифтЭлементаТСД(ВходныеДанные,4007,7,11,0,0);
				 
				 РазместитьКнопкуТСД(ВходныеДанные,"",4004,0,0,1,1,Ложь,Ложь);
				 РазместитьКнопкуТСД(ВходныеДанные,"",4003,0,0,1,1,Ложь,Ложь);
				 РазместитьКнопкуТСД(ВходныеДанные,"",4009,0,0,1,1,Ложь,Ложь);
				 РазместитьКнопкуТСД(ВходныеДанные,Строка(ПараметрыСеанса.глТекПользователь.Наименование),4011,0,63+133,0,50,Истина);
				 ТаблицаСоставТТН = СЧитатьРег("ТаблицаСоставТТН");
				 Филиал = СЧитатьРег("Филиал");
				 НайденнаяСтрока = ТаблицаСоставТТН.Найти(Филиал);
				 РазместитьКнопкуТСД(ВходныеДанные,"Заполните поля "+Символы.ВК+Символы.ПС+"Количеством мест для "+Символы.ВК+Символы.ПС+Строка(Филиал)+Символы.ВК+Символы.ПС+"в авто:"+Номер ,4500,10,0,0,60);
				 ДобавитьСтроку(ВходныеДанные,"ЗаполнитьТаблицу","-",113);
				 
				 Параметр = 1;
				 Если НайденнаяСтрока = Неопределено тогда ВызватьИсключение "Ошибка получения состава ТТН"; КонецЕсли;
				 Для каждого Стр из ТаблицаСоставТТН.Колонки Цикл
					 Если Стр.Ширина > 0 Тогда
						 Код = Стр.Заголовок;
						 Наименование = Стр.Имя;
						 ДобавитьСтроку(ВходныеДанные,Код,Наименование,Параметр);
						 Параметр = Параметр +1;
						 ДобавитьСтроку(ВходныеДанные,"Колонка",НайденнаяСтрока[Стр.Имя],0);
						 //ДобавитьСтроку(ВходныеДанные,"Колонка",Количество,3);
					 КонецЕсли;
					 
				 КонецЦикла;
				 ДобавитьСтроку(ВходныеДанные,"КонецТаблицы","-",0);
				 
				 //ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,"Следующ.",4007,3,Вертикаль - 98,Горизонталь/2-3,40,Истина);
				 //НачатьЗакрывВсеКроме(Перечисления.ВидыСкладскихОпераций.ПогрузкаМашины);
				 Если считатьРег("АдресИнвентаризации") <> НЕопределено Тогда 
					 РазблокироватьАдрес(считатьРег("АдресИнвентаризации"));
					 УдалитьРег("АдресИнвентаризации");
				 КонецЕсли;
				 
				 
				 
				 
				 
				 
			 КонецЕсли;
			 Если Наименование = "Погрузка СписокСтандартный" Тогда
				 РазместитьКнопкуТСД(ВходныеДанные,"    Сотрудники   ",0,0,0,8,16,Истина);
				 ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,,list,0,63,0,159,Истина);
				 ВходныеДанные = УдалитьКолонкуСписка(ВходныеДанные,0); //
				 ВходныеДанные = УдалитьКолонкуСписка(ВходныеДанные,1); //
				 ВходныеДанные = УдалитьКолонкуСписка(ВходныеДанные,2); //
				 ВходныеДанные = УдалитьКолонкуСписка(ВходныеДанные,3); //
				 ВходныеДанные = УдалитьКолонкуСписка(ВходныеДанные,4); //
				 ВходныеДанные = УдалитьКолонкуСписка(ВходныеДанные,0); //
				 
				 ВходныеДанные = ДобавитьКолонкуТСД(ВходныеДанные,"Сотрудники",Горизонталь-8); //
				 ВходныеДанные = ДобавитьКолонкуТСД(ВходныеДанные,"",0); //
				 ВходныеДанные = ДобавитьКолонкуТСД(ВходныеДанные,"",0); //
				 ТТН = СчитатьРег("ВыбранныйТранспорт");
				 Если ТТН = Неопределено Тогда	ВызватьИсключение "Ошибка получения Автомобиля"; КонецЕсли;
				 ТТНОбъект = ТТН.ПолучитьОбъект();
				 Номер = Строка(ТТН);
				 Авто = Номер;
				 Авто = ?(ПустаяСтрока(Авто),"авто: "+СокрЛП(ТТН),Авто);
				 РазместитьКнопкуТСД(ВходныеДанные,"Номер автомобиля "+СокрЛП(Авто)+Символы.ВК+Символы.ПС+"Сканируйте бэйджики сотрудников",4011,0,20,0,60,Истина);
				 ШрифтЭлементаТСД(ВходныеДанные,4011,8,11,0,0);
				 ШрифтЭлементаТСД(ВходныеДанные,list,8,13,0,0);
				 РазместитьКнопкуТСД(ВходныеДанные,"",4010,0,0,1,1,Ложь);
				 РазместитьКнопкуТСД(ВходныеДанные,"",4009,0,0,1,1,Ложь);
				 РазместитьКнопкуТСД(ВходныеДанные,"Очистить",4005,63,0,90,20,Истина);
				 РазместитьКнопкуТСД(ВходныеДанные,"Удалить",4003,0,0,60,20,Истина);
				 ШрифтЭлементаТСД(ВходныеДанные,4005,6,9,0,0);
				 ШрифтЭлементаТСД(ВходныеДанные,4003,6,9,0,0);
				 РазместитьКнопкуТСД(ВходныеДанные,"",4004,0,0,1,1,Ложь);
				 РазместитьКнопкуТСД(ВходныеДанные,"Отмена",4008,Горизонталь/2,Вертикаль - 98,Горизонталь/2-3,40,Истина);
				 РазместитьКнопкуТСД(ВходныеДанные,Строка(ПараметрыСеанса.глТекПользователь.Наименование),4500,20,вертикаль-56,0,50,Истина);
				 //ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,"Закончить",4007,3,Вертикаль - 98,Горизонталь/2-3,40,Истина); 
				 ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,"Начать",4007,3,Вертикаль - 98,Горизонталь/2-3,40,Истина);
				 //НачатьЗакрывВсеКроме(Перечисления.ВидыСкладскихОпераций.ПодборТовара);
				 Если считатьРег("АдресИнвентаризации") <> НЕопределено Тогда 
					 РазблокироватьАдрес(считатьРег("АдресИнвентаризации"));
					 УдалитьРег("АдресИнвентаризации");
				 КонецЕсли;
				 
				 
			 КонецЕсли;			 
			 Если Наименование = "Погрузка Список" Тогда    //Формирую двухколоночную Табличную часть на экране
				 ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,"    Погрузка   ",0,0,0,8,16,Истина); //заголовок окна и шрифт формы
				 ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,,list,0,63,0,159,Истина);//размер списка
				 ВходныеДанные = УдалитьКолонкуСписка(ВходныеДанные,0); // Удаление существующих колонок
				 ВходныеДанные = УдалитьКолонкуСписка(ВходныеДанные,1); //
				 ВходныеДанные = УдалитьКолонкуСписка(ВходныеДанные,2); //
				 ВходныеДанные = УдалитьКолонкуСписка(ВходныеДанные,3); //
				 
				 
				 ВходныеДанные = ДобавитьКолонкуТСД(ВходныеДанные,"Экспедитор",Горизонталь/2); // 
				 ВходныеДанные = ДобавитьКолонкуТСД(ВходныеДанные,"Номер авто",Горизонталь/2); //
				 ВходныеДанные = ДобавитьКолонкуТСД(ВходныеДанные,"",0); //
				 ВходныеДанные = ДобавитьКолонкуТСД(ВходныеДанные,"",0); //
				 
				 
				 РазместитьКнопкуТСД(ВходныеДанные,"Выберите экспедитора или наберите номер авто с клавиатуры",1006,0,0,0,40,Истина);
				 ШрифтЭлементаТСД(ВходныеДанные,1006,7,9,0,0);
				 ДобавитьСтроку(ВходныеДанные,"Расположение","4002",ПреобразоватьКоординаты(3,63-22,0,20));
				 //РазместитьКнопкуТСД(ВходныеДанные,"",combo,3,63-20,0,20,Истина);
				 РазместитьКнопкуТСД(ВходныеДанные,"Далее",4020,3,Вертикаль - 98,Горизонталь/2-3,40,Истина);
				 РазместитьКнопкуТСД(ВходныеДанные,"Отмена",4023,Горизонталь/2,Вертикаль - 98,Горизонталь/2-3,40,Истина);
				 РазместитьКнопкуТСД(ВходныеДанные,Строка(ПараметрыСеанса.глТекПользователь.Наименование),4500,20,вертикаль-50,0,50,Истина);
				 ПолучитьСписокЭкспедиторовЗаПоследнийМесяц(ВходныеДанные);
				 
				 
				 //НачатьЗакрывВсеКроме(Перечисления.ВидыСкладскихОпераций.ПодборТовара);
				 Если считатьРег("АдресИнвентаризации") <> НЕопределено Тогда 
					 РазблокироватьАдрес(считатьРег("АдресИнвентаризации"));
					 УдалитьРег("АдресИнвентаризации");
				 КонецЕсли;
			 КонецЕсли;
			 Если Наименование = "инвентаризация" Тогда //имя окна 
				 //УдалитьРег("ТаблицаВосстановленияСеанса");
				 Адрес = СчитатьРег("АдресПолки");
				 Если ЕстьСеанс Тогда
					 Адрес = СтрокаСеанса.Адрес;
					 ЗаписатьРег("АдресПолки",Адрес);
					 
				 КонецЕсли;	  
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "0";
				 Операция.Наименование = "Инвентаризация "+Адрес;
				 Операция.Количество   = ПреобразоватьКоординаты(0,0,0,0);//font size
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "4011";
				 Операция.Наименование = Строка(ПараметрыСеанса.глТекПользователь.Наименование);
				 Операция.Количество   = ПреобразоватьКоординаты(0,вертикаль-100,0,60);
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 НачатьЗакрывВсеКроме(Перечисления.ВидыСкладскихОпераций.Инвентаризация);
				 УдалитьКолонкуСписка(ВходныеДанные,0); //
				 УдалитьКолонкуСписка(ВходныеДанные,1); //
				 УдалитьКолонкуСписка(ВходныеДанные,2); //
				 УдалитьКолонкуСписка(ВходныеДанные,3); //
				 ДобавитьКолонкуТСД(ВходныеДанные,"Колич.",Горизонталь/7,0); //
				 ДобавитьКолонкуТСД(ВходныеДанные,"Товар",Горизонталь/2,2); //
				 ДобавитьКолонкуТСД(ВходныеДанные,"Код",Горизонталь/4,1); //
				 ДобавитьКолонкуТСД(ВходныеДанные,"Факт",Горизонталь/7,1); //
				 УдалитьКолонкуСписка(ВходныеДанные,4); //
				 Запрос = Новый Запрос;
				 Запрос.Текст = 
				 "ВЫБРАТЬ
				 |	Счет_41_АдресныйОстатки.Номенклатура.Код КАК Колонка2,
				 |	Счет_41_АдресныйОстатки.Номенклатура.Наименование КАК Колонка3,
				 |	Счет_41_АдресныйОстатки.КоличествоОстаток КАК Колонка1,
				 |	0 КАК Колонка4
				 |ИЗ
				 |	РегистрНакопления.Счет_41_Адресный.Остатки КАК Счет_41_АдресныйОстатки
				 |ГДЕ
				 |	Счет_41_АдресныйОстатки.Адрес = &Адрес";
				 //ЗаписатьРег("АдресДЯ",АдресОтправитель);
				 
				 Если  ЕстьСеанс Тогда 
					 Запрос.Текст = 
					 "ВЫБРАТЬ
					 |	Сеанс.Товар,
					 |	Сеанс.Количество
					 |ПОМЕСТИТЬ СтарыйСеанс
					 |ИЗ
					 |	&Сеанс КАК Сеанс
					 |;
					 |
					 |////////////////////////////////////////////////////////////////////////////////
					 |ВЫБРАТЬ
					 |	Счет_41_АдресныйОстатки.Номенклатура,
					 |	Счет_41_АдресныйОстатки.КоличествоОстаток
					 |ПОМЕСТИТЬ Счет_41_АдресныйОстатки
					 |ИЗ
					 |	РегистрНакопления.Счет_41_Адресный.Остатки КАК Счет_41_АдресныйОстатки
					 |ГДЕ
					 |	Счет_41_АдресныйОстатки.Адрес = &Адрес
					 |;
					 |
					 |////////////////////////////////////////////////////////////////////////////////
					 |ВЫБРАТЬ
					 |	ЕСТЬNULL(Счет_41_АдресныйОстатки.Номенклатура.Код, ВЫРАЗИТЬ(СтарыйСеанс.Товар КАК Справочник.Номенклатура).Код) КАК Колонка2,
					 |	ЕСТЬNULL(Счет_41_АдресныйОстатки.Номенклатура.Наименование, ВЫРАЗИТЬ(СтарыйСеанс.Товар КАК Справочник.Номенклатура).Наименование) КАК Колонка3,
					 |	ЕСТЬNULL(Счет_41_АдресныйОстатки.КоличествоОстаток, 0) КАК Колонка1,
					 |	ЕСТЬNULL(СтарыйСеанс.Количество, 0) КАК Колонка4
					 |ИЗ
					 |	Счет_41_АдресныйОстатки КАК Счет_41_АдресныйОстатки
					 |		ПОЛНОЕ СОЕДИНЕНИЕ СтарыйСеанс КАК СтарыйСеанс
					 |		ПО Счет_41_АдресныйОстатки.Номенклатура = СтарыйСеанс.Товар
					 |
					 |УПОРЯДОЧИТЬ ПО
					 |	Колонка1";
					 
					 Запрос.УстановитьПараметр("Сеанс",ТаблицаВосстановленияСеанса);
					 //УдалитьРег("ТаблицаВосстановленияСеанса");
				 КонецЕсли; 
				 
				 
				 Запрос.УстановитьПараметр("Адрес",Адрес );
				 Результат = Запрос.Выполнить();
				 ТЗ = Результат.Выгрузить();			 
				 
				 СтрокаНоменклатуры = ФабрикаXDTO.Тип("http://www.dns-shop.tsd.ru", "СтрокаНоменклатуры");
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры);
				 ДобавитьСтроку(ВходныеДанные,"ЗаполнитьТаблицу","10",113);  //Цвет rgb - "10"
				 
				 Параметр = 1;
				 Для каждого Стр из ТЗ Цикл
					 //Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
					 Код = СокрЛП(Строка(Стр[0]));
					 Код = ?(ПустаяСтрока(Код)," ",Код);
					 Наименование = СокрЛП(Строка(Стр[1]));
					 Наименование = ?(ПустаяСтрока(Наименование)," ",Наименование);
					 Количество = Строка(Стр[2]);
					 Количество = ?(ПустаяСтрока(Количество),"0",Количество);
					 КоличествоШК = Строка(Стр[3]);
					 КоличествоШК = ?(ПустаяСтрока(КоличествоШК),"0",КоличествоШК);
					 
					 
					 ДобавитьСтроку(ВходныеДанные,Код,Наименование,Параметр);
					 Параметр = Параметр +1;
					 ДобавитьСтроку(ВходныеДанные,"Колонка",КоличествоШК,0);
					 ДобавитьСтроку(ВходныеДанные,"Колонка",Количество,3);
					 
				 КонецЦикла;
				 ДобавитьСтроку(ВходныеДанные,"КонецТаблицы","-",0);
				 
				 
				 
				 //УдалитьРег("ТаблицаВосстановленияСеанса");
				 
				 
			 КонецЕсли;
			 Если Наименование = "СписокДЯ_Убрать все" Тогда
				 текущаяСтраница = СчитатьРег("текущаяСтраница");
				 
				 Если текущаяСтраница = 441 Тогда
					 
					 ТаблицаСоставТТН = СЧитатьРег("ТаблицаСоставТТН");
					 Филиал = СЧитатьРег("Филиал");
					 НайденнаяСтрока = ТаблицаСоставТТН.Найти(Филиал);
					 ДобавитьСтроку(ВходныеДанные,"ЗаполнитьТаблицу","-",113);
					 ДобавитьСтроку(ВходныеДанные,"ОчиститьТаблицу","-",0);
					 
					 Параметр = 1;
					 Если НайденнаяСтрока = Неопределено тогда ВызватьИсключение "Ошибка получения состава ТТН"; КонецЕсли;
					 Для каждого Стр из ТаблицаСоставТТН.Колонки Цикл
						 Если Стр.Ширина > 0 Тогда
							 Код = Стр.Заголовок;
							 Наименование = Стр.Имя;
							 ДобавитьСтроку(ВходныеДанные,Код,Наименование,Параметр);
							 Параметр = Параметр +1;
							 ДобавитьСтроку(ВходныеДанные,"Колонка","0",0);
						 КонецЕсли;
						 
					 КонецЦикла;
					 ДобавитьСтроку(ВходныеДанные,"КонецТаблицы","-",0);
					 
					 
					 
					 
				 Иначе
					 
					 
					 
					 Наименование = "Остаток ДЯ";
					 
				 КонецЕсли;
				 
			 КонецЕсли;
			 Если Наименование = "Остаток ДЯ" Тогда
				 
				 Запрос = Новый Запрос;
				 Запрос.Текст = 
				 "ВЫБРАТЬ
				 |	Счет_41_АдресныйОстатки.Номенклатура.Код КАК Колонка2,
				 |	Счет_41_АдресныйОстатки.Номенклатура.Наименование КАК Колонка3,
				 |	Счет_41_АдресныйОстатки.КоличествоОстаток КАК Колонка1,
				 |	0 КАК Колонка4
				 |ИЗ
				 |	РегистрНакопления.Счет_41_Адресный.Остатки КАК Счет_41_АдресныйОстатки
				 |ГДЕ
				 |	Счет_41_АдресныйОстатки.Адрес = &Адрес";
				 
				 Запрос.УстановитьПараметр("Адрес", СчитатьРег("АдресДЯ"));
				 Результат = Запрос.Выполнить();
				 ТЗ = Результат.Выгрузить();
				 
				 
				 СтрокаНоменклатуры = ФабрикаXDTO.Тип("http://www.dns-shop.tsd.ru", "СтрокаНоменклатуры");
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры);
				 ДобавитьСтроку(ВходныеДанные,"ЗаполнитьТаблицу","-",113);
				 
				 //Операция.Код          = "ЗаполнитьТаблицу";
				 //Операция.Наименование = "-";
				 //Операция.Количество   = 113;  //ListView_SetExtendedListViewStyle(  0х71 =0x00000040 + 0x00000001 +0x00000010 +0x00000020 = LVS_EX_ONECLICKACTIVATE | LVS_EX_GRIDLINES | LVS_EX_HEADERDRAGDROP | LVS_EX_FULLROWSELECT);
				 //ВходныеДанные.Номенклатура.Добавить(Операция);
				 Параметр = 1;
				 Для каждого Стр из ТЗ Цикл
					 //Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
					 Код = СокрЛП(Строка(Стр[0]));
					 Код = ?(ПустаяСтрока(Код)," ",Код);
					 Наименование = СокрЛП(Строка(Стр[1]));
					 Наименование = ?(ПустаяСтрока(Наименование)," ",Наименование);
					 Количество = Строка(Стр[2]);
					 Количество = ?(ПустаяСтрока(Количество),"0",Количество);
					 
					 
					 ДобавитьСтроку(ВходныеДанные,Код,Наименование,Параметр);
					 Параметр = Параметр +1;
					 ДобавитьСтроку(ВходныеДанные,"Колонка","0",0);
					 ДобавитьСтроку(ВходныеДанные,"Колонка",Количество,3);
					 
				 КонецЦикла;
				 ДобавитьСтроку(ВходныеДанные,"КонецТаблицы","-",0);
				 
			 КонецЕсли;
			 Если Наименование = "СписокДЯ_Выбрать все" Тогда //кнопка выбрать все при перемещении с ДЯ попадает сюда 
				 текущаяСтраница = СчитатьРег("текущаяСтраница");
				 ТранспортРазгрузка = считатьРег("ТранспортРазгрузка");
				 Адрес = СчитатьРег("АдресДЯ");
				 Запрос = Новый Запрос;
				 Запрос.Текст = 
				 "ВЫБРАТЬ
				 |	Счет_41_АдресныйОстатки.Номенклатура.Код КАК Колонка2,
				 |	Счет_41_АдресныйОстатки.Номенклатура.Наименование КАК Колонка3,
				 |	Счет_41_АдресныйОстатки.КоличествоОстаток КАК Колонка1,
				 |	0 КАК Колонка4,
				 |	Счет_41_АдресныйОстатки.Номенклатура КАК Товар
				 |ИЗ
				 |	РегистрНакопления.Счет_41_Адресный.Остатки КАК Счет_41_АдресныйОстатки
				 |ГДЕ
				 |	Счет_41_АдресныйОстатки.Адрес = &Адрес";
				 Если текущаяСтраница = 2 Тогда 
					 
					 Запрос.Текст = 
					 "ВЫБРАТЬ
					 |	СкладскойТранспортОстатки.Номенклатура.Код,
					 |	СкладскойТранспортОстатки.Номенклатура.Наименование,
					 |	СкладскойТранспортОстатки.КоличествоОстаток,
					 |	0 КАК Колонка4,
					 |	СкладскойТранспортОстатки.Номенклатура КАК Товар
					 |ИЗ
					 |	РегистрНакопления.Счет_41_Адресный.Остатки КАК Счет_41_АдресныйОстатки
					 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СкладскойТранспорт.Остатки КАК СкладскойТранспортОстатки
					 |		ПО Счет_41_АдресныйОстатки.Номенклатура = СкладскойТранспортОстатки.Номенклатура
					 |ГДЕ
					 |	Счет_41_АдресныйОстатки.Адрес = ""Т00-00-0""
					 |	И СкладскойТранспортОстатки.СкладскойТранспорт ПОДОБНО &СкладскойТранспорт
					 |	И СкладскойТранспортОстатки.КоличествоОстаток > 0";
					 
					 
					 
				 КонецЕсли;	 
				 Запрос.УстановитьПараметр("СкладскойТранспорт","%"+ТранспортРазгрузка);
				 Запрос.УстановитьПараметр("Адрес", Адрес);
				 Результат = Запрос.Выполнить();
				 ТЗ = Результат.Выгрузить();
				 
				 
				 СтрокаНоменклатуры = ФабрикаXDTO.Тип("http://www.dns-shop.tsd.ru", "СтрокаНоменклатуры");
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры);
				 ДобавитьСтроку(ВходныеДанные,"ЗаполнитьТаблицу","-",113);
				 ДобавитьСтроку(ВходныеДанные,"ОчиститьТаблицу","-",0);
				 
				 //Операция.Код          = "ЗаполнитьТаблицу";
				 //Операция.Наименование = "-";
				 //Операция.Количество   = 113;  //ListView_SetExtendedListViewStyle(  0х71 =0x00000040 + 0x00000001 +0x00000010 +0x00000020 = LVS_EX_ONECLICKACTIVATE | LVS_EX_GRIDLINES | LVS_EX_HEADERDRAGDROP | LVS_EX_FULLROWSELECT);
				 //ВходныеДанные.Номенклатура.Добавить(Операция);
				 //УдалитьРег(
				 Параметр = 1;
				 Для каждого Стр из ТЗ Цикл
					 //Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
					 Код = СокрЛП(Строка(Стр[0]));
					 Код = ?(ПустаяСтрока(Код)," ",Код);
					 Наименование = СокрЛП(Строка(Стр[1]));
					 Наименование = ?(ПустаяСтрока(Наименование)," ",Наименование);
					 Количество = Строка(Стр[2]);
					 Количество = ?(ПустаяСтрока(Количество),"0",Количество);
					 
					 
					 ДобавитьСтроку(ВходныеДанные,Код,Наименование,Параметр);
					 Параметр = Параметр +1;
					 ДобавитьСтроку(ВходныеДанные,"Колонка",Количество,0);
					 ДобавитьСтроку(ВходныеДанные,"Колонка",Количество,3);
					 //МодульВосстановленияСеанса(Стр.Товар,0,ТранспортРазгрузка,"Продолжить размещение");
				 КонецЦикла;
				 ДобавитьСтроку(ВходныеДанные,"КонецТаблицы","-",0);
				 
				 
				 
				 
			 КонецЕсли;	 
			 Если Наименование = "ПереместитьСПолкиНаПолку" Тогда //имя окна
				 Если ЕстьСеанс Тогда
					 Адрес = СтрокаСеанса.Адрес;
					 ЗаписатьРег("АдресПолкиПолучателя",Адрес);
					 ЗаписатьРег("АдресПолки",Адрес);
					 //УдалитьРег("ТаблицаВосстановленияСеанса");
				 КонецЕсли;
				 ЗаписатьРег("текущаяСтраница",0);
				 
				 ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,"Переместить с "+СчитатьРег("АдресПолки"),0,0,0,0,0,Истина);   // по идее это в заголовке формы
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "4011";
				 Операция.Наименование = Строка(ПараметрыСеанса.глТекПользователь.Наименование);
				 Операция.Количество   = ПреобразоватьКоординаты(0,вертикаль-100,0,60);
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 АдресОтправитель = СчитатьРег("АдресПолкиПолучателя"); 
				 
				 
				 Если ЧитатьРег("ПеремещениеДЯ",Ложь)= Истина тогда 
					 ВходныеДанные = УдалитьКолонкуСписка(ВходныеДанные,0); //
					 ВходныеДанные = УдалитьКолонкуСписка(ВходныеДанные,1); //
					 ВходныеДанные = УдалитьКолонкуСписка(ВходныеДанные,2); //
					 ВходныеДанные = УдалитьКолонкуСписка(ВходныеДанные,3); //
					 ВходныеДанные = ДобавитьКолонкуТСД(ВходныеДанные,"Колич.",Горизонталь/7,0); //
					 ВходныеДанные = ДобавитьКолонкуТСД(ВходныеДанные,"Товар",Горизонталь/2,2); //
					 ВходныеДанные = ДобавитьКолонкуТСД(ВходныеДанные,"Код",Горизонталь/4,1); //
					 ВходныеДанные = ДобавитьКолонкуТСД(ВходныеДанные,"Сканировано",Горизонталь/7,1); //
					 ВходныеДанные = УдалитьКолонкуСписка(ВходныеДанные,4); //
					 ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,"Отмена",4008,Горизонталь-Горизонталь/3+5,Вертикаль - 58,Горизонталь/3-7,22,Истина);
					 ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,"Переместить",4010,Горизонталь/3+8,Вертикаль - 58,Горизонталь/3-3,22,Истина);
					 //ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,"Переместить все",4007,1,Вертикаль - 58,Горизонталь/3+7,22,Истина);
					 ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,"Выбрать все",4007,1,Вертикаль - 58,Горизонталь/3+7,22,Истина);
					 Запрос = Новый Запрос;
					 Запрос.Текст = 
					 "ВЫБРАТЬ
					 |	Счет_41_АдресныйОстатки.Номенклатура.Код КАК Колонка2,
					 |	Счет_41_АдресныйОстатки.Номенклатура.Наименование КАК Колонка3,
					 |	Счет_41_АдресныйОстатки.КоличествоОстаток КАК Колонка1,
					 |	0 КАК Колонка4
					 |ИЗ
					 |	РегистрНакопления.Счет_41_Адресный.Остатки КАК Счет_41_АдресныйОстатки
					 |ГДЕ
					 |	Счет_41_АдресныйОстатки.Адрес = &Адрес";
					 
					 Если  ЕстьСеанс Тогда 
						 Запрос.Текст = 
						 "ВЫБРАТЬ
						 |	Сеанс.Товар,
						 |	Сеанс.Количество
						 |ПОМЕСТИТЬ СтарыйСеанс
						 |ИЗ
						 |	&Сеанс КАК Сеанс
						 |;
						 |
						 |////////////////////////////////////////////////////////////////////////////////
						 |ВЫБРАТЬ
						 |	ЕСТЬNULL(Счет_41_АдресныйОстатки.Номенклатура.Код, ВЫРАЗИТЬ(СтарыйСеанс.Товар КАК Справочник.Номенклатура).Код) КАК Колонка2,
						 |	ЕСТЬNULL(Счет_41_АдресныйОстатки.Номенклатура.Наименование, ВЫРАЗИТЬ(СтарыйСеанс.Товар КАК Справочник.Номенклатура).Наименование) КАК Колонка3,
						 |	ЕСТЬNULL(Счет_41_АдресныйОстатки.КоличествоОстаток, 0) КАК Колонка1,
						 |	ЕСТЬNULL(СтарыйСеанс.Количество, 0) КАК Колонка4
						 |ИЗ
						 |	РегистрНакопления.Счет_41_Адресный.Остатки КАК Счет_41_АдресныйОстатки
						 |		ЛЕВОЕ СОЕДИНЕНИЕ СтарыйСеанс КАК СтарыйСеанс
						 |		ПО Счет_41_АдресныйОстатки.Номенклатура = СтарыйСеанс.Товар
						 |ГДЕ
						 |	Счет_41_АдресныйОстатки.Адрес = &Адрес
						 |
						 |УПОРЯДОЧИТЬ ПО
						 |	Колонка1";
						 
						 Запрос.УстановитьПараметр("Сеанс",ТаблицаВосстановленияСеанса);
						 
					 КонецЕсли; 
					 
					 ЗаписатьРег("АдресДЯ",АдресОтправитель);
					 Запрос.УстановитьПараметр("Адрес",АдресОтправитель );
					 Результат = Запрос.Выполнить();
					 ТЗ = Результат.Выгрузить();
					 
					 
					 СтрокаНоменклатуры = ФабрикаXDTO.Тип("http://www.dns-shop.tsd.ru", "СтрокаНоменклатуры");
					 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры);
					 ДобавитьСтроку(ВходныеДанные,"ЗаполнитьТаблицу","-",113);
					 
					 Параметр = 1;
					 Для каждого Стр из ТЗ Цикл
						 //Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
						 Код = СокрЛП(Строка(Стр[0]));
						 Код = ?(ПустаяСтрока(Код)," ",Код);
						 Наименование = СокрЛП(Строка(Стр[1]));
						 Наименование = ?(ПустаяСтрока(Наименование)," ",Наименование);
						 Количество = Строка(Стр[2]);
						 Количество = ?(ПустаяСтрока(Количество),"0",Количество);
						 КоличествоШК = Строка(Стр[3]);
						 КоличествоШК = ?(ПустаяСтрока(КоличествоШК),"0",КоличествоШК);
						 
						 
						 ДобавитьСтроку(ВходныеДанные,Код,Наименование,Параметр);
						 Параметр = Параметр +1;
						 ДобавитьСтроку(ВходныеДанные,"Колонка",КоличествоШК,0);
						 ДобавитьСтроку(ВходныеДанные,"Колонка",Количество,3);
						 
					 КонецЦикла;
					 ДобавитьСтроку(ВходныеДанные,"КонецТаблицы","-",0);
					 
				 ИначеЕсли ЗначениеЗаполнено(ИнформацияПоТовару) тогда
					 УдалитьРег("ТаблицаВосстановленияСеанса");
					 Запрос = Новый Запрос;
					 Запрос.Текст = 
					 "ВЫБРАТЬ
					 |	Счет_41_АдресныйОстатки.Номенклатура.Код КАК Колонка2,
					 |	Счет_41_АдресныйОстатки.Номенклатура.Наименование КАК Колонка3,
					 |	Счет_41_АдресныйОстатки.КоличествоОстаток КАК Колонка1,
					 |	0 КАК Колонка4
					 |ИЗ
					 |	РегистрНакопления.Счет_41_Адресный.Остатки КАК Счет_41_АдресныйОстатки
					 |ГДЕ
					 |	Счет_41_АдресныйОстатки.Адрес = &Адрес
					 |	И Счет_41_АдресныйОстатки.Номенклатура = &Номенклатура";
					 Запрос.УстановитьПараметр("Номенклатура", ИнформацияПоТовару);
					 Запрос.УстановитьПараметр("Адрес", АдресОтправитель);
					 Результат = Запрос.Выполнить();
					 Если Результат.Пустой() Тогда
						 
						 Возврат ВходныеДанные;
					 КонецЕсли;
					 ТЗ = Результат.Выгрузить();
					 СтрокаНоменклатуры = ФабрикаXDTO.Тип("http://www.dns-shop.tsd.ru", "СтрокаНоменклатуры");
					 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры);
					 ДобавитьСтроку(ВходныеДанные,"ЗаполнитьТаблицу","-",113);
					 Параметр = 1;
					 Для каждого Стр из ТЗ Цикл
						 //Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
						 Код = СокрЛП(Строка(Стр[0]));
						 Код = ?(ПустаяСтрока(Код)," ",Код);
						 Наименование = СокрЛП(Строка(Стр[1]));
						 Наименование = ?(ПустаяСтрока(Наименование)," ",Наименование);
						 //Количество = Строка(Стр[2]);
						 //Количество = ?(ПустаяСтрока(Количество),"0",Количество);
						 ДобавитьСтроку(ВходныеДанные,Код,Наименование,Параметр);
						 Параметр = Параметр +1;
						 ДобавитьСтроку(ВходныеДанные,"КоличествоКэш","0",Стр[2]);
						 ДобавитьСтроку(ВходныеДанные,"Колонка","1",0);
						 //ДобавитьСтроку(ВходныеДанные,"Артикул","0000",0);
						 //ДобавитьСтроку(ВходныеДанные,"Колонка",Количество,3);
					 КонецЦикла;
					 ДобавитьСтроку(ВходныеДанные,"КонецТаблицы","-",0);
				 ИначеЕсли ЕстьСеанс ТОгда
					 //УдалитьРег("ТаблицаВосстановленияСеанса");
					 Запрос = Новый Запрос;
					 Запрос.Текст = 
					 "ВЫБРАТЬ
					 |	Сеанс.Товар,
					 |	Сеанс.Количество
					 |ПОМЕСТИТЬ СтарыйСеанс
					 |ИЗ
					 |	&Сеанс КАК Сеанс
					 |;
					 |
					 |////////////////////////////////////////////////////////////////////////////////
					 |ВЫБРАТЬ
					 |	ЕСТЬNULL(Счет_41_АдресныйОстатки.Номенклатура.Код, ВЫРАЗИТЬ(СтарыйСеанс.Товар КАК Справочник.Номенклатура).Код) КАК Колонка2,
					 |	ЕСТЬNULL(Счет_41_АдресныйОстатки.Номенклатура.Наименование, ВЫРАЗИТЬ(СтарыйСеанс.Товар КАК Справочник.Номенклатура).Наименование) КАК Колонка3,
					 |	ЕСТЬNULL(Счет_41_АдресныйОстатки.КоличествоОстаток, 0) КАК Колонка1,
					 |	ЕСТЬNULL(СтарыйСеанс.Количество, 0) КАК Колонка4
					 |ИЗ
					 |	РегистрНакопления.Счет_41_Адресный.Остатки КАК Счет_41_АдресныйОстатки
					 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтарыйСеанс КАК СтарыйСеанс
					 |		ПО Счет_41_АдресныйОстатки.Номенклатура = СтарыйСеанс.Товар
					 |ГДЕ
					 |	Счет_41_АдресныйОстатки.Адрес = &Адрес
					 |	И СтарыйСеанс.Количество > 0
					 |
					 |УПОРЯДОЧИТЬ ПО
					 |	Колонка1";
					 
					 Запрос.УстановитьПараметр("Сеанс",ТаблицаВосстановленияСеанса);
					 //Запрос.УстановитьПараметр("Номенклатура", ИнформацияПоТовару);
					 Запрос.УстановитьПараметр("Адрес", АдресОтправитель);
					 Результат = Запрос.Выполнить();
					 Если Результат.Пустой() Тогда
						 УдалитьРег("ТаблицаВосстановленияСеанса");
						 
						 Возврат ВходныеДанные;
					 КонецЕсли;
					 ТЗ = Результат.Выгрузить();
					 СтрокаНоменклатуры = ФабрикаXDTO.Тип("http://www.dns-shop.tsd.ru", "СтрокаНоменклатуры");
					 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры);
					 ДобавитьСтроку(ВходныеДанные,"ЗаполнитьТаблицу","-",113);
					 Параметр = 1;
					 Для каждого Стр из ТЗ Цикл
						 //Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
						 Код = СокрЛП(Строка(Стр[0]));
						 Код = ?(ПустаяСтрока(Код)," ",Код);
						 Наименование = СокрЛП(Строка(Стр[1]));
						 Наименование = ?(ПустаяСтрока(Наименование)," ",Наименование);
						 Количество = Строка(Стр[3]);
						 Количество = ?(ПустаяСтрока(Количество),"0",Количество);
						 ДобавитьСтроку(ВходныеДанные,Код,Наименование,Параметр);
						 Параметр = Параметр +1;
						 //ДобавитьСтроку(ВходныеДанные,"КоличествоКэш","0",Стр[2]);
						 ДобавитьСтроку(ВходныеДанные,"Колонка",Количество,0);
						 //ДобавитьСтроку(ВходныеДанные,"Артикул","0000",0);
						 //ДобавитьСтроку(ВходныеДанные,"Колонка",Количество,3);
					 КонецЦикла;
					 ДобавитьСтроку(ВходныеДанные,"КонецТаблицы","-",0);
					 
					 
					 
					 
				 КонецЕсли;
				 
				 Если считатьРег("АдресИнвентаризации") <> НЕопределено Тогда 
					 РазблокироватьАдрес(считатьРег("АдресИнвентаризации"));
					 УдалитьРег("АдресИнвентаризации");
					 Удалитьрег("СейчасИнвентаризация");
					 
				 КонецЕсли;
				 
				 
			 КонецЕсли;
			 Если Наименование = "Размещение товара" Тогда //имя окна 
				 
				 
				 //Адрес = СчитатьРег("АдресПолкиПолучателя");
				 Если ЕстьСеанс Тогда
					 Адрес = СтрокаСеанса.Адрес;
					 ЗаписатьРег("ТранспортРазгрузка",Адрес);
					 ЗаписатьРег("АдресПолкиПолучателя",Адрес);
				 КонецЕсли;	  
				 ТранспортРазгрузка = считатьРег("ТранспортРазгрузка");
				 
				 //ИначеЕсли ЕстьСеанс ТОгда
				 //
				 Запрос = Новый Запрос;
				 Запрос.Текст = 
				 "ВЫБРАТЬ
				 |	СкладскойТранспортОстатки.Номенклатура.Код,
				 |	СкладскойТранспортОстатки.Номенклатура.Наименование,
				 |	СкладскойТранспортОстатки.КоличествоОстаток,
				 |	0 КАК Колонка4
				 |ИЗ
				 |	РегистрНакопления.Счет_41_Адресный.Остатки КАК Счет_41_АдресныйОстатки
				 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СкладскойТранспорт.Остатки КАК СкладскойТранспортОстатки
				 |		ПО Счет_41_АдресныйОстатки.Номенклатура = СкладскойТранспортОстатки.Номенклатура
				 |ГДЕ
				 |	Счет_41_АдресныйОстатки.Адрес = ""Т00-00-0""
				 |	И СкладскойТранспортОстатки.СкладскойТранспорт ПОДОБНО &СкладскойТранспорт
				 |	И СкладскойТранспортОстатки.КоличествоОстаток > 0";
				 
				 Если ЕстьСеанс ТОгда
					 Запрос.Текст = 
					 "ВЫБРАТЬ
					 |	Сеанс.Товар,
					 |	Сеанс.Количество
					 |ПОМЕСТИТЬ СтарыйСеанс
					 |ИЗ
					 |	&Сеанс КАК Сеанс
					 |;
					 |
					 |////////////////////////////////////////////////////////////////////////////////
					 |ВЫБРАТЬ
					 |	СкладскойТранспортОстатки.Номенклатура.Код,
					 |	СкладскойТранспортОстатки.Номенклатура.Наименование,
					 |	СкладскойТранспортОстатки.КоличествоОстаток,
					 |	ЕСТЬNULL(СтарыйСеанс.Количество, 0) КАК Поле1
					 |ИЗ
					 |	РегистрНакопления.Счет_41_Адресный.Остатки КАК Счет_41_АдресныйОстатки
					 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СкладскойТранспорт.Остатки КАК СкладскойТранспортОстатки
					 |			ЛЕВОЕ СОЕДИНЕНИЕ СтарыйСеанс КАК СтарыйСеанс
					 |			ПО СкладскойТранспортОстатки.Номенклатура = СтарыйСеанс.Товар
					 |		ПО Счет_41_АдресныйОстатки.Номенклатура = СкладскойТранспортОстатки.Номенклатура
					 |ГДЕ
					 |	Счет_41_АдресныйОстатки.Адрес = ""Т00-00-0""
					 |	И СкладскойТранспортОстатки.СкладскойТранспорт ПОДОБНО &СкладскойТранспорт
					 |	И СкладскойТранспортОстатки.КоличествоОстаток > 0";
					 
				 КонецЕсли;
				 
				 
				 Запрос.УстановитьПараметр("Сеанс",ТаблицаВосстановленияСеанса);
				 Запрос.УстановитьПараметр("СкладскойТранспорт","%"+ТранспортРазгрузка);
				 Результат = Запрос.Выполнить();
				 Если Результат.Пустой() Тогда
					 УдалитьРег("ТаблицаВосстановленияСеанса");
					 ДобавитьСтроку(ВходныеДанные,"ВыходСОшибкой","Вы выбрали пустой транспорт либо с товаром не в зоне ""Т""",0);
					 Возврат ВходныеДанные;
				 КонецЕсли;
				 
				 
				 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "0";
				 Операция.Наименование = "Разместить из "+ТранспортРазгрузка;
				 Операция.Количество   = ПреобразоватьКоординаты(0,0,0,0);//font size
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "4011";
				 Операция.Наименование = Строка(ПараметрыСеанса.глТекПользователь.Наименование);
				 Операция.Количество   = ПреобразоватьКоординаты(0,вертикаль-100,0,60);
				 НачатьЗакрывВсеКроме(Перечисления.ВидыСкладскихОпераций.РазмещениеТовара);
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 УдалитьКолонкуСписка(ВходныеДанные,0); //
				 УдалитьКолонкуСписка(ВходныеДанные,1); //
				 УдалитьКолонкуСписка(ВходныеДанные,2); //
				 УдалитьКолонкуСписка(ВходныеДанные,3); //
				 ДобавитьКолонкуТСД(ВходныеДанные,"Колич.",0,0);//Горизонталь/7,0); //
				 ДобавитьКолонкуТСД(ВходныеДанные,"Товар",Горизонталь/2,2); //
				 ДобавитьКолонкуТСД(ВходныеДанные,"Код",Горизонталь/4,1); //
				 ДобавитьКолонкуТСД(ВходныеДанные,"Сканировано",Горизонталь/7,1); //
				 УдалитьКолонкуСписка(ВходныеДанные,4); //
				 РазместитьКнопкуТСД(ВходныеДанные,"Отмена",4008,Горизонталь-Горизонталь/3+5,Вертикаль - 58,Горизонталь/3-7,22,Истина);
				 РазместитьКнопкуТСД(ВходныеДанные,"Разместить",4010,Горизонталь/3+8,Вертикаль - 58,Горизонталь/3-3,22,Истина);
				 РазместитьКнопкуТСД(ВходныеДанные,"Выбрать все",4007,1,Вертикаль - 58,Горизонталь/3+7,22,Ложь);
				 
				 
				 ТЗ = Результат.Выгрузить();
				 
				 ДобавитьСтроку(ВходныеДанные,"ЗаполнитьТаблицу","-",113);
				 Параметр = 1;
				 Для каждого Стр из ТЗ Цикл
					 //Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
					 Код = СокрЛП(Строка(Стр[0]));
					 Код = ?(ПустаяСтрока(Код)," ",Код);
					 Наименование = СокрЛП(Строка(Стр[1]));
					 Наименование = ?(ПустаяСтрока(Наименование)," ",Наименование);
					 Количество = Строка(Стр[2]);
					 Количество = ?(ПустаяСтрока(Количество),"0",Количество);
					 КоличествоШК = Строка(Стр[3]);
					 КоличествоШК = ?(ПустаяСтрока(КоличествоШК),"0",КоличествоШК);
					 //ДобавитьСтроку(ВходныеДанные,Код,Наименование,Параметр);
					 //Параметр = Параметр +1;
					 ДобавитьСтроку(ВходныеДанные,Код,Наименование,Параметр);
					 Параметр = Параметр +1;
					 ДобавитьСтроку(ВходныеДанные,"Колонка",КоличествоШК,0);
					 ДобавитьСтроку(ВходныеДанные,"Колонка",Количество,3);
				 КонецЦикла;
				 ДобавитьСтроку(ВходныеДанные,"КонецТаблицы","-",0);
				 //КонецЕсли;
				 
				 
				 
				 
				 Если считатьРег("АдресИнвентаризации") <> НЕопределено Тогда 
					 РазблокироватьАдрес(считатьРег("АдресИнвентаризации"));
					 УдалитьРег("АдресИнвентаризации");
					 Удалитьрег("СейчасИнвентаризация");
					 
				 КонецЕсли;
				 Возврат ВходныеДанные;//------------------------------------------------
				 Если ЗначениеЗаполнено(ИнформацияПоТовару) тогда
					 УдалитьРег("ТаблицаВосстановленияСеанса");
					 
					 Запрос = Новый Запрос;
					 Запрос.Текст = 
					 "ВЫБРАТЬ
					 |	Счет_41_АдресныйОстатки.Номенклатура.Код КАК Колонка2,
					 |	Счет_41_АдресныйОстатки.Номенклатура.Наименование КАК Колонка3,
					 |	Счет_41_АдресныйОстатки.КоличествоОстаток КАК Колонка1,
					 |	0 КАК Колонка4
					 |ИЗ
					 |	РегистрНакопления.Счет_41_Адресный.Остатки КАК Счет_41_АдресныйОстатки
					 |ГДЕ
					 |	Счет_41_АдресныйОстатки.Адрес = ""Т00-00-0""
					 |	И Счет_41_АдресныйОстатки.Номенклатура = &Номенклатура";
					 Запрос.УстановитьПараметр("Номенклатура", ИнформацияПоТовару);
					 
					 //Запрос.УстановитьПараметр("Адрес", СчитатьРег("АдресДЯ"));
					 Результат = Запрос.Выполнить();
					 Если Результат.Пустой() Тогда
						 //УдалитьРег("ТаблицаВосстановленияСеанса");
						 
						 Возврат ВходныеДанные;
					 КонецЕсли;
					 ТЗ = Результат.Выгрузить();
					 СтрокаНоменклатуры = ФабрикаXDTO.Тип("http://www.dns-shop.tsd.ru", "СтрокаНоменклатуры");
					 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры);
					 ДобавитьСтроку(ВходныеДанные,"ЗаполнитьТаблицу","-",113);
					 Параметр = 1;
					 Для каждого Стр из ТЗ Цикл
						 //Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
						 Код = СокрЛП(Строка(Стр[0]));
						 Код = ?(ПустаяСтрока(Код)," ",Код);
						 Наименование = СокрЛП(Строка(Стр[1]));
						 Наименование = ?(ПустаяСтрока(Наименование)," ",Наименование);
						 //Количество = Строка(Стр[2]);
						 //Количество = ?(ПустаяСтрока(Количество),"0",Количество);
						 ДобавитьСтроку(ВходныеДанные,Код,Наименование,Параметр);
						 Параметр = Параметр +1;
						 ДобавитьСтроку(ВходныеДанные,"КоличествоКэш","0",Стр[2]);
						 ДобавитьСтроку(ВходныеДанные,"Колонка","1",0);
						 //ДобавитьСтроку(ВходныеДанные,"Артикул","0000",0);
						 //ДобавитьСтроку(ВходныеДанные,"Колонка",Количество,3);
					 КонецЦикла;
					 ДобавитьСтроку(ВходныеДанные,"КонецТаблицы","-",0);
					 
				 ИначеЕсли ЕстьСеанс ТОгда
					 //
					 Запрос = Новый Запрос;
					 Запрос.Текст = 
					 "ВЫБРАТЬ
					 |	Сеанс.Товар,
					 |	Сеанс.Количество
					 |ПОМЕСТИТЬ СтарыйСеанс
					 |ИЗ
					 |	&Сеанс КАК Сеанс
					 |;
					 |
					 |////////////////////////////////////////////////////////////////////////////////
					 |ВЫБРАТЬ
					 |	ЕСТЬNULL(Счет_41_АдресныйОстатки.Номенклатура.Код, ВЫРАЗИТЬ(СтарыйСеанс.Товар КАК Справочник.Номенклатура).Код) КАК Колонка2,
					 |	ЕСТЬNULL(Счет_41_АдресныйОстатки.Номенклатура.Наименование, ВЫРАЗИТЬ(СтарыйСеанс.Товар КАК Справочник.Номенклатура).Наименование) КАК Колонка3,
					 |	ЕСТЬNULL(Счет_41_АдресныйОстатки.КоличествоОстаток, 0) КАК Колонка1,
					 |	ЕСТЬNULL(СтарыйСеанс.Количество, 0) КАК Колонка4
					 |ИЗ
					 |	РегистрНакопления.Счет_41_Адресный.Остатки КАК Счет_41_АдресныйОстатки
					 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтарыйСеанс КАК СтарыйСеанс
					 |		ПО Счет_41_АдресныйОстатки.Номенклатура = СтарыйСеанс.Товар
					 |ГДЕ
					 |	Счет_41_АдресныйОстатки.Адрес = ""Т00-00-0""
					 |
					 |УПОРЯДОЧИТЬ ПО
					 |	Колонка1";
					 
					 Запрос.УстановитьПараметр("Сеанс",ТаблицаВосстановленияСеанса);
					 Результат = Запрос.Выполнить();
					 Если Результат.Пустой() Тогда
						 УдалитьРег("ТаблицаВосстановленияСеанса");
						 
						 Возврат ВходныеДанные;
					 КонецЕсли;
					 ТЗ = Результат.Выгрузить();
					 СтрокаНоменклатуры = ФабрикаXDTO.Тип("http://www.dns-shop.tsd.ru", "СтрокаНоменклатуры");
					 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры);
					 ДобавитьСтроку(ВходныеДанные,"ЗаполнитьТаблицу","-",113);
					 Параметр = 1;
					 Для каждого Стр из ТЗ Цикл
						 //Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
						 Код = СокрЛП(Строка(Стр[0]));
						 Код = ?(ПустаяСтрока(Код)," ",Код);
						 Наименование = СокрЛП(Строка(Стр[1]));
						 Наименование = ?(ПустаяСтрока(Наименование)," ",Наименование);
						 Количество = Строка(Стр[3]);
						 Количество = ?(ПустаяСтрока(Количество),"0",Количество);
						 ДобавитьСтроку(ВходныеДанные,Код,Наименование,Параметр);
						 Параметр = Параметр +1;
						 //ДобавитьСтроку(ВходныеДанные,"КоличествоКэш","0",Стр[2]);
						 ДобавитьСтроку(ВходныеДанные,"Колонка",Количество,0);
						 //ДобавитьСтроку(ВходныеДанные,"Артикул","0000",0);
						 //ДобавитьСтроку(ВходныеДанные,"Колонка",Количество,3);
					 КонецЦикла;
					 ДобавитьСтроку(ВходныеДанные,"КонецТаблицы","-",0);
				 КонецЕсли;
				 
				 
				 Возврат ВходныеДанные;
			 КонецЕсли;
			 Если Наименование = "Форма подбора товара" Тогда //имя окна 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "0";
				 Адрес = СчитатьРег("Адрес");
				 Операция.Наименование = Строка(СчитатьРег("Клиент"))+?(ЗначениеЗаполнено(Адрес)," из "+Адрес,"");
				 Операция.Количество   = ПреобразоватьКоординаты(0,0,0,0);//font size
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "4011";
				 Операция.Наименование = Строка(ПараметрыСеанса.глТекПользователь.Наименование);
				 Операция.Количество   = ПреобразоватьКоординаты(0,вертикаль-120,0,61);
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные," ",4023,Горизонталь,вертикаль,1,1,Ложь);
				 ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,".Х.",4013,Горизонталь-27,вертикаль-50,22,22,Истина);
				 
				 
				 //НачатьЗакрывВсеКроме(Перечисления.ВидыСкладскихОпераций.ПодборТовара);
				 Если считатьРег("АдресИнвентаризации") <> НЕопределено Тогда 
					 РазблокироватьАдрес(считатьРег("АдресИнвентаризации"));
					 УдалитьРег("АдресИнвентаризации");
				 КонецЕсли;
				 
			 КонецЕсли;
			 Если Наименование = "Дефрагментация Форма перемещения товара" Тогда 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "0";
				 Адрес = СчитатьРег("Адрес");
				 Операция.Наименование = "Переместить в "+Строка(СчитатьРег("Секция"));
				 Операция.Количество   = ПреобразоватьКоординаты(0,0,0,0);//font size
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "4011";
				 Операция.Наименование = Строка(ПараметрыСеанса.глТекПользователь.Наименование);
				 Операция.Количество   = ПреобразоватьКоординаты(0,вертикаль-120,0,61);
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "4023";
				 Операция.Наименование = "Завершить";
				 Операция.Количество   = ПреобразоватьКоординаты(Горизонталь-65,вертикаль-50,60,21);
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 
				 
				 //НачатьЗакрывВсеКроме(Перечисления.ВидыСкладскихОпераций.ПодборТовара);
				 Если считатьРег("АдресИнвентаризации") <> НЕопределено Тогда 
					 РазблокироватьАдрес(считатьРег("АдресИнвентаризации"));
					 УдалитьРег("АдресИнвентаризации");
				 КонецЕсли;
				 
				 
				 
			 КонецЕсли;
			 Если Наименование = "Дефрагментация Форма подбора товара" Тогда //имя окна 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "0";
				 Адрес = СчитатьРег("Адрес");
				 Операция.Наименование = "Подтоварка "+Строка(СчитатьРег("Секция"));
				 Операция.Количество   = ПреобразоватьКоординаты(0,0,0,0);//font size
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "4011";
				 Операция.Наименование = Строка(ПараметрыСеанса.глТекПользователь.Наименование);
				 Операция.Количество   = ПреобразоватьКоординаты(0,вертикаль-120,0,61);
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "4023";
				 Операция.Наименование = "Далее";
				 Операция.Количество   = ПреобразоватьКоординаты(Горизонталь-45,вертикаль-50,40,21);
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 
				 
				 //НачатьЗакрывВсеКроме(Перечисления.ВидыСкладскихОпераций.ПодборТовара);
				 Если считатьРег("АдресИнвентаризации") <> НЕопределено Тогда 
					 РазблокироватьАдрес(считатьРег("АдресИнвентаризации"));
					 УдалитьРег("АдресИнвентаризации");
				 КонецЕсли;
				 
			 КонецЕсли;
			 Если Наименование = "Выбор Транспорта" Тогда
				 //combo 	 zagolovokokna
				 ЗаписатьРег(Наименование,Истина);
				 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "2";
				 Операция.Наименование = "Отменa";
				 Операция.Количество   = ПреобразоватьКоординаты(горизонталь/3,2*вертикаль/3,63,46);
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 
				 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "4011";
				 Операция.Наименование = "и транспортируйте к секции "+ СчитатьРег("считаннаясекция");
				 Операция.Количество   = ПреобразоватьКоординаты(0,60,0,40);
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = Формат(Цел(list),"ЧДЦ=0; ЧН=; ЧГ=0"); //0= типа енабле дизабле контрол
				 Операция.Наименование = "Сканируйте динамическую ячейку для перемещения товара";
				 Операция.Количество   = ПреобразоватьКоординаты(1,1,0,60);
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 
				 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "0";
				 Операция.Наименование = "Динамическая ячейка";
				 Операция.Количество   = ПреобразоватьКоординаты(0,0,8,16);//form font size
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 Возврат ВходныеДанные;
			 КонецЕсли;
			 Если Наименование = "Выбор Адреса Задания" Тогда
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "0";
				 Операция.Наименование = "Сканирование адреса";
				 Операция.Количество   = ПреобразоватьКоординаты(0,0,9,16);//font size
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "1006";
				 Операция.Наименование = "Сканируйте адрес любой полки из секции";
				 Операция.Количество   = ПреобразоватьКоординаты(0,0,0,50);
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 
				 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = Формат(Цел(list + 65536*1),"ЧДЦ=0; ЧН=; ЧГ=0"); //0= типа енабле дизабле контрол
				 Операция.Наименование = "";
				 Операция.Количество   = ПреобразоватьКоординаты(0,50,0,120);
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "4023";
				 Операция.Наименование = "Отмена";
				 Операция.Количество   = ПреобразоватьКоординаты(горизонталь/3,2*вертикаль/3,горизонталь/3,45);
				 ВходныеДанные.Номенклатура.Добавить(Операция);
			 КонецЕсли;
			 Если Наименование = "ИнвентаризацияАдрес" Тогда
				 //combo 	 zagolovokokna
				 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = Формат(Цел(combo + 65536*0),"ЧДЦ=0; ЧН=; ЧГ=0"); //0= типа енабле дизабле контрол
				 Операция.Наименование = "Сканируйте адрес полки для инвентаризации";
				 Операция.Количество   = ПреобразоватьКоординаты(0,0,0,40);
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "4011";
				 Операция.Наименование = Строка(ПараметрыСеанса.глТекПользователь.Наименование);
				 Операция.Количество   = ПреобразоватьКоординаты(0,вертикаль-45,0,45);
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "0";
				 Операция.Наименование = "Инвентаризация адреса";
				 Операция.Количество   = ПреобразоватьКоординаты(0,0,8,16);//font size
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 РазместитьКнопкуТСД(ВходныеДанные,"Сканируйте адрес инвентаризации:",4020,0,0,0,вертикаль/5,Истина);
				 ШрифтЭлементаТСД(ВходныеДанные,4020,8,16,0,0);
				 УдалитьРег("ТаблицаВосстановленияСеанса");
				 
				 ЗаписатьРег("СейчасИнвентаризация",Истина);
				 //ДобавитьСтроку(ВходныеДанные,Код,Наименование,Параметр);
				 //иначе СканированиеАдреса = Истина;
				 ЗаписатьРег("текущаяСтраница",1);
				 
				 
			 КонецЕсли;
			 Если Наименование = "Дефрагментация Адреса" Тогда
				 //combo 	 zagolovokokna
				 Запрос = Новый Запрос;
				 Запрос.Текст = 
				 "ВЫБРАТЬ РАЗЛИЧНЫЕ
				 |	ЗаданияНаДефрагментацию.АдресПодбора
				 |ИЗ
				 |	РегистрСведений.ЗаданияНаДефрагментацию КАК ЗаданияНаДефрагментацию
				 |ГДЕ
				 |	ЗаданияНаДефрагментацию.Исполнитель = &Автор
				 |	И ЗаданияНаДефрагментацию.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.Собрано)";
				 
				 Запрос.УстановитьПараметр("Автор",ПараметрыСеанса.глТекПользователь );
				 Результат = Запрос.Выполнить().Выбрать();
				 АдресПодбора = "";
				 Если  Результат.Следующий() Тогда АдресПодбора = Результат.АдресПодбора; КонецЕсли;
				 
				 
				 
				 ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,"Сканируйте адрес получателя:"+АдресПодбора ,combo,0,0,0,60,Истина);
				 ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,"Сканируйте адрес получателя:"+АдресПодбора,4020,0,0,0,60,Истина);
				 
				 //Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 //Операция.Код          = Формат(Цел(combo + 65536*0),"ЧДЦ=0; ЧН=; ЧГ=0"); //0= типа енабле дизабле контрол
				 //Операция.Наименование = "Сканируйте адрес полки получателя:";
				 //Операция.Количество   = ПреобразоватьКоординаты(0,0,0,40);
				 //ВходныеДанные.Номенклатура.Добавить(Операция);
				 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "4011";
				 Операция.Наименование = Строка(ПараметрыСеанса.глТекПользователь.Наименование);
				 Операция.Количество   = ПреобразоватьКоординаты(0,вертикаль-45,0,45);
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "0";
				 Операция.Наименование = "Подтоварка адреса";
				 Операция.Количество   = ПреобразоватьКоординаты(0,0,8,16);//font size
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 Удалитьрег("СейчасИнвентаризация");
				 
				 
				 
			 КонецЕсли;
			 Если Наименование = "Склад Получатель" Тогда
				 //combo 	 zagolovokokna
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = Формат(Цел(combo + 65536*0),"ЧДЦ=0; ЧН=; ЧГ=0"); //0= типа енабле дизабле контрол
				 Операция.Наименование = "Сканируйте адрес полки получателя:";
				 Операция.Количество   = ПреобразоватьКоординаты(0,0,0,40);
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "4011";
				 Операция.Наименование = Строка(ПараметрыСеанса.глТекПользователь.Наименование);
				 Операция.Количество   = ПреобразоватьКоординаты(0,вертикаль-45,0,45);
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "0";
				 Операция.Наименование = "Перемещение товара на полку";
				 Операция.Количество   = ПреобразоватьКоординаты(0,0,8,16);//font size
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 РазместитьКнопкуТСД(ВходныеДанные,"Сканируйте адрес-получатель:",4020,0,0,0,вертикаль/5,Истина);
				 ШрифтЭлементаТСД(ВходныеДанные,4020,8,16,0,0);
				 Удалитьрег("СейчасИнвентаризация");
				 УдалитьРег("ТаблицаВосстановленияСеанса");
				 
				 //иначе СканированиеАдреса = Истина;
				 
			 КонецЕсли;
			 Если Наименование = "Полка отправитель" Тогда
				 //combo 	 zagolovokokna
				 перегрузитьрег();
				 ЗаписатьРег("ИнформацияПоТовару",ИнформацияПоТовару);
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = Формат(Цел(combo + 65536*0),"ЧДЦ=0; ЧН=; ЧГ=0"); //0= типа енабле дизабле контрол
				 Операция.Наименование = "Сканируйте адрес полки отправителя:";
				 Операция.Количество   = ПреобразоватьКоординаты(0,0,0,40);
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 Если считатьРег("АдресИнвентаризации") <> НЕопределено Тогда 
					 РазблокироватьАдрес(считатьРег("АдресИнвентаризации"));
					 УдалитьРег("АдресИнвентаризации");
					 Удалитьрег("СейчасИнвентаризация");
				 КонецЕсли;
				 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "4011";
				 Операция.Наименование = Строка(ПараметрыСеанса.глТекПользователь.Наименование);
				 Операция.Количество   = ПреобразоватьКоординаты(0,вертикаль-45,0,45);
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "0";
				 Операция.Наименование = "Перемещение товара с полки";
				 Операция.Количество   = ПреобразоватьКоординаты(0,0,8,16);//font size
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 РазместитьКнопкуТСД(ВходныеДанные,"Сканируйте адрес-отправитель:",4020,0,0,0,вертикаль/5,Истина);
				 ШрифтЭлементаТСД(ВходныеДанные,4020,8,16,0,0);
				 ЗаписатьРег("текущаяСтраница",0);
				 Удалитьрег("СейчасИнвентаризация");
				 СканированиеАдреса = Истина;
			 КонецЕсли;
			 Если Наименование = "Адрес получатель:" Тогда
				 //combo 	 zagolovokokna
				 
				 //перегрузитьрег();
				 //ЗаписатьРег("ИнформацияПоТовару",ИнформацияПоТовару);
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = Формат(Цел(combo + 65536*0),"ЧДЦ=0; ЧН=; ЧГ=0"); //0= типа енабле дизабле контрол
				 Операция.Наименование = "Сканируйте адрес полки получателя:";
				 Операция.Количество   = ПреобразоватьКоординаты(0,0,0,40);
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "4011";
				 Операция.Наименование = Строка(ПараметрыСеанса.глТекПользователь.Наименование);
				 Операция.Количество   = ПреобразоватьКоординаты(0,вертикаль-45,0,45);
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "0";
				 Операция.Наименование = "Размещение товара с Т зоны";
				 Операция.Количество   = ПреобразоватьКоординаты(0,0,8,16);//font size
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 ЗаписатьРег("Вид_Окна",Наименование);
				 РазместитьКнопкуТСД(ВходныеДанные,"Сканируйте адрес-получатель:",4020,0,0,0,вертикаль/5,Истина);
				 ШрифтЭлементаТСД(ВходныеДанные,4020,8,16,0,0);
				 ЗаписатьРег("текущаяСтраница",2);
				 Если считатьРег("АдресИнвентаризации") <> НЕопределено Тогда 
					 РазблокироватьАдрес(считатьРег("АдресИнвентаризации"));
					 УдалитьРег("АдресИнвентаризации");
				 КонецЕсли;
				 СканированиеАдреса = Истина;
			 КонецЕсли;
			 Если Наименование = "Дефрагментация Выбор задания" Тогда
				 
				 
			 КонецЕсли;
			 Если Наименование = "Инвентаризация Форма подбора товара" Тогда
				 УдалитьРег("ВыбТовар");
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "0";				//Основное окно
				 Адрес = СчитатьРег("Адрес");
				 Операция.Наименование = "Выбор товара на проверку";
				 Операция.Количество   = ПреобразоватьКоординаты(0,0,0,0);//font size
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "4011"; 			//выбраный товар вначале фио
				 Операция.Наименование = "Необходимо выбрать товар для инвентаризации";
				 Операция.Количество   = ПреобразоватьКоординаты(0,вертикаль-120,0,61);
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "4012";//"4012"; //надпись СТ: //убираем ее за экран хотя можно невидимой просто сделать :) e = (_wtoi(code) >> 17) & 1;
				 Операция.Наименование = Строка(ПараметрыСеанса.глТекПользователь.Наименование);
				 Операция.Количество   = ПреобразоватьКоординаты(горизонталь-2,вертикаль-2,1,1);
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "4024";//"4024"; 			//поле Транспорт:
				 Операция.Наименование = Строка(ПараметрыСеанса.глТекПользователь.Наименование);
				 Операция.Количество   = ПреобразоватьКоординаты(горизонталь -1 ,вертикаль-1,1,1);
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "4023"; //кнопка крестик
				 Операция.Наименование = "Отмена";
				 Операция.Количество   = ПреобразоватьКоординаты(Горизонталь-65,вертикаль-50,60,21);
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = Формат(65536*1+4013,"ЧН=; ЧГ=0");//"4013"; 			//невидимая кнопка крестик
				 Операция.Наименование = "Отмена";
				 Операция.Количество   = ПреобразоватьКоординаты(Горизонталь-1,вертикаль-1,1,1);
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "4501"; 			//кнопка крестик невидимая возвращает в скан код выбранного товара
				 Операция.Наименование = "Далее";
				 Операция.Количество   = ПреобразоватьКоординаты(3,вертикаль-50,60,21);
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 
				 //НачатьЗакрывВсеКроме(Перечисления.ВидыСкладскихОпераций.ПодборТовара);
				 Если считатьРег("АдресИнвентаризации") <> НЕопределено Тогда 
					 РазблокироватьАдрес(считатьРег("АдресИнвентаризации"));
					 УдалитьРег("АдресИнвентаризации");
				 КонецЕсли;
				 
				 
				 
			 КонецЕсли;
			 Если Наименование = "Инвентаризация Форма перемещения товара" Тогда
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "0";//Основное окно
				 Адрес = СчитатьРег("Адрес");
				 Операция.Наименование = "Проверка товара по адресам";
				 Операция.Количество   = ПреобразоватьКоординаты(0,0,0,0);//font size
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 
				 
				 Товар =  СчитатьРег("ВыбТовар");
				 ВыбТовар = "";
				 Попытка ВыбТовар = "("+Товар.Код+") "+Строка(Товар); Исключение КонецПопытки;
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 //Операция.Код          = "4012";//"4012"; //надпись СТ: //убираем ее за экран и делаем невидимой
				 //Операция.Наименование = " ";
				 //Операция.Количество   = ПреобразоватьКоординаты(Горизонталь-1,вертикаль-1,1,1);
				 //ВходныеДанные.Номенклатура.Добавить(Операция);
				 ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные," ",4011,0,0,1,1,Ложь);
				 //ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,ВыбТовар,4500,0,вертикаль-120,0,62,Истина);
				 ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,ВыбТовар,4012,0,0,1,1,Ложь);
				 ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,ВыбТовар,4014,0,вертикаль-120,0,62,Истина);
				 //4012
				 //				Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 //				Операция.Код          = "4011";
				 //				Операция.Наименование = ВыбТовар;
				 //				Операция.Количество   = ПреобразоватьКоординаты(0,вертикаль-120,0,62);
				 //				ВходныеДанные.Номенклатура.Добавить(Операция);
				 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "4024";//"4024"; //поле Транспорт:
				 Операция.Наименование = Строка(СчитатьРег("Адрес"))+" "; //чтоб небыло квадратиков на экране при пустом адресе
				 Операция.Количество   = ПреобразоватьКоординаты(3,вертикаль-50,62,21);
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "4023";//"4023"; //кнопка крестик видимая Сложно управляемая поэтому делаем ее невидимой
				 Операция.Наименование = "Отмена";
				 Операция.Количество   = ПреобразоватьКоординаты(Горизонталь-1,вертикаль-1,1,1);
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 //Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 //Операция.Код          = Формат(65536*2+4012,"ЧН=; ЧГ=0");//"4012"; //надпись СТ: //убираем ее за экран и делаем невидимой
				 //Операция.Наименование = Строка(ПараметрыСеанса.глТекПользователь.Наименование);
				 //Операция.Количество   = ПреобразоватьКоординаты(Горизонталь,вертикаль,0,1);
				 //ВходныеДанные.Номенклатура.Добавить(Операция);
				 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = Формат(65536*1+4023,"ЧН=; ЧГ=0");//"4023"; //кнопка крестик видимая Сложно управляемая поэтому делаем ее невидимой
				 Операция.Наименование = "Отмена";
				 Операция.Количество   = ПреобразоватьКоординаты(Горизонталь-1,вертикаль-1,1,1);
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "4013"; 			//невидимая кнопка крестик возвращает в скан имя кнопки и количество 0
				 Операция.Наименование = "Завершить";
				 Операция.Количество   = ПреобразоватьКоординаты(Горизонталь-65,вертикаль-50,62,21);
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 
				 //Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 //Операция.Код          = "4501"; //кнопка крестик невидимая возвращает в скан код выбранного товара
				 //Операция.Наименование = "Далее";
				 //Операция.Количество   = ПреобразоватьКоординаты(3,вертикаль-50,60,21);
				 //ВходныеДанные.Номенклатура.Добавить(Операция);
				 
				 //НачатьЗакрывВсеКроме(Перечисления.ВидыСкладскихОпераций.ПодборТовара);
				 Если считатьРег("АдресИнвентаризации") <> НЕопределено Тогда 
					 РазблокироватьАдрес(считатьРег("АдресИнвентаризации"));
					 УдалитьРег("АдресИнвентаризации");
				 КонецЕсли;
				 
				 
				 
			 КонецЕсли;
			 Если Наименование = "ОсновноеОкно" Тогда
				 ПереместитьВДинамическуюЯчейку();
				 УдалитьРег("ВремяНачалаЗадания");
				 ЗакрытьВсеКроме(Перечисления.ВидыСкладскихОпераций.НачалоРаботы);
				 выборкаПодбора = ПолучитьКлиентаМоеЗадание(ПараметрыСеанса.глТекПользователь);
				 //УжеЕстьРазгрузкаПогрузка = Ложь;    
				 //"1." - такое начало позволяет нажатием на клавишу "1" тсд начать выбранную операцию
				 //с 13 11 12  версия 65 на ТСД операции запускаются по названию на кнопке ... так что если тут переделать название на кнопке нужно подправить в коде на тсд
				 //if ((wcscmp(code, L"Выход") == 0) || (wcscmp(tovar, L"Выход") == 0) || (wcscmp(tovar, L"X") == 0))
				 //if (wcscmp(code, L"Поиск товара") == 0)
				 //if ((wcscmp(code, L"Получить задание на подбор товара") == 0)||(wcscmp(code, L"Подбор") == 0))
				 //if (wcscmp(code, L"Подтоварка") == 0)
				 //if (wcscmp(code, L"Разгрузка\r\nПогрузка") == 0)//Форма Доп меню выбора 3 ех операций
				 //if (wcscmp(code, L"Разгрузка") == 0) 1  меню
				 //if (wcscmp(code, L"Погрузка") == 0)  2  меню
				 //if ((wcscmp(code, L"Задания на\r\nпроверку") == 0)||(wcscmp(code, L"Проверка") == 0)) 3 меню
				 //if ((wcscmp(code, L"Инвента-\r\n-ризация") == 0) || (wcscmp(code, L"Инвентаризация") == 0))
				 //if ((wcscmp(code, L"Переместить") == 0) || (wcscmp(code, L"Переместить товар (с полки на полку)") == 0) || (wcscmp(code, L"Перемещение") == 0) || (wcscmp(code, L"Движение товара по складу") == 0))
				 //if ((wcscmp(code, L"Размещение") == 0) || (wcscmp(code, L"Разместить товар (с Т зоны на полку)") == 0) || (wcscmp(code, L"Разместить") == 0))
				 Подтоварка = ЕстьЗаданияДефрагментации(Неопределено);
				 Проверка = ЕстьЗаданияИнвентаризацииНаМеня() или ЕстьЗаданияИнвентаризацииНевзятые();
				 //запрос на наличие заданий по дефрагментации и Если они есть то кнопку энаблить
				 //ЗаписатьРег("Дефрагментация",ЕстьЗаданияДефрагментации(Неопределено));
				 Если выборкаПодбора.Следующий() Тогда
					 сз.Добавить(1,"Подбор "+Строка(выборкаПодбора.Клиент),Истина);
				 Иначе
					 сз.Добавить(1,"Получить задание на подбор товара",Истина);
				 КонецЕсли;
				 
				 сз.Добавить(2,"Разместить товар (с Т зоны на полку)",Истина);
				 сз.Добавить(4001,"Инвента-"+Символы.ВК+Символы.ПС+"-ризация",Истина);
				 сз.Добавить(4002,"Переместить товар (с полки на полку)",Истина);
				 сз.Добавить(4003,"Подтоварка",Подтоварка);
				 сз.Добавить(4013,"Разгрузка",Истина);
				 сз.Добавить(4004,"Задания на"+Символы.ВК+Символы.ПС+"проверку",Проверка);
				 сз.Добавить(4014,"Погрузка",МоиФилиалыНаПогрузку().Следующий());
				 сз.Добавить(4005,"Поиск товара",Истина);
				 сз.Добавить(4006,"Выход",Истина);
				 н = 0;
				 Если ЕстьСеанс тогда
					 НаименованиеОперации = ТаблицаВосстановленияСеанса.Получить(0).Операция;
					 КодЭлемента = ?(Найти(НаименованиеОперации,"Инвентаризация")>0,4001,?(Найти(НаименованиеОперации,"Переместить")>0,4002,2));
					 Элемент = сз.НайтиПоЗначению(КодЭлемента);
					 Если не Элемент = Неопределено Тогда
						 Элемент.Представление = НаименованиеОперации;
					 КонецЕсли;
				 КонецЕсли;
				 
				 
				 для у = 0 по 4 цикл
					 для х = 0 по 1 цикл
						 размерУ = Цел(вертикаль/4-7);
						 размерХ = Цел(горизонталь/2-7);
						 размерУ = ?(у>1,размерУ/2,размерУ);
						 ПоложениеУ = (?(у>1,у*вертикаль/8+вертикаль/4,2+у*вертикаль/4));
						 //Если н = 10 Тогда н = 0; КонецЕсли;
						 ВходныеДанные = РазместитьКнопкуТСД(ВходныеДанные,Формат(?(н=9,0,н+1),"ЧЦ=1; ЧДЦ=0; ЧН=; ЧГ=0; ЧО=0")+"."+сз.получить(н).Представление,сз.получить(н).Значение,(2+х*горизонталь/2),ПоложениеУ,размерХ,размерУ,сз.получить(н).Пометка);
						 //Если НЕ сз.получить(н).Пометка Тогда ВходныеДанные = ШрифтЭлементаТСД(ВходныеДанные,сз.получить(н).Значение,7,10,0,40); КонецЕсли;
						 
						 н = н + 1;
					 КонецЦикла;
				 КонецЦикла;
				 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "4011";
				 Операция.Наименование = Строка(ПараметрыСеанса.глТекПользователь.Наименование);
				 Операция.Количество   = ПреобразоватьКоординаты(0,(2+3*вертикаль/4)+размерУ,0,размерУ);
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 //ДобавитьСтроку(ВходныеДанные,"BM_CLICK","---",4001);
				 
				 //Если Впервые и ложь Тогда 
				 
				 
				 
				 //ДобавитьСтроку(
				 //КонецЕсли;
				 //ТекущиеМилисекунды = ТекущаяДатаМилисекунды() - ТекущиеМилисекунды;
				 //ЗаписатьЗначения("ПерерисовкаОсновногоОкна",ТекущаяДатаМилисекунды() - ТекущиеМилисекунды,НомерПакета ,Истина);
				 СтарыйСТ = СчитатьРег("ДинамическаяЯчейка");
				 УдалитьРег(Строка(СтарыйСТ));
			 КонецЕсли;
			 Если  СканированиеАдреса = Ложь тогда
				 УдалитьРег("ИнформацияПоТовару");
			 КонецЕсли;
			 
			 
			 Возврат ВходныеДанные;
		 КонецЕсли;
		 //-----------------------------------------------------------------------------------------------------------	
		 Если ВидОперации = "СписокПользователейИБД" Тогда
			 
			 Запрос = Новый Запрос;
			 Запрос.Текст = 
			 "ВЫБРАТЬ
			 |	Пользователи.Логин КАК Наименование,
			 |	Пользователи.Код
			 |ИЗ
			 |	Справочник.Пользователи КАК Пользователи
			 |ГДЕ
			 |	(НЕ Пользователи.ПометкаУдаления)";
			 Результат = Запрос.Выполнить();
			 ВыборкаДетальныеЗаписи = Результат.Выбрать();
			 пока ВыборкаДетальныеЗаписи.Следующий() цикл
				 //Если не ПустаяСтрока(ВыборкаДетальныеЗаписи.Наименование) Тогда
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = ВыборкаДетальныеЗаписи.Код;
				 Операция.Наименование = ВыборкаДетальныеЗаписи.Наименование;
				 Операция.Количество   = ВыборкаДетальныеЗаписи.Количество();
				 ВходныеДанные.Номенклатура.Добавить(Операция);
			 КонецЦикла;
			 //Возврат ВходныеДанные;
		 КонецЕсли;
		 //-------------------------------------------------------------------------------------------------		
		 Если ВидОперации = "СписокПользователей" Тогда
			 логины = ПолучитьСписокЛогинов();
			 для каждого логин из логины Цикл
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = логин;
				 Операция.Наименование = логин;
				 Операция.Количество   = логины.Количество();
				 ВходныеДанные.Номенклатура.Добавить(Операция);
			 КонецЦикла;
		 КонецЕсли;
		 //--------------------------------------------Задания--------------------------------------------	
		 Если ВидОперации = "Информация" Тогда
			 Наименование =	 Список.Номенклатура.Получить(0).Наименование;
			 Код  		 = 	 Список.Номенклатура.Получить(0).Код;
			 Количество	 = 	 Список.Номенклатура.Получить(0).Количество;
			 НачатьЗакрывВсеКроме(Перечисления.ВидыСкладскихОпераций.ГрязноеВремя);
			 РазмещениеДоступно = Ложь;
			 Ответ = Строка(СканИнформацияОбщий(РазмещениеДоступно,Код));
			 //ИзменитьТекстИВидимость(ВходныеДанные,4002,СокрЛП(Код),Истина,Истина,Истина);
			 ИзменитьТекстИВидимость(ВходныеДанные,4001,Ответ,Истина,Истина,Ложь);
			 ИзменитьТекстИВидимость(ВходныеДанные,4013,"Разместить",РазмещениеДоступно,Истина,Ложь);
			 ИзменитьТекстИВидимость(ВходныеДанные,4002,СокрЛП(Код),Истина,Истина,Истина);
			 //ДобавитьСтроку(ВходныеДанные, "Информация",Ответ,0);
		 КонецЕсли;
		 //----------------------------------------------------------------------------------------------------перегрузитьрег();		
		 Если ВидОперации = "ОтменаЗадания" Тогда
			 текущаяСтраница = читатьрег("текущаяСтраница",0);
			 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
			 
			 Если ТекущаяСтраница = 35 Тогда 
				 Ответ = ЗавершитьМоиЗаданияДефрагментации(ПараметрыСеанса.глТекПользователь);
				 заданияСобрано = ПолучитьМоеЗаданиеДефрагментацияСобрано(ПараметрыСеанса.глТекПользователь); 
				 задания = ПолучитьМоеЗаданиеДефрагментация(ПараметрыСеанса.глТекПользователь); 
				 ТекущаяСтраница = 0;
				 Если Ответ = "НетЗаписей" Тогда 
					 ТекущаяСтраница = 0;
				 ИначеЕсли пустаяСтрока(Ответ) Тогда
					 ТекущаяСтраница = ?(задания.Следующий(),30,0);
				 Иначе
					 Операция.Код          = "Error";
					 Операция.Наименование = Ответ;
					 Операция.Количество   = 0;
					 ВходныеДанные.Номенклатура.Добавить(Операция);
					 Возврат ВходныеДанные;
				 КонецЕсли;
				 Удалитьрег("Адрес");
			 ИначеЕсли ТекущаяСтраница = 30 Тогда 
				 ЗавершитьМоиЗаданияДефрагментации(ПараметрыСеанса.глТекПользователь);
				 заданияСобрано = ПолучитьМоеЗаданиеДефрагментацияСобрано(ПараметрыСеанса.глТекПользователь); 
				 ТекущаяСтраница = ?(заданияСобрано.Следующий(),35,0);
				 Удалитьрег("Адрес");
			 ИначеЕсли ТекущаяСтраница > 400 Тогда
				 
				 ТекущаяСтраница = 4;
				 
			 ИначеЕсли ТекущаяСтраница > 500 Тогда
				 
				 ТекущаяСтраница = 4;
				 
			 Иначе 
				 ТекущаяСтраница = 0;
			 КонецЕсли;
			 ЗаписатьРег("текущаяСтраница",ТекущаяСтраница);
			 Операция.Код          = "-";
			 Операция.Наименование = "-";
			 Операция.Количество   = 0;//фил.Количество+65535*фил.Объем;
			 ВходныеДанные.Номенклатура.Добавить(Операция);
			 ЗакрытьВсеКроме(Неопределено);
		 КонецЕсли;
		 //----------------		
		 Если ВидОперации = "ЗаданияНаФилиалы" Тогда
			 ЗаданияФилиалы = ПолучитьСписокЗаданий();
			 ТекущиеМилисекунды = ТекущаяДатаМилисекунды();
			 ОсвободитьДинамическуюЯчейку();
			 Если не ЗначениеЗаполнено(ЗаданияФилиалы) Тогда 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "Ошибка";
				 Операция.Наименование = "Нет заданий"; 
				 //ЗаписатьРег(Строка(фил.Требуется)+Строка(фил.Филиал),ЗаданияФилиалы.Кличество());
				 Операция.Количество   = 4;
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 ЗаписатьРег("текущаяСтраница",4);
			 Иначе
				 для каждого фил из ЗаданияФилиалы Цикл
					 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
					 Операция.Код          = Строка(фил.Филиал.УникальныйИдентификатор());
					 Операция.Наименование = СокрЛП(Строка(фил.Филиал)); 
					 //ЗаписатьРег(Строка(фил.Требуется)+Строка(фил.Филиал),ЗаданияФилиалы.Кличество());
					 Операция.Количество   = Цел(65536*Цел(фил.Объем)+фил.Требуется);
					 ВходныеДанные.Номенклатура.Добавить(Операция);
				 КонецЦикла;
				 НачатьЗакрывВсеКроме(Перечисления.ВидыСкладскихОпераций.ВыборФилиалаЗадания);
				 
				 РегистрыСведений.УчетВремениРабот.ЗаписьНачалаОперации(Перечисления.ВидыСкладскихОпераций.ГрязноеВремя);
			 КонецЕсли;
		 КонецЕсли;
		 //----------------				
		 Если ВидОперации = "ЗаданияНаРяды" Тогда
			 ЗаписатьРег(ВидОперации,Наименование+":"+Код+":"+Строка(Количество));
			 Если Код = "Дефрагментация Выбор задания" Тогда
				 ряды = ПолучитьРядыДефрагментации();
				 //ЗаписатьЗначения("ПолучитьРядыДефрагментации",ТекущаяДатаМилисекунды() - ТекущиеМилисекунды,НомерПакета ,Истина);
				 ТекущиеМилисекунды = ТекущаяДатаМилисекунды();
				 
			 Иначе
				 ряды = ПолучитьРяды(СчитатьРег("Клиент"));
				 ЗаписатьЗначения("ПолучитьРяды",ТекущаяДатаМилисекунды() - ТекущиеМилисекунды,НомерПакета ,Истина);
				 ТекущиеМилисекунды = ТекущаяДатаМилисекунды();
				 
			 КонецЕсли;
			 для каждого стр из ряды.Строки Цикл
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = Формат(стр.Объем,"ЧЦ=3; ЧДЦ=1; ЧРД=.; ЧН=; ЧГ=0");//Объем с запятыми
				 Операция.Наименование = стр.Секция;
				 Операция.Количество   = стр.Требуется;
				 ВходныеДанные.Номенклатура.Добавить(Операция);
			 КонецЦикла;
			 
		 КонецЕсли;
		 //-----------------=------------------------------------				
		 Если ВидОперации = "ЗаданияНаСекции" Тогда
			 ЗаписатьРег(ВидОперации,Наименование+":"+Код+":"+Строка(Количество));
			 УдалитьРег("Адрес");
			 Если Код = "Дефрагментация Выбор задания" Тогда
				 ряды = ПолучитьСекцииДефрагментации(СчитатьРег("Ряд"));
				 ЗаписатьЗначения("ПолучитьСекцииДефрагментации",ТекущаяДатаМилисекунды() - ТекущиеМилисекунды,НомерПакета ,Истина);
				 ТекущиеМилисекунды = ТекущаяДатаМилисекунды();
				 
			 Иначе
				 
				 ряды = ПолучитьСекции(СчитатьРег("Клиент"),СчитатьРег("Ряд"));
				 //ЗаписатьЗначения("ПолучитьСекции",ТекущаяДатаМилисекунды() - ТекущиеМилисекунды,НомерПакета ,Истина);
				 //ТекущиеМилисекунды = ТекущаяДатаМилисекунды();
				 
			 КонецЕсли;
			 для каждого стр из ряды.Строки Цикл
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = Формат(стр.Объем,"ЧЦ=3; ЧДЦ=1; ЧРД=.; ЧН=; ЧГ=0");
				 Операция.Наименование = стр.Секция;
				 Операция.Количество   = стр.Требуется;
				 ВходныеДанные.Номенклатура.Добавить(Операция);
			 КонецЦикла;
			 
		 КонецЕсли;
		 //-------------------------------------------				
		 Если ВидОперации = "ЗаданияНаПолки" Тогда
			 Наименование =	 Список.Номенклатура.Получить(0).Наименование;
			 Код  		 = 	 Список.Номенклатура.Получить(0).Код;
			 Количество	 = 	 Список.Номенклатура.Получить(0).Количество;
			 ЗаписатьРег("ЗаданияНаПолки",Наименование+":"+Код+":"+Строка(Количество));
			 
			 задания = ПолучитьАдресаИзСекции(СчитатьРег("Клиент"),СчитатьРег("Секция"));
			 //задания = ПолучитьМоеЗадание(СчитатьРег("Клиент"),ПараметрыСеанса.глТекПользователь); 
			 пока задания.Следующий() Цикл
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "-";
				 Операция.Наименование = задания.Адрес;
				 Операция.Количество   = задания.Количество; //задания.Количество;
				 ВходныеДанные.Номенклатура.Добавить(Операция);
			 КонецЦикла;
			 //ЗаписатьЗначения("ПолучитьМоеЗаданиеНаПолки",ТекущаяДатаМилисекунды() - ТекущиеМилисекунды,НомерПакета ,Истина);
			 //ТекущиеМилисекунды = ТекущаяДатаМилисекунды();
			 
		 КонецЕсли;
		 //------------------------------------------------------------------------------------------------------===========				
		 Если ВидОперации = "ОтветНаВопрос" Тогда
			 Ответ = Список.Номенклатура.Получить(0).Код;
			 Записатьрег("ОтветНаВопрос",Ответ);
		 КонецЕсли;
		 
		 Если ВидОперации = "ТоварыПоЗаданию" Тогда
			 ЗаписатьРег(ВидОперации,Наименование+":"+Код+":"+Строка(Количество));
			 //			ЗаписатьРег("ВыборЗадания",Наименование+":"+Код+":"+Строка(Количество));
			 ТекущаяСтраница = СчитатьРег("текущаяСтраница");
			 Адрес = СчитатьРег("Адрес");
			 Если ТекущаяСтраница = 335 Тогда	//2 страница заданий на проверку
				 //задания = МоиЗаданияНаПроверку(); //вариант когда адреса не отображаются первоначально
				 задания = МоиАдресаНаПроверку();
			 ИначеЕсли ТекущаяСтраница = 442 Тогда //Выбор филиала погрузки
				 задания = ПолучитьДеревоЭкспедиторовЗаПоследнийМесяц();
				 
			 ИначеЕсли ТекущаяСтраница = 435 Тогда //Выбор филиала погрузки
				 
				 задания = МоиФилиалыНаПогрузку();
			 ИначеЕсли ТекущаяСтраница = 330 Тогда //1 страница заданий на проверку , выбор товара
				 задания = ПолучитьНевзятыеЗаданияНаПроверку();
			 ИначеЕсли ТекущаяСтраница = 35 Тогда //2 страница перемещения из заданий по дефрагментации
				 задания = ПолучитьМоеЗаданиеДефрагментацияСобрано(ПараметрыСеанса.глТекПользователь)
			 ИначеЕсли ТекущаяСтраница = 30 Тогда //1 страница подбора товара для дефрагментации
				 задания = ПолучитьМоеЗаданиеДефрагментация(ПараметрыСеанса.глТекПользователь); 
			 Иначе           					//форма подбора товара
				 задания = ПолучитьМоеЗадание(СчитатьРег("Клиент"),ПараметрыСеанса.глТекПользователь); 
				 Если задания.Количество()=0 тогда
					 ДобавитьСтроку(ВходныеДанные,"Выйти","0",ТекущаяСтраница);
					 Возврат ВходныеДанные;
				 КонецЕсли;
				 
			 КонецЕсли;
			 //задания.Следующий();
			 лпарам =  1;
			 ДеревоЗаданийТСД = Новый ТаблицаЗначений;
			 ДеревоЗаданийТСД.Колонки.Добавить("Адрес");
			 ДеревоЗаданийТСД.Колонки.Добавить("Товар");
			 ДеревоЗаданийТСД.Колонки.Добавить("Параметр");
			 //ПутьПоАдресам = читатьрег("ПутьПоАдресам",ПутьПоАдресам);
			 Пока задания.Следующий() Цикл
				 родитель = ДеревоЗаданийТСД.Добавить();
				 родитель.Адрес = задания.Адрес;
				 родитель.Параметр = лпарам;
				 родитель.Товар = Справочники.Номенклатура.ПустаяСсылка();
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "Адрес";
				 Операция.Наименование = Строка(задания.Адрес);
				 Операция.Количество   = лпарам; //задания.Количество;
				 Если ТекущаяСтраница = 435 Тогда
					 Операция.Наименование = ?(ТипЗнч(задания.Адрес) = Тип("Строка"),задания.Адрес,"+"+ Формат(задания.Адрес,"ДФ=HH:mm"));
					 родитель.Параметр = Операция.Наименование;
				 КонецЕсли;
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 Если задания.Адрес = Адрес Тогда 
					 //раскрываем ветку с выбранным адресом Если он уже выбран причем раскрытие делаю путем Показать(последний элемент ветки)
					 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
					 Операция.Код          = "Раскрыть";
					 Операция.Наименование = задания.Адрес;
					 Операция.Количество   = лпарам;
					 ВходныеДанные.Номенклатура.Добавить(Операция);
					 //ЗаписатьРег("Раскрытьнач",Адрес);
				 КонецЕсли;
				 лпарам = лпарам +1;
				 стр = задания.Выбрать();
				 кодТовара = "";
				 Пока стр.Следующий() Цикл
					 Если не ТекущаяСтраница = 335 ТОгда ЗаписатьРег("ВыбТовар",стр.Товар); КонецЕсли;
					 Попытка 
						 кодТовара = Строка(стр.Товар.Код);
					 Исключение
						 Попытка
							 кодТовара = Строка(стр.Код);
						 Исключение
						 КонецПопытки;
					 КонецПопытки;
					 
					 Если ТекущаяСтраница = 335 и стр.Количество = 0 Тогда Продолжить; КонецЕсли;
					 //для каждого стр из фил.Строки Цикл
					 родитель = ДеревоЗаданийТСД.Добавить();
					 родитель.Адрес = задания.Адрес;
					 родитель.Параметр = лпарам;
					 родитель.Товар = стр.Товар;
					 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры);
					 Операция.Код          = кодТовара;
					 ккк =  Формат(стр.Количество,"ЧДЦ=0; ЧН=; ЧГ=0");
					 Если ТекущаяСтраница = 330 Тогда
						 Операция.Наименование = "("+ккк+") "+стр.Товар.Наименование+" ("+стр.Товар.Код+")";	
					 ИначеЕсли ТекущаяСтраница = 335 Тогда
						 попытка Операция.Наименование = "("+ккк+") "+стр.Товар.Наименование+" ("+стр.Товар.Код+")"; Исключение Операция.Наименование = " "; КонецПопытки;
					 ИначеЕсли ТекущаяСтраница = 442 Тогда
						 Операция.Наименование = Строка(стр.Товар);
						 Операция.Код          = ВычленитьЦифрыИзНомераМашины(Строка(стр.Товар));
						 
						 
						 
					 ИначеЕсли ТекущаяСтраница = 435 Тогда
						 ккк =  Формат(стр.Количество,"ЧДЦ=1; ЧН=; ЧГ=0");
						 попытка 
							 Операция.Наименование =  стр.Товар.Наименование;//"("+ккк+" куб) "+
							 Операция.Код          = Формат(лпарам,"ЧЦ=5; ЧН=; ЧВН=; ЧГ=0");//XMLСтрока(стр.Товар);
						 Исключение
							 Операция.Наименование = " ";
						 КонецПопытки;
						 
					 Иначе
						 Операция.Наименование = "("+ккк+"/"+ккк+") "+стр.Товар.Наименование+" ("+стр.Товар.Код+")";
					 КонецЕсли;
					 //Операция.Количество   = стр.Количество;
					 Операция.Количество   = лпарам; //задания.Количество;
					 лпарам = лпарам +1;
					 ВходныеДанные.Номенклатура.Добавить(Операция);
					 //Если не стр.Код = null Тогда
					 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры);
					 Операция.Код          = "Артикул";
					 Операция.Наименование = кодТовара;
					 Операция.Количество   = 0;
					 
					 Если ТекущаяСтраница = 435 Тогда
						 //Попытка
						 //	Операция.Наименование = XMLСтрока(стр.Товар);
						 //Исключение
						 //КонецПопытки;
						 Продолжить;
						 
					 иначе
						 Попытка
							 Операция.Наименование = Строка(стр.Код);
						 Исключение
						 КонецПопытки;
					 КонецЕсли;
					 Попытка
						 Операция.Количество   = стр.Количество;
					 Исключение
					 КонецПопытки;
					 Если не ТекущаяСтраница = 442 Тогда
						 ВходныеДанные.Номенклатура.Добавить(Операция);
					 КонецЕсли;
					 
				 КонецЦикла;
				 Если задания.Адрес = Адрес Тогда 
					 //раскрываем ветку с выбранным адресом Если он уже выбран причем раскрытие делаю путем Показать(последний элемент ветки)
					 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
					 Операция.Код          = "Раскрыть";
					 Операция.Наименование = кодТовара;//Адрес;
					 Операция.Количество   = лпарам-1;
					 ВходныеДанные.Номенклатура.Добавить(Операция);
					 //ЗаписатьРег("Раскрыть",Адрес);
				 КонецЕсли;
			 КонецЦикла;
			 //заполняем поле Филиал 
			 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
			 Операция.Код          = "Филиал";
			 Если ТекущаяСтраница = 335 Тогда 
				 
				 Операция.Наименование = Строка(СчитатьРег("ВыбТовар"));
				 Если ПустаяСтрока(Операция.Наименование) ТОгда
					 Операция.Наименование = Строка(СчитатьРег("Клиент"));
				 КонецЕсли;
			 ИначеЕсли ТекущаяСтраница = 35 Тогда 
				 Операция.Наименование = "Переместить в "+СчитатьРег("Секция");
			 ИначеЕсли ТекущаяСтраница = 30 Тогда 
				 Операция.Наименование = "Подтоварка "+СчитатьРег("Секция");
			 Иначе
				 Операция.Наименование = Строка(СчитатьРег("Клиент"));
			 КонецЕсли;
			 ЗаписатьРег("УстШапка",Операция.Наименование);
			 Операция.Количество   = 0;
			 Если не ТекущаяСтраница = 335 Тогда 
				 ВходныеДанные.Номенклатура.Добавить(Операция); 
			 КонецЕсли;
			 //заполняем поле транспорт 
			 ДинамическаяЯчейка = СчитатьРег("ДинамическаяЯчейка");
			 Если ТекущаяСтраница = 335 Тогда
				 Адрес = СчитатьРег("Адрес");
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "Транспорт";
				 Операция.Наименование = ?(ЗначениеЗаполнено(Адрес),Строка(Адрес)," ");
				 Операция.Количество   = 0;
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 ЗаписатьРег("ТранспортУстановлен",Операция.Наименование);
			 ИначеЕсли ЭтоДинамическаяЯчейка(ДинамическаяЯчейка)  Тогда 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "Транспорт";
				 Операция.Наименование = Строка(ДинамическаяЯчейка);
				 Операция.Количество   = 0;
				 ВходныеДанные.Номенклатура.Добавить(Операция);
			 КонецЕсли;
			 ЗаписатьРег("ДеревоЗаданийТСД",ДеревоЗаданийТСД);
			 ЗаписатьЗначения("Построение дерева товаров страница: "+строка(ТекущаяСтраница),ТекущаяДатаМилисекунды() - ТекущиеМилисекунды,НомерПакета ,Истина);
			 //УдалитьРег("ВыбТовар");
		 КонецЕсли;
		 //----------------				
		 Если ВидОперации = "ВыборЗадания" Тогда
			 филиал = справочники.Контрагенты.ПустаяСсылка();
			 Наименование =	 СокрЛП(Список.Номенклатура.Получить(0).Наименование);
			 Код  		 = 	 СокрЛП(Список.Номенклатура.Получить(0).Код);
			 текущаяСтраница	 = 	 Список.Номенклатура.Получить(0).Количество;
			 ЗаписатьРег("опВыборЗадания",Наименование+" код="+Код+" кол="+Строка(текущаяСтраница));
			 сканнастранице = СчитатьРег("текущаяСтраница");
			 ДинамическаяЯчейка = СчитатьРег("ДинамическаяЯчейка");
			 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
			 Если текущаяСтраница = 1000 Тогда //1000 тсд посылает в случае скана на первой кнопке операций
				 
				 Операция.Код          = "Error";
				 Операция.Наименование = ?(СчитатьРег("Клиент")=Неопределено,"Выберите Филиал",?(СчитатьРег("Ряд")=неопределено,"выберите ряд","Нужно считать адрес !"));
				 Операция.Количество   = 3;   //заранее создаем ошибку чтоб ее выдало на экран в случае ошибки :)
				 //проверяем что отсканирован только адрес полки и ничто иное
				 Если Код = "ОтменаЗадания" ТОгда
					 Операция.Код          = "-";
					 Операция.Наименование = Код;
					 Операция.Количество   = 4;
					 ЗаписатьРег("текущаяСтраница",4); //пока выкидывем в главное меню 
					 ОсвободитьДинамическуюЯчейку();
					 ВходныеДанные.Номенклатура.Добавить(Операция);
					 возврат ВходныеДанные;
				 КонецЕсли;
				 скан = ПрочитатьШтрихКод(Код);
				 Если сканнастранице = 2 Тогда
					 Операция.Код          = "Error";
					 Операция.Наименование = "Необходимо сканировать Транспортное средство из зоны ""Т""";
					 Операция.Количество   = 0;
					 Если  скан.ТипДанных = 7 Тогда
						 Запрос = Новый Запрос;
						 Запрос.Текст = 
						 "ВЫБРАТЬ РАЗРЕШЕННЫЕ
						 |	СкладскойТранспортОстатки.СкладскойТранспорт
						 |ИЗ
						 |	РегистрНакопления.Счет_41_Адресный.Остатки КАК Счет_41_АдресныйОстатки
						 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СкладскойТранспорт.Остатки КАК СкладскойТранспортОстатки
						 |		ПО Счет_41_АдресныйОстатки.Номенклатура = СкладскойТранспортОстатки.Номенклатура
						 |ГДЕ
						 |	Счет_41_АдресныйОстатки.Адрес = ""Т00-00-0""
						 |	И СкладскойТранспортОстатки.СкладскойТранспорт ПОДОБНО &СкладскойТранспорт
						 |	И СкладскойТранспортОстатки.КоличествоОстаток > 0";
						 
						 
						 Запрос.УстановитьПараметр("СкладскойТранспорт", "%"+скан.Данные);
						 Результат = Запрос.Выполнить();
						 ВыборкаДетальныеЗаписи = Результат.Выбрать();
						 Если  ВыборкаДетальныеЗаписи.Следующий() Тогда
							 Операция.Код          = "-";
							 Операция.Наименование = "-";
							 ЗаписатьРег("ТранспортРазгрузка",скан.Данные);
							 ЗаписатьРег("ВремяНачалаЗадания",ТекущаяДатаСервер());

						 иначе	
							 Операция.Наименование = "В данном транспорте нет остатков товара";
						 КонецЕсли;
						 
					 КонецЕсли;
					 ВходныеДанные.Номенклатура.Добавить(Операция);
					 возврат ВходныеДанные;
				 КонецЕсли;
				 
				 Если сканнастранице = 10 Тогда 
					 Операция.Код          = "Error";
					 Операция.Наименование = "Необходимо сканировать"+Символы.ПС+Символы.ВК+"любой адрес ряда";
					 Операция.Количество   = 0;
					 Если  скан.ТипДанных = 4 Тогда
						 считаннаясекция = лев(скан.Данные,3);
						 //НЕобходимо проверить есть ли задания дефраг на сканированный ряд
						 //Если проверитьРядДефрагментации(считаннаясекция) Тогда 
						 Записатьрег("Ряд",считаннаясекция);
						 ЗаписатьРег("текущаяСтраница",20);
						 Операция.Код          = "-";
						 Операция.Наименование = считаннаясекция;
						 Операция.Количество   = 0;
						 ВходныеДанные.Номенклатура.Добавить(Операция);
						 ЗаписатьЗначения("Выбор задания скан",ТекущаяДатаМилисекунды() - ТекущиеМилисекунды,НомерПакета ,Истина);
						 возврат ВходныеДанные;
						 //КонецЕсли;
					 КонецЕсли;
				 КонецЕсли;
				 
				 Если сканнастранице = 20 Тогда 
					 Операция.Код          = "Error";
					 Операция.Наименование = "Необходимо сканировать"+Символы.ПС+Символы.ВК+"любой адрес ряда";
					 Операция.Количество   = 0;
					 Если  скан.ТипДанных = 4 Тогда
						 считаннаясекция = лев(скан.Данные,6);
						 //НЕобходимо проверить есть ли задания дефраг на сканированный ряд
						 Если ПроверитьСекциюДляДефрагментации(СчитатьРег("Ряд"),считаннаясекция) Тогда 
							 Записатьрег("Секция",считаннаясекция);
							 ЗаписьЗаданияВРегистрыДефрагментации(считаннаясекция);
							 ЗаписатьРег("текущаяСтраница",30);
							 Операция.Код          = "-";
							 Операция.Наименование = считаннаясекция;
							 Операция.Количество   = 30;
							 ВходныеДанные.Номенклатура.Добавить(Операция);
							 ЗаписатьЗначения("Выбор задания скан",ТекущаяДатаМилисекунды() - ТекущиеМилисекунды,НомерПакета ,Истина);
							 
							 возврат ВходныеДанные;
						 КонецЕсли;
					 КонецЕсли;
				 КонецЕсли;
				 
				 
				 Если сканнастранице = 6 Тогда
					 Операция.Код          = "Error";
					 Операция.Наименование = "Необходимо сканировать транспортное средство";
					 Операция.Количество   = 0;
					 ПроверитьДинамическуюЯчейку(скан);
					 
					 
					 Если скан.ТипДанных = 11 Тогда 
						 ДинамическаяЯчейка = скан.Данные;
						 Ответ = ПолучитьДинамическуюЯчейку(ДинамическаяЯчейка,СчитатьРег("Клиент"));	
						 Если не ПустаяСтрока(Ответ) ТОгда
							 
							 ЗаписатьРег("НетТС",Ответ);
							 Операция.Наименование =  Ответ;
							 ВходныеДанные.Номенклатура.Добавить(Операция);
							 Возврат      ВходныеДанные;
							 //Возврат Ответ;	
						 КонецЕсли;
						 Операция.Код          = "-";
						 Операция.Наименование = "Ок";
						 Операция.Количество   = 0;
						 
						 //ЗаписатьРег("ДинамическаяЯчейка",ДинамическаяЯчейка);
						 УдалитьРег("УжеТС");
						 Адрес = СчитатьРег("Адрес");
						 Если ПустаяСтрока(Адрес) Тогда 
							 ЗаписатьРег("текущаяСтраница",7);//устанавливаем страницу отображения на тсд 3
						 Иначе 				
							 ЗаписатьРег("текущаяСтраница",3);//устанавливаем страницу отображения на тсд 3
						 КонецЕсли;
						 
					 Иначе
						 ВходныеДанные.Номенклатура.Добавить(Операция);
						 //ЗаписатьЗначения("Выбор ТС",ТекущаяДатаМилисекунды() - ТекущиеМилисекунды,НомерПакета ,Истина);
						 Возврат      ВходныеДанные;
						 
					 КонецЕсли;
				 КонецЕсли;
				 Если скан.ТипДанных = 4 Тогда  //Адрес
					 
					 Если скан.Данные = "А01-01-1" Тогда 
						 Операция.Наименование = "Адрес А01-01-1 блокирован";
						 Операция.Количество   = 3;   //заранее создаем ошибку чтоб ее выдало на экран в случае ошибки :)
						 ВходныеДанные.Номенклатура.Добавить(Операция);
						 //ЗаписатьЗначения("Выбор А111",ТекущаяДатаМилисекунды() - ТекущиеМилисекунды,НомерПакета ,Истина);
						 
						 Возврат      ВходныеДанные;
						 
					 КонецЕсли;
					 
					 Если сканнастранице = 7 Тогда
						 Операция.Код          = "Error";
						 Операция.Наименование = "Необходимо сканировать полку из вашего задания (списка)";
						 Операция.Количество   = 3;   //заранее создаем ошибку чтоб ее выдало на экран в случае ошибки :)
						 Адрес = скан.Данные;
						 //ЗаписатьРег("дебагАдр",Адрес);
						 считаннаясекция = СчитатьРег("Секция");//заглушка и нужно зафиксировать задание
						 Если ЗначениеЗаполнено(считаннаясекция) Тогда 
							 адреса = ПолучитьАдресаИзСекции(СчитатьРег("Клиент"),считаннаясекция);
							 //адреса = ПолучитьМоеЗадание(СчитатьРег("Клиент"),ПараметрыСеанса.глТекПользователь); //возвращается выборка по иерархии
							 Если не адреса.НайтиСледующий(Новый Структура("Адрес",Адрес)) Тогда 
								 Операция.Код          = "Error";
								 Операция.Наименование = "В заданиях нет "+Символы.ВК+Символы.ПС+"считанного адреса"+Символы.ВК+Символы.ПС+Адрес;
								 Операция.Количество   = 0;
							 Иначе
								 Операция.Код          = "-";
								 Операция.Наименование = Адрес;
								 Операция.Количество   = 3;
								 ЗаписатьРег("Адрес",Адрес);
								 
								 
								 //считаннаясекция = СчитатьРег("Секция");//заглушка и нужно зафиксировать задание
								 //Если ЗначениеЗаполнено(считаннаясекция) Тогда 
								 Ответ = ЗаписатьЗаданиеВРегистр(считаннаясекция,СчитатьРег("Клиент")); // ТУТ ЗДЕСЯ именно ТУТА мы создаем задания на подбор в регистре
								 Если ПустаяСтрока(Ответ) Тогда ЗаписатьРег("текущаяСтраница",3); КонецЕсли;//устанавливаем страницу отображения на тсд 3
								 //ЗаписатьЗначения("Выбор Задания ЗаписатьЗаданиеВРегистр",ТекущаяДатаМилисекунды() - ТекущиеМилисекунды,НомерПакета ,Истина);
								 //ТекущиеМилисекунды = ТекущаяДатаМилисекунды();
								 
								 Операция.Код          = ?(ПустаяСтрока(Ответ),"-","Error");
								 Операция.Наименование = ?(ПустаяСтрока(Ответ),"-",Ответ);
								 Операция.Количество   = 3;
								 ДинамическаяЯчейка = СчитатьРег("ДинамическаяЯчейка");
								 
								 //ВходныеДанные.Номенклатура.Добавить(Операция);
								 //возврат ВходныеДанные;
							 КонецЕсли;
						 Иначе 
							 Операция.Наименование = "Не выбрана секция";
							 ЗаписатьРег("текущаяСтраница",4);//выкидывем в главменю
							 ОсвободитьДинамическуюЯчейку();
						 КонецЕсли;
						 
						 ВходныеДанные.Номенклатура.Добавить(Операция);
						 //ЗаписатьЗначения("Выбор Задания",ТекущаяДатаМилисекунды() - ТекущиеМилисекунды,НомерПакета ,Истина);
						 
						 возврат ВходныеДанные;
					 КонецЕсли;
					 считаннаясекция = лев(скан.Данные,6);
					 Записатьрег("считаннаясекция",считаннаясекция);
					 считаннаясекция = узнатьСледСекцию(скан.Данные);
					 ЗаписатьЗначения("Выбор Задания узнатьСледСекцию",ТекущаяДатаМилисекунды() - ТекущиеМилисекунды,НомерПакета ,Истина);
					 ТекущиеМилисекунды = ТекущаяДатаМилисекунды();
					 Если считаннаясекция = "Error" Тогда 
						 Операция.Код          = "Error";
						 Операция.Наименование = "Нет "+Символы.ВК+Символы.ПС+"заданий на "+Символы.ВК+Символы.ПС+лев(скан.Данные,3);
						 Операция.Количество   = 0;
						 ВходныеДанные.Номенклатура.Добавить(Операция);
						 возврат ВходныеДанные;
					 Иначе 
						 
						 ЗаписатьРег("Секция",считаннаясекция);//заглушка и нужно зафиксировать задание
						 ЗаписатьРег("считаннаясекция",считаннаясекция);//заглушка и нужно зафиксировать задание
						 Ответ = "";//ЗаписатьЗаданиеВРегистр(считаннаясекция,СчитатьРег("Клиент")); // ТУТ ЗДЕСЯ именно ТУТА мы создаем задания на подбор в регистре
						 //ЗаписатьЗначения("Выбор Задания ЗаписатьЗаданиеВРегистр",ТекущаяДатаМилисекунды() - ТекущиеМилисекунды,НомерПакета ,Истина);
						 //ТекущиеМилисекунды = ТекущаяДатаМилисекунды();
						 
						 Операция.Код          = ?(ПустаяСтрока(Ответ),"-","Error");
						 Операция.Наименование = ?(ПустаяСтрока(Ответ),"-",Ответ);
						 Операция.Количество   = 3;
						 ДинамическаяЯчейка = СчитатьРег("ДинамическаяЯчейка");
						 
						 Если не ЭтоДинамическаяЯчейка(ДинамическаяЯчейка)Тогда 
							 //ЗаписатьРег("текущаяСтраница",6);//устанавливаем страницу отображения на тсд 3
							 ЗаписатьРег("текущаяСтраница",6);//устанавливаем страницу отображения на тсд 3
							 Удалитьрег("УжеТС");
							 
						 Иначе 
							 
							 Адрес = СчитатьРег("Адрес");
							 Если ПустаяСтрока(Адрес) Тогда 
								 ЗаписатьРег("текущаяСтраница",7);//устанавливаем страницу отображения на тсд 7 = выбор открытия адресса
							 Иначе 				
								 ЗаписатьРег("текущаяСтраница",3);//устанавливаем страницу отображения на тсд 3
							 КонецЕсли;
						 КонецЕсли;
					 КонецЕсли;
				 КонецЕсли;
				 ВходныеДанные.Номенклатура.Добавить(Операция);
			 КонецЕсли;                                  
			 //-----------=-=-=-=-=-=-=------------------=-=-=-=-=-----------------------
			 Если текущаяСтраница = 537 Тогда
				 //при выборе ттн номер документа будет в Код , но соОтветсвующий тотже номер в памяти в Номенклатура (можно Гуиды туда напихать и тд)
				 
				 Выборка = ПолучитьДокументРазгрузки(Код);
				 Если Выборка.Следующий() Тогда 
					 ЗаписатьРег("ВыбраннаяТТН",Выборка.Ссылка);	
					 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
					 Операция.Код          = "-";
					 Операция.Наименование = СокрЛП(Выборка.ВидТТН);
					 Операция.Количество   = 538;
					 ВходныеДанные.Номенклатура.Добавить(Операция);
					 ТекущаяСтраница = 538;
					 ЗаписатьРег("текущаяСтраница",538);
				 Иначе
					 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
					 Операция.Код          = "Error";
					 Операция.Наименование = Наименование;
					 Операция.Количество   = 0;
					 ВходныеДанные.Номенклатура.Добавить(Операция);
				 КонецЕсли;
				 
			 КонецЕсли;
			 
			 Если текущаяСтраница = 437 Тогда
				 
				 Выборка = ПолучитьТранспортПоНомеруМашины(Код);
				 Если Выборка.Следующий() Тогда 
					 ЗаписатьРег("ВыбранныйТранспорт",Выборка.Ссылка);	
					 ЗаписатьРег("Экспедитор",Выборка.Экспедитор);	
					 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
					 Операция.Код          = "-";
					 Операция.Наименование = СокрЛП(Выборка.Экспедитор);
					 Операция.Количество   = 438;
					 ВходныеДанные.Номенклатура.Добавить(Операция);
					 ТекущаяСтраница = 438;
					 ЗаписатьРег("текущаяСтраница",438);
				 Иначе
					 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
					 Операция.Код          = "Error";
					 Операция.Наименование = Наименование;
					 Операция.Количество   = 0;
					 ВходныеДанные.Номенклатура.Добавить(Операция);
				 КонецЕсли;
				 
			 КонецЕсли;
			 
			 
			 
			 
			 Если текущаяСтраница = 7 Тогда  
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "Error";
				 Операция.Наименование = "Требуется сосканировать"+Символы.ВК+Символы.ПС+"секцию для выбора";
				 Операция.Наименование = "Необходимо отсканировать адрес полки для подбора товара";
				 Операция.Количество   = 6;
				 ВходныеДанные.Номенклатура.Добавить(Операция);
			 КонецЕсли;
			 Если текущаяСтраница = 10 Тогда //Выбор ряда Дефраг
				 //Код  = Ряд
				 //НЕобходимо проверить есть ли задания дефраг на сканированный ряд
				 //Если проверитьРядДефрагментации(считаннаясекция) Тогда 
				 Записатьрег("Ряд",Код);
				 ЗаписатьРег("текущаяСтраница",20);
				 Операция.Код          = "-";
				 Операция.Наименование = Код;
				 Операция.Количество   = 0;
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 ЗаписатьЗначения("Выбор ряда Дефраг",ТекущаяДатаМилисекунды() - ТекущиеМилисекунды,НомерПакета ,Истина);
				 возврат ВходныеДанные;
				 //КонецЕсли;
			 КонецЕсли;
			 Если текущаяСтраница = 20 Тогда //Выбор Секции Дефраг
				 //Код  = Секция
				 //НЕобходимо проверить есть ли задания дефраг на сканированный ряд
				 Если ПроверитьСекциюДляДефрагментации(СчитатьРег("Ряд"),Код) Тогда 
					 Записатьрег("Секция",Код);
					 ЗаписьЗаданияВРегистрыДефрагментации(Код);
					 ЗаписатьРег("текущаяСтраница",30);
					 Операция.Код          = "-";
					 Операция.Наименование = Код;
					 Операция.Количество   = 30;
					 ВходныеДанные.Номенклатура.Добавить(Операция);
					 ЗаписатьЗначения("Выбор Секции Дефраг",ТекущаяДатаМилисекунды() - ТекущиеМилисекунды,НомерПакета ,Истина);
					 
					 возврат ВходныеДанные;
				 КонецЕсли;
			 КонецЕсли;
			 Если текущаяСтраница = 0 Тогда
				 Попытка 
					 ууид = новый УникальныйИдентификатор(Наименование);
					 филиал = Справочники.Контрагенты.ПолучитьСсылку(ууид);
				 Исключение 
					 ЗаписатьРег("ОписаниеОшибки",ОписаниеОшибки());
				 конецпопытки;
				 Если проверитьфилиалзадания(филиал) Тогда
					 ЗаписатьРег("Клиент",Филиал);
					 ЗаписатьРег("текущаяСтраница",1);
					 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
					 Операция.Код          = Строка(Филиал.УникальныйИдентификатор());
					 Операция.Наименование = СокрЛП(Строка(Филиал));
					 Операция.Количество   = 1;
					 ВходныеДанные.Номенклатура.Добавить(Операция);
					 ЗаписатьЗначения("Выбор проверитьфилиалзадания",ТекущаяДатаМилисекунды() - ТекущиеМилисекунды,НомерПакета ,Истина);
					 
				 КонецЕсли;
			 ИначеЕсли текущаяСтраница = 1 Тогда
				 Если проверитьРядзадания(СчитатьРег("Клиент"),Код) Тогда
					 ЗаписатьРег("Ряд",Код);
					 ЗаписатьРег("текущаяСтраница",2);
					 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
					 Операция.Код          = "-";
					 Операция.Наименование = "-";
					 Операция.Количество   = 2;
					 ВходныеДанные.Номенклатура.Добавить(Операция);
					 ЗаписатьЗначения("Выбор проверитьРядзадания",ТекущаяДатаМилисекунды() - ТекущиеМилисекунды,НомерПакета ,Истина);
					 
				 КонецЕсли;
			 ИначеЕсли текущаяСтраница = 2 Тогда
				 
				 //начало операции выбор секции
				 
				 считаннаясекция = Код;
				 Записатьрег("считаннаясекция",считаннаясекция);
				 
				 считаннаясекция = узнатьСледСекцию(Код);
				 Если считаннаясекция = "Error" Тогда 
					 Операция.Код          = "Error";
					 Операция.Наименование = "Нет "+Символы.ВК+Символы.ПС+"заданий на "+Код;
					 Операция.Количество   = 0;
					 ВходныеДанные.Номенклатура.Добавить(Операция);
					 ЗаписатьЗначения("Выбор Задания",ТекущаяДатаМилисекунды() - ТекущиеМилисекунды,НомерПакета ,Истина);
					 
					 возврат ВходныеДанные;
					 
				 Иначе 
					 
					 ЗаписатьРег("Секция",считаннаясекция);//заглушка и нужно зафиксировать задание
					 ЗаписатьРег("считаннаясекция",считаннаясекция);//заглушка и нужно зафиксировать задание
					 Ответ = "";//ЗаписатьЗаданиеВРегистр(считаннаясекция,СчитатьРег("Клиент"));
					 Операция.Код          = ?(ПустаяСтрока(Ответ),"-","Error");
					 Операция.Наименование = ?(ПустаяСтрока(Ответ),"-",Ответ);
					 Операция.Количество   = 3;
					 ДинамическаяЯчейка = СчитатьРег("ДинамическаяЯчейка");
					 
					 Если ДинамическаяЯчейка = неопределено или пустаястрока(ДинамическаяЯчейка) Тогда 
						 //ЗаписатьРег("текущаяСтраница",6);//устанавливаем страницу отображения на тсд 3
						 ЗаписатьРег("текущаяСтраница",6);//устанавливаем страницу отображения на тсд 3
						 Удалитьрег("УжеТС");
						 
					 Иначе 
						 
						 ЗапросДЯ = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
						 |	ЗаданияКладовщикам2.Клиент,
						 |	ЗаданияКладовщикам2.Автор
						 |ИЗ
						 |	РегистрСведений.ЗаданияКладовщикам2 КАК ЗаданияКладовщикам2
						 |ГДЕ
						 |	ЗаданияКладовщикам2.ДинамическаяЯчейка = &ДинамическаяЯчейка");
						 
						 ЗапросДЯ.УстановитьПараметр("ДинамическаяЯчейка", ДинамическаяЯчейка);
						 РезультатЗапроса = ЗапросДЯ.Выполнить();
						 
						 Если НЕ РезультатЗапроса.Пустой() Тогда
							 
							 Выборка = РезультатЗапроса.Выбрать();	
							 
							 Выборка.Следующий();
							 
							 КлиентСкладскогоТранспорта = Выборка.Клиент;
							 Клиент = СчитатьРег("Клиент");
							 Если ЗначениеЗаполнено(Клиент) Тогда
								 Если НЕ КлиентСкладскогоТранспорта = Клиент Тогда
									 //УдалитьРег("ДинамическаяЯчейка");
									 ОсвободитьДинамическуюЯчейку();
									 
									 ЗаписатьРег("текущаяСтраница",6);
									 Удалитьрег("УжеТС");
									 ВходныеДанные.Номенклатура.Добавить(Операция);
									 возврат ВходныеДанные;
								 КонецЕсли;	
							 КонецЕсли;	
						 КонецЕсли;
						 Адрес = СчитатьРег("Адрес");
						 Если ПустаяСтрока(Адрес) Тогда 
							 ЗаписатьРег("текущаяСтраница",7);//устанавливаем страницу отображения на тсд 3
						 Иначе 				
							 ЗаписатьРег("текущаяСтраница",3);//устанавливаем страницу отображения на тсд 3
						 КонецЕсли;
					 КонецЕсли;
				 КонецЕсли;
			 КонецЕсли;
			 ВходныеДанные.Номенклатура.Добавить(Операция);
		 КонецЕсли;
		 //-------------------------------------------------------------------------------------------------------------
		 Если ВидОперации = "СледующаяСтраница" Тогда //самый запутанный код в этой процедуре 
			 ЗаписатьРег("ВыборСледующаяСтраница",Наименование+":"+Код+":"+Строка(Количество));
			 ПредыдущаяСтраницаИмя = Наименование;
			 ПредыдущаяСтраницаНомер =  Количество;
			 текущаяСтраница = СчитатьРег("текущаяСтраница");//сначала узнаем какая страница отображена на ТСД (номер, число)
			 Если Код = "Инвентаризация ПодборЗадания" Тогда //при запросе следующего номера страницы тсд кидает название операции где сейчас находится
				 Если ( Количество = 300) Тогда  // а также номер страницы отображаемый сейчас на тсд   если вернуть на ТСД 4 страницу то это выход в главное меню
					 Если ЕстьЗаданияИнвентаризацииНаМеня() Тогда 
						 текущаяСтраница =  335; //страница проверки по адресам
					 Иначе
						 текущаяСтраница =  330; //страница выбора товара
					 КонецЕсли;
					 ЗаписатьРег("текущаяСтраница",текущаяСтраница);
				 ИначеЕсли текущаяСтраница = 0 Тогда	
					 текущаяСтраница =  ?(ЗначениеЗаполнено(СчитатьРег(ВыбТовар)),335,4);
					 ЗаписатьРег("текущаяСтраница",текущаяСтраница);
					 
				 ИначеЕсли текущаяСтраница = 330 Тогда	
					 текущаяСтраница =  ?(ЕстьЗаданияИнвентаризацииНаМеня(),335,4);
					 ЗаписатьРег("текущаяСтраница",текущаяСтраница);
				 КонецЕсли;
				 
				 //-----------Дефрагментация---------------------------------------------------------------------
			 ИначеЕсли Код = "ДефрагментацияПодборЗадания" или Код = "Дефрагментация ПодборЗадания"  Тогда
				 ЕстьСобрано = ПолучитьМоеЗаданиеДефрагментацияСобрано(ПараметрыСеанса.глТекПользователь).Следующий(); 
				 ЕстьДефраг = ПолучитьМоеЗаданиеДефрагментация(ПараметрыСеанса.глТекПользователь).Следующий();
				 текущаяСтраница = читатьрег("текущаяСтраница",4);
				 текущаяСтраница = ?(текущаяСтраница = 0,4,текущаяСтраница);
				 АдресСканирован = ЧитатьРег("АдресСканирован",Ложь);
				 ЗаписатьРег(ВидОперации,Наименование+" "+Строка(Количество));
				 Если Наименование = "Дефрагментация Выбор задания" и Количество = 10 и СчитатьРег("Ряд")= Неопределено Тогда  //Дефрагментация Выбор задания:ДефрагментацияПодборЗадания:20
					 текущаяСтраница = ?(ЕстьДефраг,30,4);
				 ИначеЕсли Наименование = "Дефрагментация Выбор задания" и Количество = 20 Тогда  //Дефрагментация Выбор задания:ДефрагментацияПодборЗадания:20
					 текущаяСтраница = ?(ЕстьДефраг,30,4);
					 ЗаписатьРег("текущаяСтраница",текущаяСтраница);
				 ИначеЕсли текущаяСтраница = 30 Тогда
					 Ответ = ЗавершитьМоиЗаданияДефрагментации(ПараметрыСеанса.глТекПользователь);
					 
					 Если Ответ = "НетЗаписей" или пустаяСтрока(Ответ) Тогда
						 текущаяСтраница = ?(ЕстьСобрано или Наименование = "Дефрагментация Форма подбора товара",35,4);
						 ЗаписатьРег("текущаяСтраница",текущаяСтраница);
					 Иначе
						 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
						 Операция.Код          = "Error";
						 Операция.Наименование = Ответ;
						 Операция.Количество   = 4;
						 ВходныеДанные.Номенклатура.Добавить(Операция);
						 //ЗаписатьЗначения("Выяснение следующей страницы отображения "+Наименование,ТекущаяДатаМилисекунды() - ТекущиеМилисекунды,НомерПакета ,Истина);
						 Возврат ВходныеДанные;
					 КонецЕсли;
					 Удалитьрег("Адрес");
					 текущаяСтраница = ?(ЕстьСобрано,35,4);
					 ЗаписатьРег("текущаяСтраница",текущаяСтраница);
				 ИначеЕсли текущаяСтраница = 35 Тогда
					 Ответ = ЗавершитьМоиЗаданияДефрагментации(ПараметрыСеанса.глТекПользователь);
					 Если Ответ = "НетЗаписей" или пустаяСтрока(Ответ)  Тогда 
						 ТекущаяСтраница = 4;
						 
						 ЗаписатьРег("текущаяСтраница",текущаяСтраница);
					 Иначе
						 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
						 Операция.Код          = "Error";
						 Операция.Наименование = Ответ;
						 Операция.Количество   = 4;
						 ВходныеДанные.Номенклатура.Добавить(Операция);
						 //ЗаписатьЗначения("Выяснение с/ледующей страницы отображения "+Наименование,ТекущаяДатаМилисекунды() - ТекущиеМилисекунды,НомерПакета ,Истина);
						 
						 Возврат ВходныеДанные;
					 КонецЕсли;
					 Удалитьрег("Адрес");
					 ЗаписатьРег("текущаяСтраница",текущаяСтраница);
				 ИначеЕсли ЕстьСобрано Тогда	
					 текущаяСтраница = 35;
					 Выборка = ПолучитьСекциюЗаданияДефрагментация(ПараметрыСеанса.глТекПользователь);
					 Секция = "";
					 Если Выборка.Следующий()Тогда
						 записатьРег("Секция",Выборка.Адрес);
						 ЗаписатьРег("текущаяСтраница",текущаяСтраница);
					 КонецЕсли;
					 
				 ИначеЕсли ЕстьДефраг Тогда
					 текущаяСтраница = 30;
					 Выборка = ПолучитьСекциюЗаданияДефрагментация(ПараметрыСеанса.глТекПользователь);
					 Секция = "";
					 Если Выборка.Следующий()Тогда
						 записатьРег("Секция",Выборка.Адрес);
						 ЗаписатьРег("текущаяСтраница",текущаяСтраница);
					 КонецЕсли;
				 ИначеЕсли Наименование = "Дефрагментация Выбор задания" Тогда
					 текущаяСтраница = 20;
					 //					текущаяСтраница = ?(текущаяСтраница = 20,31,20);
					 ЗаписатьРег("текущаяСтраница",текущаяСтраница);
					 //Выбор дефрагментации:ДефрагментацияПодборЗадания:10
				 ИначеЕсли Наименование = "Выбор дефрагментации" Тогда
					 текущаяСтраница = 10;
					 ЗаписатьРег("текущаяСтраница",текущаяСтраница);
					 //читатьрег("текущаяСтраница",10);
				 Иначе
					 //..текущаяСтраница =
					 ЗаписатьРег("текущаяСтраница",4);
				 КонецЕсли;
				 //-----Погрузка Разгрузка----------------------------------------------------------------------------------------------------------
			 ИначеЕсли  текущаяСтраница = 4 Тогда //Выход из цикла на ТСД 4 страница
				 ЗаписатьРег("текущаяСтраница",0);
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "-";
				 Операция.Наименование = "-";
				 Операция.Количество   = текущаяСтраница;
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 Возврат ВходныеДанные;
			 ИначеЕсли  Код = "Погрузка ПодборЗадания"  Тогда
				 //текущаяСтраница = 437; //+37 список  Операция+" Список"
				 если ПредыдущаяСтраницаНомер = 400 тогда 
					 текущаяСтраница = 437;//?(ПолучитьТаблицуЭкспедиторов().Количество()>15,442,437); //Nenn
				 иначеЕсли  ПредыдущаяСтраницаНомер = 437 тогда
					 текущаяСтраница = 438;
				 иначеЕсли  ПредыдущаяСтраницаНомер = 442 тогда
					 текущаяСтраница = 438;
				 ИначеЕсли ПредыдущаяСтраницаНомер = 438  тогда
					 текущаяСтраница = 435;
				 ИначеЕсли ПредыдущаяСтраницаНомер = 435  тогда
					 текущаяСтраница = 441;
					 ДобавитьСтроку(ВходныеДанные,"-","-",текущаяСтраница);
					 Возврат ВходныеДанные;
				 ИначеЕсли ПредыдущаяСтраницаНомер = 441  тогда
					 //текущаяСтраница = 441;
					 ДобавитьСтроку(ВходныеДанные,"-","-",текущаяСтраница);
					 Возврат ВходныеДанные;
				 КонецЕсли;
				 ЗаписатьРег("текущаяСтраница",текущаяСтраница);
				 
			 ИначеЕсли Код = "Разгрузка ПодборЗадания"   Тогда
				 если ПредыдущаяСтраницаНомер = 500 тогда 
					 текущаяСтраница = 537; //+37 список
				 иначеЕсли  ПредыдущаяСтраницаНомер = 537 тогда
					 ЗаписатьРег("РазгрузкаНачата",ложь);
					 текущаяСтраница = 538;
				 ИначеЕсли ПредыдущаяСтраницаНомер = 538  тогда
					 Если (СчитатьРег("РазгрузкаНачата")=Истина) ТОгда 
						 УдалитьРег("РазгрузкаНачата");
						 текущаяСтраница = 4; 
						 
					 Иначе
						 ЗаписатьРег("РазгрузкаНачата",Истина);
					 КонецЕсли;
				 КонецЕсли;
				 ЗаписатьРег("текущаяСтраница",текущаяСтраница);
			 Иначе
				 //-------------Подбор---------------------------------------				 
				 текущаяСтраница = читатьрег("текущаяСтраница",0);
				 //Если текущаяСтраница = 3 Тогда
				 
				 
				 
				 //КонецЕсли;
				 Если текущаяСтраница = 4 и Количество = 0 и  Наименование = "Выбор задания" Тогда 
					 текущаяСтраница = 0;
					 ЗаписатьРег("текущаяСтраница",0);
				 КонецЕсли;
				 Если текущаяСтраница > 9 Тогда 
					 текущаяСтраница = 0;
					 ЗаписатьРег("текущаяСтраница",0);
				 КонецЕсли;
				 Если текущаяСтраница = 6 Тогда
					 Если СчитатьРег("УжеТС") = неопределено Тогда
						 ЗаписатьРег("УжеТС",Истина);	
					 Иначе
						 Удалитьрег("УжеТС");
						 ЗаписатьРег("текущаяСтраница",3);
						 текущаяСтраница = 3;
					 КонецЕсли;
				 КонецЕсли;
				 
				 
				 Если текущаяСтраница = 0 Тогда
					 ПереместитьВДинамическуюЯчейку();
					 выборка = ПолучитьКлиентаМоеЗадание(ПараметрыСеанса.глТекПользователь);
					 Если выборка.Следующий() Тогда
						 ЗаписатьРег("Клиент",выборка.Клиент);
						 //ЗаписатьРег("НомерЗаданияНаПодбор",выборка.НомерЗадания);
						 текущаяСтраница = 3;
					 КонецЕсли;
					 
				 КонецЕсли;
				 //КонецЕсли;
				 Если Наименование = "Инвентаризация" Тогда
					 //выход из Инвентаризации
					 РазблокироватьАдрес(СчитатьРег("ИнвентаризацияАдреса"));
					 //текущаяСтраница = читатьрег("СтраницаИнвентаризации",1);
					 //ЗаписатьРег("СтраницаИнвентаризации",4);//для того чтоб при нажатии отмена выйти в меню
				 КонецЕсли;
				 
			 КонецЕсли;
			 //нужно проверить Если у этого пользователя есть задания то открыть их на 3 странице
			 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
			 Операция.Код          = "-";
			 Операция.Наименование = "-";
			 Операция.Количество   = текущаяСтраница;
			 ВходныеДанные.Номенклатура.Добавить(Операция);
		 КонецЕсли;
		 //-----------------------------------------------------------------------------------------------------------	
		 Если ВидОперации = "Переместить" и Список.Номенклатура.Количество() > 1 Тогда 
			 УдалитьРег("ВопросНаСтранице");
			 АдресОтправитель   =  проверитьадрес(Список.Номенклатура.Получить(0).Наименование);
			 АдресПолучатель  =  проверитьадрес(Список.Номенклатура.Получить(0).Код);
			 Запрос = Новый Запрос;
			 Адреса = РегистрыСведений.АдресаМестХранения;
			 ОтборАдреса = Новый Структура("Адрес");
			 ОтборАдреса.Адрес = АдресОтправитель;
			 
			 ДинамическаяЯчейка = Ложь;			 
			 ВыборкаАдреса = Адреса.Выбрать(ОтборАдреса);
			 Если ВыборкаАдреса.Следующий() Тогда	
				 ДинамическаяЯчейка = ?(ВыборкаАдреса.НазначениеМестаХранения = Перечисления.НазначениеМестаХранения.ДинамическаяЯчейка,Истина,Ложь);
			 КонецЕсли;
			 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
			 Операция.Код          = ?(ДинамическаяЯчейка,"Успех","Выход");
			 ТаблицаТоваров = Новый ТаблицаЗначений;
			 ТаблицаТоваров.Колонки.Добавить("Товар",Новый ОписаниеТипов("СправочникСсылка.Номенклатура")); 
			 ТаблицаТоваров.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число")); 
			 Для каждого стр из Список.Номенклатура цикл
				 ТСтр = ТаблицаТоваров.Добавить();
				 товар = Справочники.Номенклатура.НайтиПоКоду(стр.Код);
				 кол = Число(стр.Количество);
				 ТСтр.Товар = товар;
				 ТСтр.Количество = кол;
			 КонецЦикла;
			 
			 ПроводитьВсе = ?(Количество = 4007,Истина,Ложь);
			 ЕСли ДинамическаяЯчейка Тогда 
				 //Запрос.УстановитьПараметр("Адрес", СчитатьРег("АдресПолкиПолучателя"));
				 Запрос.УстановитьПараметр("АдресОтправитель", АдресОтправитель);
				 Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
				 //Запрос.УстановитьПараметр("ДинамическаяЯчейка",ДинамическаяЯчейка); 
				 Запрос.УстановитьПараметр("ПроводитьВсе",ПроводитьВсе); 
				 //Запрос.УстановитьПараметр("АдресОтправитель", АдресОтправитель);
				 Запрос.Текст = 
				 "ВЫБРАТЬ
				 |	ТаблицаТоваров.Товар,
				 |	ТаблицаТоваров.Количество
				 |ПОМЕСТИТЬ ТаблицаТоваров
				 |ИЗ
				 |	&ТаблицаТоваров КАК ТаблицаТоваров
				 |;
				 |
				 |////////////////////////////////////////////////////////////////////////////////
				 |ВЫБРАТЬ
				 |	ТаблицаТоваров.Товар,
				 |	ВЫБОР
				 |		КОГДА &ПроводитьВсе
				 |			ТОГДА ЕСТЬNULL(Счет_41_АдресныйОстатки.КоличествоОстаток, ТаблицаТоваров.Количество)
				 |		ИНАЧЕ ТаблицаТоваров.Количество
				 |	КОНЕЦ КАК Количество
				 |ИЗ
				 |	ТаблицаТоваров КАК ТаблицаТоваров
				 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Счет_41_Адресный.Остатки КАК Счет_41_АдресныйОстатки
				 |		ПО ТаблицаТоваров.Товар = Счет_41_АдресныйОстатки.Номенклатура
				 |ГДЕ
				 |	Счет_41_АдресныйОстатки.Адрес = &АдресОтправитель";
				 Результат = Запрос.Выполнить();
				 ТаблицаТоваров = Результат.Выгрузить();
				 
				 
			 КонецЕсли;
			 Документ = Документы.ДвижениеТоваровПоСкладу.СоздатьДокумент();
			 Документ.Дата = ПолучитьОперативнуюОтметкуВремени();
			 Документ.Автор  = ПараметрыСеанса.глТекПользователь;
			 Документ.Автор2 = Справочники.Пользователи.ПустаяСсылка();
			 УстановитьНомерДокумента(Документ);
			 Документ.ВидДвижения = 0;
			 Документ.ВремяНачала = СчитатьРег("ВремяНачалаЗадания");
			 УдалитьРег("ВремяНачалаЗадания");
			 Документ.ВремяЗавершения = ТекущаяДатаСервер();
			 Документ.Операция =  Перечисления.ВидыСкладскихОпераций.ПеремещениеТовара;
			 к = 0;
			 Для каждого стр из ТаблицаТоваров цикл
				 товар = стр.Товар;//Справочники.Номенклатура.НайтиПоКоду(стр.Код);
				 кол = стр.Количество;
				 //ЗаписатьРег("ТоварС"+Строка(к),"("+Строка(кол)+")"+Строка(товар));
				 
				 Если (кол>0 и не товар.Пустая()) Тогда
					 сост  = Документ.Состав.Добавить();
					 сост.Товар = товар;
					 сост.Количество = кол;
					 сост.АдресОтправитель = АдресОтправитель;
					 сост.АдресПолучатель = АдресПолучатель;
					 //ЗаписьВРегистрСведенийФиксацияОпераций(Перечисления.ВидыСкладскихОпераций.ПеремещениеТовара, товар, Кол, , , НомерЗадания, Ложь);
					 к = к + кол;
				 КонецЕсли;
			 КонецЦикла;
			 Попытка
				 Документ.Записать(РежимЗаписиДокумента.Проведение);
			 Исключение
				 ошибка = "";
				 Попытка
					 ошибка = Документ.ДополнительныеСвойства.ОшибкаПриПроведении;	
				 Исключение
				 КонецПопытки;
				 Документ.Записать();
				 ВызватьИсключение " создан документ "+Документ.Номер+" но не проведен по причине:"+ошибка + " , "+ ОписаниеОшибки();
				 //Документ.Записать();
				 //ВызватьИсключение ОписаниеОшибки()+" Документ "+Документ.Номер+" не проведен";
			 КонецПопытки;
			 // Конец задания
			 перегрузитьрег();
			 Операция.Наименование = Документ.Номер;
			 Операция.Количество   = к;
			 
			 ЕСли ДинамическаяЯчейка Тогда
				 Запрос.Текст = 
				 "ВЫБРАТЬ
				 |	Счет_41_АдресныйОстатки.КоличествоОстаток КАК КоличествоОстаток
				 |ИЗ
				 |	РегистрНакопления.Счет_41_Адресный.Остатки КАК Счет_41_АдресныйОстатки
				 |ГДЕ
				 |	Счет_41_АдресныйОстатки.Адрес = &АдресОтправитель";
				 Результат = Запрос.Выполнить();
				 Выборка = Результат.Выбрать();
				 Если Выборка.Следующий() тогда 
					 Операция.Код          = "Успех";
					 ЗаписатьРег("АдресДЯ",АдресОтправитель);
					 Если ПроводитьВсе Тогда
						 Операция.Код          = "Error";
						 Операция.Наименование = "Часть товаров этой ДЯ проведено, но в ней еще остались товары";
					 КонецЕсли;
				 иначе 
					 Операция.Код          = "Выход";
				 КонецЕсли;
			 КонецЕсли;		 
			 
			 //ЗаписьВРегистрСведенийФиксацияОпераций(Перечисления.ВидыСкладскихОпераций.ПеремещениеТовара, АдресНа, , , , НомерЗадания, Ложь, , Истина);
			 ВходныеДанные.Номенклатура.Добавить(Операция);
			 ЗакрытьВсеКроме(Неопределено);
			 //ЗаписатьЗначения("Потрачено на создание документа ДвижениеТоваровПоСкладу Перемещения",ТекущаяДатаМилисекунды() - ТекущиеМилисекунды,НомерПакета ,Истина)
			 
		 КонецЕсли;
		 //------------------------------------------------------------------
		 Если ВидОперации = "РазместитьТовар" и Список.Номенклатура.Количество() > 0 Тогда 
			 УдалитьРег("ВопросНаСтранице");
			 ТранспортРазгрузка = СчитатьРег("ТранспортРазгрузка");
			 ТранспортРазгрузка = СтрЗаменить(ТранспортРазгрузка ,"str","");
			 //Документ Размещение
			 Операция = Перечисления.ВидыСкладскихОпераций.РазмещениеТовара;
			 Документ = Документы.ДвижениеТоваровПоСкладу.СоздатьДокумент();
			 Документ.Дата = ПолучитьОперативнуюОтметкуВремени();
			 Документ.Автор  = ПараметрыСеанса.глТекПользователь;
			 Документ.Автор2 = Справочники.Пользователи.ПустаяСсылка();
			 Документ.СкладскойТранспорт = ТранспортРазгрузка; 
			 
			 УстановитьНомерДокумента(Документ);
			 Документ.Операция =  Операция;
 			 Документ.ВремяНачала = СчитатьРег("ВремяНачалаЗадания");УдалитьРег("ВремяНачалаЗадания");
			 Документ.ВремяЗавершения = ТекущаяДатаСервер();

			 АдресОтправитель   =  "Т00-00-0"; // Зона разгрузки; 
			 к = 0;	
			 //Документ Инвентаризация
			 ДокументИнв = Документы.Инвентаризация.СоздатьДокумент();
			 ДокументИнв.Дата = ПолучитьОперативнуюОтметкуВремени();
			 ДокументИнв.Автор  = ПараметрыСеанса.глТекПользователь;
			 ДокументИнв.Автор2 = Справочники.Пользователи.ПустаяСсылка();
			 УстановитьНомерДокумента(ДокументИнв);
			 ДокументИнв.Комментарий = "Создан на мобильном терминале сбора данных при размещении";
			 Попытка ДокументИнв.СпособИнвентаризации_ПриПомощиСканера = Истина; Исключение КонецПопытки;
			 Запрос = Новый Запрос;
			 Запрос.Текст = 
			 "ВЫБРАТЬ
			 |	Сеанс.Код,
			 |	Сеанс.Адрес,
			 |	Сеанс.Количество
			 |ПОМЕСТИТЬ список
			 |ИЗ
			 |	&Сеанс КАК Сеанс
			 |;
			 |
			 |////////////////////////////////////////////////////////////////////////////////
			 |ВЫБРАТЬ
			 |	Номенклатура.Ссылка,
			 |	СУММА(список.Количество) КАК Количество,
			 |	список.Адрес
			 |ПОМЕСТИТЬ ВТ_СписокТовара
			 |ИЗ
			 |	Справочник.Номенклатура КАК Номенклатура
			 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ список КАК список
			 |		ПО Номенклатура.Код = список.Код
			 |
			 |СГРУППИРОВАТЬ ПО
			 |	Номенклатура.Ссылка,
			 |	список.Адрес
			 |;
			 |
			 |////////////////////////////////////////////////////////////////////////////////
			 |ВЫБРАТЬ
			 |	СкладскойТранспортОстатки.КоличествоОстаток,
			 |	Счет_41_АдресныйОстатки.Номенклатура
			 |ПОМЕСТИТЬ ВТ_ОстаткиВТранспорте
			 |ИЗ
			 |	РегистрНакопления.Счет_41_Адресный.Остатки КАК Счет_41_АдресныйОстатки
			 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СкладскойТранспорт.Остатки КАК СкладскойТранспортОстатки
			 |		ПО Счет_41_АдресныйОстатки.Номенклатура = СкладскойТранспортОстатки.Номенклатура
			 |ГДЕ
			 |	Счет_41_АдресныйОстатки.Адрес = ""Т00-00-0""
			 |	И СкладскойТранспортОстатки.СкладскойТранспорт ПОДОБНО &СкладскойТранспорт
			 |	И СкладскойТранспортОстатки.КоличествоОстаток > 0
			 |;
			 |
			 |////////////////////////////////////////////////////////////////////////////////
			 |ВЫБРАТЬ
			 |	ВТ_СписокТовара.Ссылка КАК Товар,
			 |	ВТ_СписокТовара.Количество - ЕСТЬNULL(ВТ_ОстаткиВТранспорте.КоличествоОстаток, 0) КАК Инвентаризировать,
			 |	ВЫБОР
			 |		КОГДА ВТ_ОстаткиВТранспорте.КоличествоОстаток ЕСТЬ NULL 
			 |			ТОГДА 0
			 |		ИНАЧЕ ВЫБОР
			 |				КОГДА ВТ_СписокТовара.Количество > ЕСТЬNULL(ВТ_ОстаткиВТранспорте.КоличествоОстаток, 0)
			 |					ТОГДА ЕСТЬNULL(ВТ_ОстаткиВТранспорте.КоличествоОстаток, 0)
			 |				ИНАЧЕ ВТ_СписокТовара.Количество
			 |			КОНЕЦ
			 |	КОНЕЦ КАК Разместить,
			 |	ВТ_СписокТовара.Адрес
			 |ПОМЕСТИТЬ Вт_СТиСканы
			 |ИЗ
			 |	ВТ_СписокТовара КАК ВТ_СписокТовара
			 |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиВТранспорте КАК ВТ_ОстаткиВТранспорте
			 |		ПО ВТ_СписокТовара.Ссылка = ВТ_ОстаткиВТранспорте.Номенклатура
			 |;
			 |
			 |////////////////////////////////////////////////////////////////////////////////
			 |УНИЧТОЖИТЬ ВТ_СписокТовара
			 |;
			 |
			 |////////////////////////////////////////////////////////////////////////////////
			 |УНИЧТОЖИТЬ ВТ_ОстаткиВТранспорте
			 |;
			 |
			 |////////////////////////////////////////////////////////////////////////////////
			 |УНИЧТОЖИТЬ список
			 |;
			 |
			 |////////////////////////////////////////////////////////////////////////////////
			 |ВЫБРАТЬ
			 |	Вт_СТиСканы.Товар,
			 |	СУММА(ЕСТЬNULL(Счет_41_АдресныйОстатки.КоличествоОстаток, 0)) КАК Учет,
			 |	Вт_СТиСканы.Инвентаризировать,
			 |	Вт_СТиСканы.Разместить,
			 |	Вт_СТиСканы.Адрес
			 |ПОМЕСТИТЬ остаткиИнвентаризируемого
			 |ИЗ
			 |	Вт_СТиСканы КАК Вт_СТиСканы
			 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Счет_41_Адресный.Остатки КАК Счет_41_АдресныйОстатки
			 |		ПО Вт_СТиСканы.Товар = Счет_41_АдресныйОстатки.Номенклатура
			 |			И Вт_СТиСканы.Адрес = Счет_41_АдресныйОстатки.Адрес
			 |
			 |СГРУППИРОВАТЬ ПО
			 |	Вт_СТиСканы.Товар,
			 |	Вт_СТиСканы.Инвентаризировать,
			 |	Вт_СТиСканы.Разместить,
			 |	Вт_СТиСканы.Адрес
			 |;
			 |
			 |////////////////////////////////////////////////////////////////////////////////
			 |ВЫБРАТЬ
			 |	Вт_СТиСканы.Товар,
			 |	ЕСТЬNULL(Вт_СТиСканы.Инвентаризировать, 0) КАК Инвентаризировать,
			 |	Вт_СТиСканы.Разместить,
			 |	ЕСТЬNULL(остаткиИнвентаризируемого.Учет, 0) КАК Учет,
			 |	Вт_СТиСканы.Адрес
			 |ИЗ
			 |	Вт_СТиСканы КАК Вт_СТиСканы
			 |		ЛЕВОЕ СОЕДИНЕНИЕ остаткиИнвентаризируемого КАК остаткиИнвентаризируемого
			 |		ПО Вт_СТиСканы.Товар = остаткиИнвентаризируемого.Товар";
			 Запрос.УстановитьПараметр("Сеанс",ПолучитьТаблицуИзНоменклатуры(Список));
			 Запрос.УстановитьПараметр("СкладскойТранспорт", "%"+ТранспортРазгрузка);
			 //Запрос.УстановитьПараметр("Адрес", АдресНа);
			 Результат = Запрос.Выполнить();
			 Выборка = Результат.Выбрать();
			 ЕстьРазмещение = Ложь;
			 ЕстьИнвентаризация = Ложь;
			 
			 пока Выборка.Следующий() Цикл
				 Если Выборка.Разместить > 0 тогда 
					 ЕстьРазмещение = Истина; 
					 сост  = Документ.Состав.Добавить();
					 сост.Товар = Выборка.Товар;
					 сост.АдресОтправитель = "Т00-00-0";
					 сост.АдресПолучатель = Выборка.Адрес;
					 сост.Количество = Выборка.Разместить;
				 КонецЕсли;
				 
				 Если Выборка.Инвентаризировать > 0 тогда 
					 ЕстьИнвентаризация = Истина; 
					 состИнв  = ДокументИнв.Состав.Добавить();
					 состИнв.Товар = Выборка.Товар;
					 состИнв.Адрес = Выборка.Адрес;
					 состИнв.Факт = Выборка.Инвентаризировать + Выборка.Учет;
					 состИнв.Учет = Выборка.Учет;
					 состИнв.Разница = Выборка.Инвентаризировать;
				 КонецЕсли;
			 КонецЦикла;
			 //Для каждого стр из Список.Номенклатура цикл
			 //	товар = Справочники.Номенклатура.НайтиПоКоду(стр.Код);
			 //	кол = стр.Количество;
			 //	Если (кол>0 и не товар.Пустая()) Тогда
			 //   	 сост  = Документ.Состав.Добавить();
			 //   	 сост.Товар = товар;
			 //   	 АдресНа  = проверитьадрес(стр.Наименование);
			 //   	 сост.АдресОтправитель = АдресОтправитель;
			 //   	 сост.АдресПолучатель = АдресНа;
			 //   	 сост.Количество = кол;
			 //   	 к = к + кол;
			 //	КонецЕсли;
			 //КонецЦикла;
			 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
			 Запрос.Текст = 
			 "ВЫБРАТЬ
			 |	СкладскойТранспортОстатки.Номенклатура.Код,
			 |	СкладскойТранспортОстатки.Номенклатура.Наименование,
			 |	СкладскойТранспортОстатки.КоличествоОстаток,
			 |	0 КАК Колонка4,
			 |	СкладскойТранспортОстатки.Номенклатура КАК Товар
			 |ИЗ
			 |	РегистрНакопления.Счет_41_Адресный.Остатки КАК Счет_41_АдресныйОстатки
			 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СкладскойТранспорт.Остатки КАК СкладскойТранспортОстатки
			 |		ПО Счет_41_АдресныйОстатки.Номенклатура = СкладскойТранспортОстатки.Номенклатура
			 |ГДЕ
			 |	Счет_41_АдресныйОстатки.Адрес = ""Т00-00-0""
			 |	И СкладскойТранспортОстатки.СкладскойТранспорт ПОДОБНО &СкладскойТранспорт
			 |	И СкладскойТранспортОстатки.КоличествоОстаток > 0";
			 
			 Результат = Запрос.Выполнить();
			 ВыборкаДетальныеЗаписи = Результат.Выбрать();
			 Если  ВыборкаДетальныеЗаписи.Следующий() Тогда
				 Операция.Код          = "СледующийУспех";
			 Иначе 
				 Операция.Код          = "Успех";
			 КонецЕсли;
			 
			 
			 ~ЗаписьРазмещения:
			 Попытка
				 НачатьТранзакцию();
				 Если ЕстьИнвентаризация Тогда
					 ДокументИнв.Записать(РежимЗаписиДокумента.Проведение);
				 КонецЕсли;
				 Если ЕстьРазмещение Тогда
					 Документ.Записать(РежимЗаписиДокумента.Проведение);
				 КонецЕсли;
				 
			 Исключение
				 ОтменитьТранзакцию();
				 ОписаниеОшибки = ОписаниеОшибки();
				 Если Найти(НРег(ОписаниеОшибки), "конфликт блокировок") > 0 Тогда
					 Sleep(3); //Задержка на 3 мс.
					 Перейти ~ЗаписьРазмещения;
				 КонецЕсли;
				 Операция.Код          = "Error";
				 Операция.Наименование = ОписаниеОшибки;
				 Операция.Количество   = 0;
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 Возврат ВходныеДанные;
				 //ВызватьИсключение ОписаниеОшибки;
			 КонецПопытки;
			 ЗафиксироватьТранзакцию();
			 
			 Операция.Наименование = Документ.Номер;
			 Операция.Количество   = к;
			 Если не  Операция.Код          = "СледующийУспех" Тогда 
				 перегрузитьрег(); 
				 ЗакрытьВсеКроме(Неопределено);
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 
			 Иначе
				 ТЗ = Запрос.Выполнить().Выгрузить();
				 УдалитьРег("ТаблицаВосстановленияСеанса");
				 Если ТЗ.Количество() = 0 Тогда 
					 Операция.Код          = "Успех";
					 ВходныеДанные.Номенклатура.Добавить(Операция);
					 Возврат ВходныеДанные;
					 
				 КонецЕсли;
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 ДобавитьСтроку(ВходныеДанные,"ЗаполнитьТаблицу","-",113);
				 ДобавитьСтроку(ВходныеДанные,"ОчиститьТаблицу","-",0);
				 Параметр = 1;
				 
				 Для каждого Стр из ТЗ Цикл
					 Код = СокрЛП(Строка(Стр[0]));
					 Код = ?(ПустаяСтрока(Код)," ",Код);
					 Наименование = СокрЛП(Строка(Стр[1]));
					 Наименование = ?(ПустаяСтрока(Наименование)," ",Наименование);
					 Количество = Строка(Стр[2]);
					 Количество = ?(ПустаяСтрока(Количество),"0",Количество);
					 ДобавитьСтроку(ВходныеДанные,Код,Наименование,Параметр);
					 Параметр = Параметр +1;
					 ДобавитьСтроку(ВходныеДанные,"Колонка","0",0);
					 ДобавитьСтроку(ВходныеДанные,"Колонка",Количество,3);
					 МодульВосстановленияСеанса(Стр.Товар,0,ТранспортРазгрузка,"Продолжить размещение");
				 КонецЦикла;
				 ДобавитьСтроку(ВходныеДанные,"КонецТаблицы","-",0);
				 
				 
				 
			 КонецЕсли;
			 
		 КонецЕсли;
		 //------------------------------------------------
		 Если ВидОперации = "Инвентаризация" Тогда 
			 УдалитьРег("ВопросНаСтранице");
			 //ЗаписатьРег("Инв_Дебаг",Строка(Список.Номенклатура.Количество()));
			 //НомерЗадания = читатьрег("НомерЗадания",ПолучитьНомерСледующегоЗаданияДляФиксацииОпераций());
			 Документ = Документы.Инвентаризация.СоздатьДокумент();
			 Документ.Дата = ПолучитьОперативнуюОтметкуВремени();
			 Документ.Автор  = ПараметрыСеанса.глТекПользователь;
			 Документ.Автор2 = Справочники.Пользователи.ПустаяСсылка();
			 УстановитьНомерДокумента(Документ);
  			 Документ.ВремяНачала = СчитатьРег("ВремяНачалаЗадания");УдалитьРег("ВремяНачалаЗадания");
			 Документ.ВремяЗавершения = ТекущаяДатаСервер();

			 Документ.Комментарий = "Создан на мобильном терминале сбора данных";
			 Попытка Документ.СпособИнвентаризации_ПриПомощиСканера = Истина; Исключение КонецПопытки;
			 мвт = Новый МенеджерВременныхТаблиц;
			 Запрос = Новый Запрос;
			 Запрос.МенеджерВременныхТаблиц = мвт;
			 Запрос.Текст = 
			 "ВЫБРАТЬ * Поместить состав ИЗ	&состав1 КАК состав1";
			 ТЗ = новый ТаблицаЗначений;
			 // Создание описателя типов для таблицы значений
			 КЧ = Новый КвалификаторыЧисла(12,2);
			 КС = Новый КвалификаторыСтроки(20);
			 Массив = Новый Массив;
			 Массив.Добавить(Тип("Строка"));
			 ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
			 Массив.Очистить();
			 Массив.Добавить(Тип("Число"));
			 ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,КЧ);
			 ТЗ.Колонки.Добавить("Код",ОписаниеТиповС);
			 ТЗ.Колонки.Добавить("Адрес",ОписаниеТиповС);
			 ТЗ.Колонки.Добавить("Факт",ОписаниеТиповЧ);
			 
			 Для каждого товар из Список.Номенклатура Цикл
				 нс = ТЗ.Добавить();
				 нс.Код = товар.Код;
				 Адрес = проверитьадрес(товар.Наименование);
				 //ЗаписатьРег("Инв_Дебаг",Адрес);
				 Если Адрес = "А01-01-1" Тогда
					 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
					 Операция.Код          = "Error";
					 Операция.Наименование = "Адрес А01-01-1 блокирован Администратором";
					 Операция.Количество   = 1;
					 ВходныеДанные.Номенклатура.Добавить(Операция);
					 Возврат  ВходныеДанные;
				 ИначеЕсли Адрес = "Т00-00-0" Тогда 
					 ВызватьИсключение "Нельзя инвентаризировать транзитную зону ";
				 КонецЕсли;
				 нс.Адрес = Адрес;
				 нс.Факт = товар.Количество;
			 КонецЦикла;
			 //ЗаписьЗаданияВРегистры(Адрес);
			 РазблокироватьАдрес(Адрес);
			 Запрос.УстановитьПараметр("состав1",ТЗ);
			 Запрос.Выполнить();
			 Запрос.Текст = "ВЫБРАТЬ
			 |	состав.Адрес,
			 |	СУММА(состав.Факт) КАК Факт,
			 |	Номенклатура.Ссылка КАК Товар
			 |ПОМЕСТИТЬ ВТ_Скан
			 |ИЗ
			 |	состав КАК состав
			 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
			 |		ПО состав.Код = Номенклатура.Код
			 |
			 |СГРУППИРОВАТЬ ПО
			 |	состав.Адрес,
			 |	Номенклатура.Ссылка
			 |;
			 |
			 |////////////////////////////////////////////////////////////////////////////////
			 |ВЫБРАТЬ РАЗЛИЧНЫЕ
			 |	ВТ_Скан.Адрес
			 |ПОМЕСТИТЬ ВТ_Адреса
			 |ИЗ
			 |	ВТ_Скан КАК ВТ_Скан
			 |;
			 |
			 |////////////////////////////////////////////////////////////////////////////////
			 |ВЫБРАТЬ
			 |	Счет_41_АдресныйОстатки.Номенклатура КАК Товар,
			 |	Счет_41_АдресныйОстатки.Адрес,
			 |	СУММА(Счет_41_АдресныйОстатки.КоличествоОстаток) КАК Учет
			 |ПОМЕСТИТЬ ВТ_Учет
			 |ИЗ
			 |	РегистрНакопления.Счет_41_Адресный.Остатки КАК Счет_41_АдресныйОстатки
			 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Адреса КАК ВТ_Адреса
			 |		ПО (ВТ_Адреса.Адрес = Счет_41_АдресныйОстатки.Адрес)
			 |
			 |СГРУППИРОВАТЬ ПО
			 |	Счет_41_АдресныйОстатки.Номенклатура,
			 |	Счет_41_АдресныйОстатки.Адрес
			 |;
			 |
			 |////////////////////////////////////////////////////////////////////////////////
			 |ВЫБРАТЬ
			 |	ЕСТЬNULL(ВТ_Скан.Товар, ВТ_Учет.Товар) КАК Товар,
			 |	ЕСТЬNULL(ВТ_Скан.Адрес, ВТ_Учет.Адрес) КАК Адрес,
			 |	ЕСТЬNULL(ВТ_Скан.Факт, 0) КАК Факт,
			 |	ЕСТЬNULL(ВТ_Учет.Учет, 0) КАК Учет
			 |ИЗ
			 |	ВТ_Учет КАК ВТ_Учет
			 |		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Скан КАК ВТ_Скан
			 |		ПО ВТ_Учет.Товар = ВТ_Скан.Товар
			 |			И ВТ_Учет.Адрес = ВТ_Скан.Адрес
			 |;
			 |
			 |////////////////////////////////////////////////////////////////////////////////
			 |УНИЧТОЖИТЬ ВТ_Скан
			 |;
			 |
			 |////////////////////////////////////////////////////////////////////////////////
			 |УНИЧТОЖИТЬ ВТ_Учет
			 |;
			 |
			 |////////////////////////////////////////////////////////////////////////////////
			 |УНИЧТОЖИТЬ ВТ_Адреса";
			 Если Список.Номенклатура.Количество()=0 Тогда 
				 
				 Адрес = считатьРег("АдресИнвентаризации");
				 Если Адрес = "А01-01-1" Тогда
					 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
					 Операция.Код          = "Error";
					 Операция.Наименование = "Адрес А01-01-1 блокирован Администратором";
					 Операция.Количество   = 1;
					 ВходныеДанные.Номенклатура.Добавить(Операция);
					 Возврат  ВходныеДанные;
				 КонецЕсли;
				 
				 Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
				 |	Счет_41_АдресныйОстатки.Номенклатура КАК Товар,
				 |	Счет_41_АдресныйОстатки.Адрес,
				 |	СУММА(Счет_41_АдресныйОстатки.КоличествоОстаток) КАК Учет,
				 |	СУММА(0) КАК Факт
				 |ИЗ
				 |	РегистрНакопления.Счет_41_Адресный.Остатки КАК Счет_41_АдресныйОстатки
				 |ГДЕ
				 |	Счет_41_АдресныйОстатки.Адрес = &Адрес
				 |
				 |СГРУППИРОВАТЬ ПО
				 |	Счет_41_АдресныйОстатки.Номенклатура,
				 |	Счет_41_АдресныйОстатки.Адрес";
				 
				 Запрос.УстановитьПараметр("Адрес",Адрес);
			 КонецЕсли;
			 Результат = Запрос.Выполнить();
			 Выборка = Результат.Выбрать();
			 к = 0;
			 Пока Выборка.Следующий() Цикл
				 //товар = Справочники.Номенклатура.НайтиПоКоду(Выборка.Код);
				 //Если не товар.Пустая() Тогда
				 сост  = Документ.Состав.Добавить();
				 сост.Товар = Выборка.Товар;
				 сост.Адрес = Выборка.Адрес;
				 сост.Факт = Выборка.Факт;
				 сост.Учет = Выборка.Учет;
				 сост.Разница = Выборка.Факт - Выборка.Учет;
				 к = к + 1;
				 //КонецЕсли;
			 КонецЦикла;
			 Попытка
				 Документ.Записать(РежимЗаписиДокумента.Проведение);
			 Исключение
				 ошибка = "";
				 Попытка
					 ошибка = Документ.ДополнительныеСвойства.ОшибкаПриПроведении;	
				 Исключение
				 КонецПопытки;
				 Документ.Записать();
				 ВызватьИсключение ОписаниеОшибки()+" создан документ "+Документ.Номер+" но не проведен по причине:"+ошибка;
			 КонецПопытки;
			 
			 РазблокироватьАдрес(Адрес);			
			 перегрузитьрег();
			 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
			 Операция.Код          = "Успех";
			 Операция.Наименование = Документ.Номер;
			 Операция.Количество   = к;
			 ВходныеДанные.Номенклатура.Добавить(Операция);
			 ЗакрытьВсеКроме(Неопределено);
			 ЗаписатьЗначения("Потрачено на создание документа Инвентаризация операции инвентаризации",ТекущаяДатаМилисекунды() - ТекущиеМилисекунды,НомерПакета ,Истина)
			 
		 КонецЕсли;
		 //-------------------------------------------------------------------------------------------------------------	
		 //-----------------------------------------------------------------------------------------------------------------	
		 Если ВидОперации = "Список Сканов"  Тогда 
			 УдалитьРег("ВопросНаСтранице");
			 ТекущаяСтраница = Считатьрег("текущаяСтраница");
			 Если ТекущаяСтраница = 441 Тогда
				 ТаблицаСоставТТН = СЧитатьРег("ТаблицаСоставТТН");
				 Если ТаблицаСоставТТН = Неопределено Тогда 
					 ЗаписатьРег("текущаяСтраница",400);
					 ДобавитьСтроку(ВходныеДанные,"Выйти","Выйти",400);
					 Возврат ВходныеДанные;
				 КонецЕсли;
				 
				 Филиал = СЧитатьРег("Филиал");
				 НайденнаяСтрока = ТаблицаСоставТТН.Найти(Филиал);
				 Если НайденнаяСтрока = Неопределено тогда ВызватьИсключение "Ошибка получения состава ТТН"; КонецЕсли;
				 
				 Для каждого стр из Список.Номенклатура цикл
					 Кнопка = стр.Наименование;
					 //ЗаписатьРег("Тест"+стр.Код,стр.Наименование+" "+Строка(стр.Количество));	
					 Для каждого Колонка из ТаблицаСоставТТН.Колонки Цикл
						 Если Колонка.Заголовок = стр.Код Тогда
							 НайденнаяСтрока[Колонка.Имя] = стр.Количество;
						 КонецЕсли;
					 КонецЦикла;
				 КонецЦикла;
				 ЗаписатьРег("ТаблицаСоставТТН",ТаблицаСоставТТН);
				 СледующаяСтраница = 435;
				 Если Кнопка = "Завершить" Тогда 
					 СледующаяСтраница = 4;
					 //нужно создать ТТН тут 
					 Ошибка = "";
					 Попытка
						 СоздатьТТН(ТаблицаСоставТТН);
					 Исключение
						 Ошибка = ОписаниеОшибки();
						 ДобавитьСтроку(ВходныеДанные,"ВыйтиСОшибкой",Ошибка,СледующаяСтраница);
						 Если Найти(Ошибка,"создан документ") = 0 Тогда
							 Вызватьисключение Ошибка;
						 Иначе
							 УдалитьРег("ТаблицаСоставТТН");
							 ЗаписатьРег("текущаяСтраница",СледующаяСтраница);
						 КонецЕсли;
					 КонецПопытки;
					 УдалитьРег("ТаблицаСоставТТН");
				 КонецЕсли;
				 ЗаписатьРег("текущаяСтраница",СледующаяСтраница);
				 ДобавитьСтроку(ВходныеДанные,"Выйти","Выйти",СледующаяСтраница);
				 Возврат ВходныеДанные;
				 
				 
			 КонецЕсли;
			 РазгрузкаНачата = СчитатьРег("РазгрузкаНачата");
			 СотрудникиРазгрузки = Новый Массив();
			 Для каждого стр из Список.Номенклатура цикл
				 Данные = ПрочитатьШтрихКод(стр.Код);
				 Если Данные.типДанных = 0 Тогда
					 Сотрудник = справочники.Пользователи.НайтиПоКоду(Данные.Данные);
				 Иначе
					 Сотрудник = Справочники.Пользователи.НайтиПоКоду(стр.Код);
				 КонецЕсли; 
				 СотрудникиРазгрузки.Добавить(Сотрудник);
			 КонецЦикла;
			 Запрос = Новый Запрос;
			 Запрос.Текст = 
			 "ВЫБРАТЬ РАЗЛИЧНЫЕ
			 |	Пользователи.Ссылка КАК Сотрудник
			 |ИЗ
			 |	Справочник.Пользователи КАК Пользователи
			 |ГДЕ
			 |	Пользователи.Ссылка В(&Ссылка)
			 |	И (НЕ Пользователи.ПометкаУдаления)";
			 Запрос.УстановитьПараметр("Ссылка", СотрудникиРазгрузки);
			 СотрудникиРазгрузки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
			 
			 Если ТекущаяСтраница = 438 Тогда
				 Записатьрег("текущаяСтраница",435);	 
				 ЗаписатьРег("ВремяНачРазгрузки",ТекущаяДатаСервер());
			 КонецЕсли;
			 
			 Если ТекущаяСтраница = 538 и РазгрузкаНачата = Истина Тогда
				 ТТН = СчитатьРег("ВыбраннаяТТН");
				 Если ТТН = Неопределено Тогда	ВызватьИсключение "Не выбрана ТТН"; КонецЕсли;
				 ОбщийВес            = ТТН.ИтогоВес;
				 ОбщийОбъем          = ТТН.ИтогоОбъем;
				 Сотрудников = СотрудникиРазгрузки.Количество();
				 если Сотрудников = Неопределено или Сотрудников < 1 тогда ВызватьИсключение "Не выбраны сотрудники"; КонецЕсли;
				 ПривязатьСотрудниковПогрузкикТТН(ТТН,Перечисления.ВидыСкладскихОпераций.ВыгрузкаМашины);
				 
				 
				 //В1 = ОбщийВес/Сотрудников;
				 //О1 = ОбщийОбъем/ Сотрудников;
				 //ОбщееКоличествоМест          = ТТН.Состав.Итог("МестВсего");
				 //КоличествоРаспределенныхМест = 0;
				 //СреднееКоличествоМест        = Окр(ОбщееКоличествоМест / Сотрудников);
				 //Сч                           = 0;	
				 //НачалоОперации = СчитатьРег("ВремяНачРазгрузки");
				 //КонецОперации = ТекущаяДатаСервер();
				 //Для каждого Сотрудник из СотрудникиРазгрузки Цикл
				 //	РС = РегистрыСведений.УчетВыгрузкиПогрузкиМашины.СоздатьМенеджерЗаписи();
				 //	Вес = В1;
				 //	Объем = О1;
				 //	Сч = Сч + 1;
				 //	ЗаписатьРег("Сотрудник"+строка(Сч),Сотрудник);
				 //	Если Сч = Сотрудников Тогда
				 //   	 Мест = ОбщееКоличествоМест - КоличествоРаспределенныхМест;
				 //	Иначе
				 //   	 Мест = СреднееКоличествоМест; 				
				 //	КонецЕсли;			
				 //	КоличествоРаспределенныхМест = КоличествоРаспределенныхМест  + Мест;
				 //	///////////////////////////////////
				 //	РС.ТТН = ТТН.Ссылка;
				 //	РС.Сотрудник = Сотрудник;
				 //	РС.Автор = ПараметрыСеанса.глТекПользователь;
				 //	РС.ВидОперации = Перечисления.ВидыСкладскихОпераций.ВыгрузкаМашины;
				 //	РС.НачалоОперации = НачалоОперации;
				 //	РС.КонецОперации = КонецОперации;
				 //	РС.Мест         = Мест;
				 //	РС.Вес          = Вес;
				 //	РС.Объем        = Объем;
				 //	РС.Записать();	 
				 //КонецЦикла; 
				 ТТНОбъект = ТТН.ПолучитьОбъект();
				 
				 Для Каждого СтрокаСоставаТТН из ТТНОбъект.Состав Цикл
					 СтрокаСоставаТТН.Получено = истина;	
					 СтрокаСоставаТТН.ПолученоМест = СтрокаСоставаТТН.КоличествоМест;
				 КонецЦикла;
				 ТТНОбъект.Записать();
				 УдалитьРег("ВыбраннаяТТН");		
				 УдалитьРег("ВремяНачРазгрузки");
				 УдалитьРег("СотрудникиРазгрузки");
			 иначе
				 //Если ТекущаяСтраница = 538 Тогда 
				 ЗаписатьРег("ВремяНачРазгрузки",ТекущаяДатаСервер());
				 //КонецЕсли;
				 ЗаписатьРег("СотрудникиРазгрузки",СотрудникиРазгрузки);
			 КонецЕсли;
			 //Здесь необходимо записать в регистр тех кто разгружал ТТН
			 
			 
			 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
			 Операция.Код          = "Успех";
			 Операция.Наименование = " ";
			 Операция.Количество   = 0;
			 ВходныеДанные.Номенклатура.Добавить(Операция);
			 
		 КонецЕсли;
		 //-----------------------------------------------------------------------------------------------------------------	
		 //----------------------------------------------------------------------------------------------------------------	
		 ПроверкаКоличества = Ложь;
		 Если ВидОперации = "НайтиОстатокТовар" Тогда
			 ВидОперации = "НайтиТовар";
			 ПроверкаКоличества = Истина;
		 КонецЕсли;
		 Если ВидОперации = "НайтиТовар" Тогда
			 ВидыОпераций = Новый Массив();
			 ВидыОпераций.Добавить("Перемещение");
			 ВидыОпераций.Добавить("Инвентаризация");
			 ВидыОпераций.Добавить("Размещение");
			 //тут обработку сотрудников еще мутить
			 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
			 Наименование =	 Список.Номенклатура.Получить(0).Наименование;
			 Количество = Список.Номенклатура.Получить(0).Количество;
			 ШК = Список.Номенклатура.Получить(0).Код;
			 Код = ШК;
			 //Количество = цел(ччч/16);
			 //количество = ?(ПроверкаКоличества, цел(ччч/16),1);
			 //СтраницаСписка	 = 	?(ПроверкаКоличества, ччч - (количество * 16),ччч);
			 //ЗаписатьРег("СтраницаСписка",СтраницаСписка);
			 //ЗаписатьРег("ТекущаяОперацияТекст",ТекущаяОперацияТекст);
			 //ЗаписатьРег("НайтиТовар",ШК+" "+Наименование+" "+Строка(ччч));
			 ТекущаяСтраница = Считатьрег("текущаяСтраница");
			 СтраницаСписка	 = ТекущаяСтраница;//	ччч - (количество * 16);
			 //Отмена Список2
			 Если Найти(Код,"Отмена")>0 Тогда 
				 Записатьрег("текущаяСтраница",4);
				 УдалитьРег("ТаблицаСоставТТН");
				 УдалитьРег("ТаблицаВосстановленияСеанса");
				 ДобавитьСтроку( ВходныеДанные,"Выйти","Успех",4);
				 Возврат ВходныеДанные; 
			 КонецЕсли;
			 Если ТекущаяСтраница = 441 Тогда 
				 Если Количество < 0 тогда Количество = 0; КонецЕсли;
				 //ЗаписатьРег("441",ШК+" "+Наименование+" к="+Строка(количество-27));
				 ДобавитьСтроку(ВходныеДанные,"Выход","-",Количество);
				 Возврат ВходныеДанные;
			 КонецЕсли;
			 
			 Если ТекущаяСтраница = 538 или ТекущаяСтраница = 438 Тогда 
				 
				 Операция.Код          = "Ошибка";
				 Операция.Наименование = "Сканируйте бэйджики сотрудников";
				 Операция.Количество = 0;
				 Если Найти(Код,"Отмена")>0 Тогда ЗаписатьРег("текущаяСтраница",4); 
					 Операция.Код          = "Выход";
					 Операция.Наименование = "-";
					 Операция.Количество = 4;
					 
				 иначе
					 Данные = ПрочитатьШтрихКод(Код);
					 
					 Если Данные.типДанных = 0 Тогда
						 Сотрудник = справочники.Пользователи.НайтиПоКоду(Данные.Данные);
						 Операция.Код          = "vis"+Сотрудник.Код;
						 Операция.Наименование = Строка(Сотрудник);
						 Операция.Количество = -1;
					 КонецЕсли; 
				 КонецЕсли;
				 ВходныеДанные.Номенклатура.Добавить(Операция); 
				 Возврат ВходныеДанные;
				 
			 КонецЕсли;
			 
			 товар = ПолучитьТоварПоСчитанномуКоду2(ШК);
			 Если ТипЗнч(товар) = Тип("Массив") Тогда
				 //Интерактивный Вопрос пользователю
				 //ЗаписатьРег("ВопросНаСтранице",СтраницаСписка);
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "Вопрос";
				 Операция.Наименование = "Выберите товар";
				 Операция.Количество   = 0;
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 Для каждого стр из товар цикл
					 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
					 Операция.Код          = стр.Код;
					 Операция.Наименование = стр.Наименование;
					 Операция.Количество   = 0;
					 ВходныеДанные.Номенклатура.Добавить(Операция);
				 КонецЦикла;
				 ДобавитьСтроку(ВходныеДанные,"КонецСписка"," ",0);
				 
				 возврат ВходныеДанные;
			 КонецЕсли;
			 
			 // СтрСп = СчитатьРег("ВопросНаСтранице");
			 // Если не СтрСп = Неопределено Тогда
			 //	//УдалитьРег("ВопросНаСтранице"); 
			 //	СтраницаСписка = СтрСп;
			 //	Количество = 1;
			 //КонецЕсли;
			 //СтраницаСписка =  ПроверитьРег("ВопросНаСтранице",СтраницаСписка);
			 Попытка
				 ТекущаяОперацияТекст = ВидыОпераций.Получить(СтраницаСписка);
			 Исключение
				 ТекущаяОперацияТекст = "ДругаяОперация";
			 КонецПопытки;
			 //ЗаписатьРег("КолвоВход",количество);	
			 //УдалитьРег("ВопросНаСтранице");
			 
			 Если товар = Справочники.Номенклатура.ПустаяСсылка() или товар = Неопределено тогда
				 Данные = ПрочитатьШтрихКод(Код);
				 Ошибка = "Товар по коду не найден";
				 Если Данные.типДанных = 0 или Данные.типДанных = 7 или Данные.типДанных = 4 или Данные.типДанных = 11 Тогда
					 Ошибка = "Необходимо сканировать только EAN товара";
				 КонецЕсли;
				 Возврат ДобавитьСтроку(ВходныеДанные,"Ошибка",Ошибка,0);	 
				 
			 КонецЕсли;
			 
			 
			 //здесь проверяется весь товар сканированный или вручную из операций (Инвентаризация , перемещение , размещение с Т зоны)
			 ЗаписатьРег("ВыбТовар",товар);
			 //товар = справочники.Номенклатура.НайтиПоКоду(Список.Номенклатура.Получить(0).Код);
			 Адрес = ?(ТекущаяОперацияТекст = "Размещение","Т00-00-0",СчитатьРег("АдресПолки"));//проверитьадрес(Список.Номенклатура.Получить(0).Наименование));
			 
			 Запрос = Новый Запрос;
			 Запрос.Текст = 
			 "ВЫБРАТЬ
			 |	Счет_41_АдресныйОстатки.Номенклатура.Наименование КАК Наименование,
			 |	Счет_41_АдресныйОстатки.Номенклатура.Код КАК Код,
			 |	СУММА(Счет_41_АдресныйОстатки.КоличествоОстаток) КАК Количество
			 |ИЗ
			 |	РегистрНакопления.Счет_41_Адресный.Остатки(, ) КАК Счет_41_АдресныйОстатки
			 |ГДЕ
			 |	Счет_41_АдресныйОстатки.Адрес = &Адрес
			 //|	И (НЕ Счет_41_АдресныйОстатки.НеОприходованныйТовар)
			 |	И Счет_41_АдресныйОстатки.Номенклатура = &товар
			 |
			 |СГРУППИРОВАТЬ ПО
			 |	Счет_41_АдресныйОстатки.Номенклатура.Код,
			 |	Счет_41_АдресныйОстатки.Номенклатура.Наименование
			 |
			 |ИМЕЮЩИЕ
			 |	СУММА(Счет_41_АдресныйОстатки.КоличествоОстаток) > 0";
			 Запрос.УстановитьПараметр("Адрес",Адрес);
			 Запрос.УстановитьПараметр("товар",товар);
			 Результат = Запрос.Выполнить();
			 ВыборкаДетальныеЗаписи = Результат.Выбрать();
			 Операция.Код          = ?(ЗначениеЗаполнено(товар),?(не товар.ЭтоГруппа,товар.Код,"Error"),"Error");
			 Операция.Наименование = ?(ЗначениеЗаполнено(товар),?(не товар.ЭтоГруппа,товар.Наименование,"нельзя выбрать"+Символы.ВК+Символы.ПС+"товарную группу"),"По считанному коду"+Символы.ВК+Символы.ПС+"товар не найден"+Символы.ВК+Символы.ПС+"по считанному коду");
			 Операция.Количество   = Количество;  //Количество на экране = 0 Если это первый скан 
			 Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				 колво = ВыборкаДетальныеЗаписи.Количество;
				 Операция.Количество   = ?(Количество=0,ВыборкаДетальныеЗаписи.Количество,Количество);
			 КонецЕсли;
			 
			 Если  СтраницаСписка = 1 Тогда  //Инвентаризация 
				 Операция.Количество   = ?(количество=0,1,количество);
				 Иначе Попытка
					 Если Операция.Количество = 0 или Операция.Количество > колво  Тогда
						 Операция.Код          = "Error";
						 Операция.Наименование = "Товара недостаточно на полке";
					 КонецЕсли;
				 Исключение
					 Операция.Код          = "Error";
					 Операция.Наименование = "Товара недостаточно на полке "+Адрес;
					 
				 КонецПопытки;
			 КонецЕсли;
			 
			 Если количество > 0 Тогда
				 Если Операция.Количество < количество Тогда
					 Если  не СтраницаСписка = 1 Тогда
						 Операция.Код          = "Error";
						 Операция.Наименование = "Товара не достаточно на полке";
					 Иначе
						 Операция.Количество   = ?(количество=0,1,количество);
					 КонецЕсли;
					 
				 КонецЕсли;
				 
			 КонецЕсли;
			 
			 //-----------модуль восстановления сеанса-----------------
			 Если не Операция.Код  = "Error" Тогда
				 ТранспортРазгрузка = СчитатьРег("ТранспортРазгрузка");
				 ТранспортРазгрузка = СтрЗаменить(ТранспортРазгрузка ,"str","");
				 
				 ТекущаяОперация = ?(СтраницаСписка = 1,"Инвентаризация адреса "+Адрес,?(СтраницаСписка = 2  ,"Продолжить размещение","Переместить с адреса "+Адрес)); 
				 МодульВосстановленияСеанса(товар,Количество,?(СтраницаСписка = 2  ,ТранспортРазгрузка,Адрес),ТекущаяОперация,не ПроверкаКоличества);
			 КонецЕсли;
			 
			 ВходныеДанные.Номенклатура.Добавить(Операция);
			 
			 //ЗаписатьЗначения("Нахождение товара 41",ТекущаяДатаМилисекунды() - ТекущиеМилисекунды,НомерПакета ,Истина)
			 
		 КонецЕсли;
		 //-----------------------------------------------------------------------------		
		 Если ВидОперации = "ПользователиТСДОнлайн" Тогда
			 
			 Запрос = Новый Запрос;
			 Запрос.Текст = 
			 "ВЫБРАТЬ
			 |	ВебСервисТСД.Пользователь
			 |ИЗ
			 |	РегистрСведений.ВебСервисТСД КАК ВебСервисТСД
			 |ГДЕ
			 |	ВебСервисТСД.Переменная = ""Онлайн""";
			 
			 Результат = Запрос.Выполнить();
			 
			 ВыборкаДетальныеЗаписи = Результат.Выбрать();
			 
			 Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = Строка(ВыборкаДетальныеЗаписи.Пользователь);
				 Операция.Наименование = Строка(ВыборкаДетальныеЗаписи.Пользователь);
				 Операция.Количество   = 1;
				 ВходныеДанные.Номенклатура.Добавить(Операция);
			 КонецЦикла;
		 КонецЕсли;
		 //-------------------------------------------------------------------------------------		
		 Если ВидОперации = "ПолучитьОстатки" Тогда 
			 Наименование =	 Список.Номенклатура.Получить(0).Наименование;
			 Код  		 = 	 Список.Номенклатура.Получить(0).Код;
			 Адрес = проверитьадрес(Код);ШК = Адрес;
			 СтраницаСписка	 = 	 Список.Номенклатура.Получить(0).Количество;
			 ЗаписатьРег("СтраницаСписка",СтраницаСписка);
			 
			 Запрос = Новый Запрос;
			 Запрос.Текст = 
			 "ВЫБРАТЬ
			 |	Счет_41_АдресныйОстатки.Номенклатура.Наименование КАК Наименование,
			 |	Счет_41_АдресныйОстатки.Номенклатура.Код КАК Код,
			 |	СУММА(Счет_41_АдресныйОстатки.КоличествоОстаток) КАК Количество,
			 |	Счет_41_АдресныйОстатки.Номенклатура
			 |ПОМЕСТИТЬ ВТ
			 |ИЗ
			 |	РегистрНакопления.Счет_41_Адресный.Остатки(, ) КАК Счет_41_АдресныйОстатки
			 |ГДЕ
			 |	(Счет_41_АдресныйОстатки.Адрес = &Адрес
			 |			ИЛИ Счет_41_АдресныйОстатки.Адрес = &адр)
			 |	И (НЕ Счет_41_АдресныйОстатки.НеОприходованныйТовар)
			 |
			 |СГРУППИРОВАТЬ ПО
			 |	Счет_41_АдресныйОстатки.Номенклатура.Код,
			 |	Счет_41_АдресныйОстатки.Номенклатура.Наименование,
			 |	Счет_41_АдресныйОстатки.Номенклатура
			 |
			 |ИМЕЮЩИЕ
			 |	СУММА(Счет_41_АдресныйОстатки.КоличествоОстаток) > 0
			 |;
			 |
			 |////////////////////////////////////////////////////////////////////////////////
			 |ВЫБРАТЬ
			 |	ВТ.Наименование,
			 |	ВТ.Код,
			 |	ВТ.Количество,
			 |	МИНИМУМ(УчетКодовПроизводителя.Код) КАК Артикул
			 |ИЗ
			 |	ВТ КАК ВТ
			 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетКодовПроизводителя КАК УчетКодовПроизводителя
			 |		ПО ВТ.Номенклатура = УчетКодовПроизводителя.Товар1
			 |
			 |СГРУППИРОВАТЬ ПО
			 |	ВТ.Наименование,
			 |	ВТ.Код,
			 |	ВТ.Количество";
			 
			 Запрос.УстановитьПараметр("адр",Код);
			 Запрос.УстановитьПараметр("Адрес",Адрес);
			 Результат = Запрос.Выполнить();
			 ВыборкаДетальныеЗаписи = Результат.Выбрать();
			 Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = ВыборкаДетальныеЗаписи.Код;
				 Операция.Наименование = ВыборкаДетальныеЗаписи.Наименование;
				 Операция.Количество   = ВыборкаДетальныеЗаписи.Количество;
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 //
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "Артикул";
				 Операция.Наименование = Строка(ВыборкаДетальныеЗаписи.Артикул);
				 Операция.Количество   = 0;
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 
			 КонецЦикла;
			 //ЗаписатьЗначения("Получение остатков 41",ТекущаяДатаМилисекунды() - ТекущиеМилисекунды,НомерПакета ,Истина)
			 
		 КонецЕсли;
		 
		 Если ВидОперации = "Помощь" Тогда
			 //ВызватьИсключение "---ошибка ошибка тест---";
			 //Ответ = "Помощь по " + XMLЗначение(Новый ОписаниеТипов("ДвоичныеДанные"),Список.Номенклатура.Получить(0).Наименование)+" "+Список.Номенклатура.Получить(0).Код+" "+Строка(Список.Номенклатура.Получить(0).Количество);
			 ПрофильПочты = Новый ИнтернетПочтовыйПрофиль;
			 ПрофильПочты.АдресСервераSMTP = "mail.partner.ru";
			 ПрофильПочты.ПортSMTP = 25;
			 ПрофильПочты.Пользователь = "it_faq@dns-shop.ru";
			 ПрофильПочты.ПользовательSMTP = "it_faq";
			 ПрофильПочты.ВремяОжидания = 50000; 
			 ПрофильПочты.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
			 Почта = Новый ИнтернетПочта;
			 Сообщение = Новый ИнтернетПочтовоеСообщение;
			 Сообщение.ИмяОтправителя = "ТСД";
			 Сообщение.Тема = "Скрин "+ИмяПользователя();
			 Сообщение.Тексты.Очистить();
			 Сообщение.Отправитель = "it_faq@dns-shop.ru";
			 Сообщение.Получатели.Добавить("zenkov@dns-shop.ru");
			 Сообщение.Получатели.Добавить("zheludkov@dns-shop.ru");
			 Сообщение.Тексты.Добавить("Снимок экрана");
			 Сообщение.Вложения.Добавить(XMLЗначение(Тип("ДвоичныеДанные"),Список.Номенклатура.Получить(0).Наименование));
			 Почта.Подключиться(ПрофильПочты);
			 Почта.Послать(Сообщение);
			 Почта.Отключиться();
			 
			 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
			 Операция.Код          = "Error";
			 Операция.Наименование = "Ответ";
			 Операция.Количество   = 0;
			 ВходныеДанные.Номенклатура.Добавить(Операция);
			 
		 КонецЕсли;
		 
	 Исключение
		 ТекстПисьма = 	"Наименование:"+Строка(Наименование)+
		 "  Код:"+Строка(Код)+
		 "  Количество:"+Строка(Количество)+
		 "  Адрес:"+Строка(СчитатьРег("Адрес"))+" ВидОперации:"+ВидОперации+" Ошибка:"+ОписаниеОшибки();
		 ПослатьПисьмо(ТекстПисьма);
		 ЗаписатьРег("Ошибка",ОписаниеОшибки());
		 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
		 Операция.Код          = "Error";
		 Операция.Наименование = ОписаниеОшибки();
		 Операция.Количество   = 0;
		 ВходныеДанные.Номенклатура.Добавить(Операция);
	 КонецПопытки;
	 //ЗаписатьЗначения("Потрачено другие операции в базе",ТекущаяДатаМилисекунды() - ТекущиеМилисекунды,НомерПакета ,Истина);
	 Возврат ВходныеДанные;
 КонецФункции
 
 Функция updatefirmware(version) //эта функция всего-лишь следит за обновлениями и возвращает в формате base64 файл с новой версией программы для ТСД // есть мысль еще сжать файл UPX :^) 
	 Если Число(version)>=86 Тогда возврат неопределено; КонецЕсли; 
	 шиванистаяшиванинка = ПолучитьОбщийМакет(Метаданные.ОбщиеМакеты.ТСД_прошивка);
	 возврат шиванистаяшиванинка;
 КонецФункции
 
 Функция	МодульВосстановленияСеанса(товар,Количество,Адрес,Операция,Добавить = Ложь)
	 ТаблицаВосстановленияСеанса = Новый ТаблицаЗначений();
	 ЧТИП = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(0, 0, ДопустимыйЗнак.Любой));
	 ТИПТОВАР =  Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	 ТИПСТРОКА =  Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная));
	 ТИПВРЕМЯ = Новый ОписаниеТипов("Дата", , ,	Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	 ТаблицаВосстановленияСеанса.Колонки.Добавить("Товар", ТИПТОВАР,"Товар",1);
	 ТаблицаВосстановленияСеанса.Колонки.Добавить("Транспорт", ТИПСТРОКА,"",0);
	 ТаблицаВосстановленияСеанса.Колонки.Добавить("Количество", ЧТИП,"Количество",1);
	 ТаблицаВосстановленияСеанса.Колонки.Добавить("Адрес", ТИПСТРОКА,"Адрес",0);
	 ТаблицаВосстановленияСеанса.Колонки.Добавить("Операция", ТИПСТРОКА,"Операция",0);
	 
	 ТаблицаВосстановленияСеанса = ЧитатьРег("ТаблицаВосстановленияСеанса",ТаблицаВосстановленияСеанса);
	 НоваяСтрока = ТаблицаВосстановленияСеанса.Найти(товар,"Товар");
	 Если  НоваяСтрока = Неопределено ТОгда 
	 	НоваяСтрока = ТаблицаВосстановленияСеанса.Добавить();
		БылоКоличество = 0;
	иначе
		БылоКоличество = НоваяСтрока.Количество;
	 КонецЕсли;
	 НоваяСтрока.Товар = Товар;
	 //НоваяСтрока.Время = ТекущаяДата();
	  
	 НоваяСтрока.Количество = Количество + ?(Добавить,БылоКоличество ,0 );
	 НоваяСтрока.Адрес = Адрес;
	 НоваяСтрока.Операция = Операция;
	 ЗаписатьРег("ТаблицаВосстановленияСеанса",ТаблицаВосстановленияСеанса);
	 Возврат ТаблицаВосстановленияСеанса;
 КонецФункции
 
 ///////////////////////////////////////////////////////////////////////////////////////
 //Дефрагментация==============================================================
 Функция ЕстьЗаданияДефрагментации(Список)
	 
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ ПЕРВЫЕ 1
	 |	ЗаданияНаДефрагментацию.КлючУникальности
	 |ИЗ
	 |	РегистрСведений.ЗаданияНаДефрагментацию КАК ЗаданияНаДефрагментацию
	 |ГДЕ
	 |	ЗаданияНаДефрагментацию.Статус = Значение(Перечисление.СтатусыЗаданийКладовщиков.ЗаданиеСоздано)";
	 Результат = Запрос.Выполнить().Выбрать();
	 
	 Возврат ПолучитьМоеЗаданиеДефрагментация(ПараметрыСеанса.глТекПользователь).Следующий() или Результат.Следующий() или ПолучитьМоеЗаданиеДефрагментацияСобрано(ПараметрыСеанса.глТекПользователь).Следующий();
 КонецФункции
 //Дефрагментация
 Функция ПолучитьМоеЗаданиеДефрагментация(Автор)
	 ЗапросЗаданий = Новый Запрос("ВЫБРАТЬ
	 |	ЗаданияНаДефрагментацию.Товар КАК Товар,
	 |	СУММА(ЗаданияНаДефрагментацию.ТребуемоеКоличество) КАК Количество,
	 |	ЗаданияНаДефрагментацию.АдресХранения КАК Адрес
	 |ПОМЕСТИТЬ ВТ_Задание
	 |ИЗ
	 |	РегистрСведений.ЗаданияНаДефрагментацию КАК ЗаданияНаДефрагментацию
	 |ГДЕ
	 |	ЗаданияНаДефрагментацию.Исполнитель = &Автор
	 |	И ЗаданияНаДефрагментацию.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.ВПодборе)
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ЗаданияНаДефрагментацию.Товар,
	 |	ЗаданияНаДефрагментацию.АдресХранения
	 |
	 |ИМЕЮЩИЕ
	 |	СУММА(ЗаданияНаДефрагментацию.ТребуемоеКоличество) > 0
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ВТ_Задание.Товар,
	 |	ВТ_Задание.Количество КАК Количество,
	 |	ВТ_Задание.Адрес КАК Адрес,
	 |	МАКСИМУМ(УчетКодовПроизводителя.Код) КАК Код
	 |ИЗ
	 |	ВТ_Задание КАК ВТ_Задание
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетКодовПроизводителя КАК УчетКодовПроизводителя
	 |		ПО ВТ_Задание.Товар = УчетКодовПроизводителя.Товар1
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ВТ_Задание.Товар,
	 |	ВТ_Задание.Количество,
	 |	ВТ_Задание.Адрес
	 |ИТОГИ
	 |	СУММА(Количество)
	 |ПО
	 |	Адрес
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ ВТ_Задание");		
	 
	 ЗапросЗаданий.УстановитьПараметр("Автор", Автор);
	 ЗапросЗаданий.УстановитьПараметр("Секция", СчитатьРег("Секция"));
	 возврат ЗапросЗаданий.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
 КонецФункции
 //Дефрагментация
 Функция ПолучитьМоеЗаданиеДефрагментацияСобрано(Автор)
	 ЗапросЗаданий = Новый Запрос("ВЫБРАТЬ
	 |	ЗаданияНаДефрагментацию.Товар КАК Товар,
	 |	СУММА(ЗаданияНаДефрагментацию.ТребуемоеКоличество) КАК Количество,
	 |	ЗаданияНаДефрагментацию.АдресПодбора КАК Адрес
	 |ПОМЕСТИТЬ ВТ_Задания
	 |ИЗ
	 |	РегистрСведений.ЗаданияНаДефрагментацию КАК ЗаданияНаДефрагментацию
	 |ГДЕ
	 |	ЗаданияНаДефрагментацию.Исполнитель = &Автор
	 |	И ЗаданияНаДефрагментацию.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.Собрано)
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ЗаданияНаДефрагментацию.Товар,
	 |	ЗаданияНаДефрагментацию.НомерЗадания,
	 |	ЗаданияНаДефрагментацию.АдресПодбора
	 |
	 |ИМЕЮЩИЕ
	 |	СУММА(ЗаданияНаДефрагментацию.ТребуемоеКоличество) > 0
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ВТ_Задания.Товар,
	 |	ВТ_Задания.Количество КАК Количество,
	 |	ВТ_Задания.Адрес КАК Адрес,
	 |	МАКСИМУМ(УчетКодовПроизводителя.Код) КАК Код
	 |ИЗ
	 |	ВТ_Задания КАК ВТ_Задания
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетКодовПроизводителя КАК УчетКодовПроизводителя
	 |		ПО ВТ_Задания.Товар = УчетКодовПроизводителя.Товар1
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ВТ_Задания.Товар,
	 |	ВТ_Задания.Количество,
	 |	ВТ_Задания.Адрес
	 |ИТОГИ
	 |	СУММА(Количество)
	 |ПО
	 |	Адрес");		
	 
	 ЗапросЗаданий.УстановитьПараметр("Автор", Автор);
	 ЗапросЗаданий.УстановитьПараметр("Секция", СчитатьРег("Секция"));
	 возврат ЗапросЗаданий.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
 КонецФункции
 //Дефрагментация
 Функция ПолучитьСекциюЗаданияДефрагментация(Автор)
	 ЗапросЗаданий = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	 |	СУММА(ЗаданияНаДефрагментацию.ТребуемоеКоличество) КАК Количество,
	 |	ПОДСТРОКА(ЗаданияНаДефрагментацию.АдресПодбора, 1, 6) КАК Адрес
	 |ИЗ
	 |	РегистрСведений.ЗаданияНаДефрагментацию КАК ЗаданияНаДефрагментацию
	 |ГДЕ
	 |	ЗаданияНаДефрагментацию.Исполнитель = &Автор
	 |	И (ЗаданияНаДефрагментацию.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.ВПодборе)
	 |			ИЛИ ЗаданияНаДефрагментацию.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.Собрано))
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ПОДСТРОКА(ЗаданияНаДефрагментацию.АдресПодбора, 1, 6)
	 |
	 |ИМЕЮЩИЕ
	 |	СУММА(ЗаданияНаДефрагментацию.ТребуемоеКоличество) > 0");		
	 
	 ЗапросЗаданий.УстановитьПараметр("Автор", Автор);
	 возврат ЗапросЗаданий.Выполнить().Выбрать();
 КонецФункции
 //Дефрагментация
 Функция СканСобраноДефрагментацииОбщий(Данные,Количество)	
	 ШтрихКод = СокрЛП(Данные);
	 Автор = ПараметрыСеанса.глТекПользователь;
	 Структура = ПрочитатьШтрихКод(ШтрихКод);
	 ДинамическаяЯчейка = СчитатьРег("ДинамическаяЯчейка");
	 Адрес = СчитатьРег("Адрес");
	 ЗаписатьРег("СчитаныйШК.ТипДанных",Структура.ТипДанных);
	 
	 ПроверитьДинамическуюЯчейку(Структура);
	 
	 Если Структура.ТипДанных = 0 Тогда
		 Возврат "Ненужно сканировать бэйджик";
		 
	 ИначеЕсли Структура.ТипДанных = 11 Тогда // Складской транспорт	
		 ДинамическаяЯчейка = Структура.Данные;	
		 // Проверка на клиента
		 ЗапросДЯ = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		 |	ЗаданияНаДефрагментацию.Исполнитель КАК Автор,
		 |	ЗаданияНаДефрагментацию.АдресПодбора КАК Клиент
		 //|ПОМЕСТИТЬ Задания
		 |ИЗ
		 |	РегистрСведений.ЗаданияНаДефрагментацию КАК ЗаданияНаДефрагментацию
		 |ГДЕ
		 |	ЗаданияНаДефрагментацию.Исполнитель <> &Автор
		 |	И ЗаданияНаДефрагментацию.ДинамическаяЯчейка = &ДинамическаяЯчейка
		 |
		 |ОБЪЕДИНИТЬ
		 |
		 |ВЫБРАТЬ Первые 1
		 |	ЗаданияКладовщикам2.Автор,
		 |	ЗаданияКладовщикам2.Клиент
		 |ИЗ
		 |	РегистрСведений.ЗаданияКладовщикам2 КАК ЗаданияКладовщикам2
		 |ГДЕ
		 |	ЗаданияКладовщикам2.ДинамическаяЯчейка = &ДинамическаяЯчейка
		 |	И ЗаданияКладовщикам2.Исполнитель <> &Автор
		 |	И ЗаданияКладовщикам2.Автор <> &Автор
		 |	И ЗаданияКладовщикам2.Исполнитель2 <> &Автор" );
		 
		 ЗапросДЯ.УстановитьПараметр("ДинамическаяЯчейка", ДинамическаяЯчейка);										   
		 ЗапросДЯ.УстановитьПараметр("Автор", Автор);										   
		 
		 РезультатЗапроса = ЗапросДЯ.Выполнить();
		 
		 Если НЕ РезультатЗапроса.Пустой() Тогда
			 
			 Выборка = РезультатЗапроса.Выбрать();	
			 
			 Выборка.Следующий();
			 
			 КлиентСкладскогоТранспорта = Выборка.Клиент;
			 ОсвободитьДинамическуюЯчейку();
			 //ЗаписатьРег("ДинамическаяЯчейка","");
			 Возврат "Выбранный динамическая"+Символы.ВК+Символы.ПС+"ячейка уже используется"+Символы.ВК+Символы.ПС+"для подбора"+Символы.ВК+Символы.ПС+КлиентСкладскогоТранспорта+Символы.ВК+Символы.ПС+Выборка.Автор;
			 
		 КонецЕсли;
		 Ответ = ПолучитьДинамическуюЯчейку(ДинамическаяЯчейка,"Дефрагментации");	
		 Если не ПустаяСтрока(Ответ) ТОгда
			 Возврат Ответ;	
			 
		 КонецЕсли;
		 //ЗаписатьРег("ДинамическаяЯчейка",ДинамическаяЯчейка);	
		 
	 ИначеЕсли Структура.ТипДанных = 4 Тогда // Адрес 
		 ЗаписатьРег("СтарАдрес",Адрес);
		 Зона =  Сред("АБВГДЕЖЗИКЛМНОПРСТУФХЦЧЩШЮЭЯ", Число(Сред(Данные,4,2)), 1);
		 Адрес = Зона + Сред(Данные,6,2) + "-" + Сред(Данные,8,2) + "-" + Сред(Данные,10,1);
		 Если ЗначениеЗаполнено(Адрес) И ТипЗНЧ(Адрес) = Тип("Строка") И СтрДлина(Адрес) = 8 Тогда
			 // + Проверка на правильность заполнения адреса
			 Адреса = РегистрыСведений.АдресаМестХранения;
			 ОтборАдреса = Новый Структура("Адрес");
			 ОтборАдреса.Адрес = Адрес;
			 
			 ВыборкаАдреса = Адреса.Выбрать(ОтборАдреса);
			 Если НЕ ВыборкаАдреса.Следующий() Тогда	
				 Возврат "Указанного адреса"+Символы.ВК+Символы.ПС+"не существует!";
			 КонецЕсли;
			 ЗаписатьРег("Адрес",Адрес);
		 Иначе	
			 Возврат "Введены некорректные"+Символы.ВК+Символы.ПС+"параметры адреса!";
		 КонецЕсли;						
	 ИначеЕсли Структура.ТипДанных = 3 Тогда // Товар
		 
		 
		 Если НЕ ЗначениеЗаполнено(Адрес) Тогда
			 Возврат "Перед считыванием товара"+Символы.ВК+Символы.ПС+"необходимо считать адрес!";
		 КонецЕсли;	
		 
		 Возврат ПодборТовараПоШКДефрагментацияСобрано(ШтрихКод,Автор,Количество);	
		 
	 КонецЕсли;		
	 
 КонецФункции
 //Дефрагментация
 Функция СканЗаданияДефрагментацииОбщий(Данные,Количество)	
	 ШтрихКод = СокрЛП(Данные);
	 Автор = ПараметрыСеанса.глТекПользователь;
	 Структура = ПрочитатьШтрихКод(ШтрихКод);
	 ДинамическаяЯчейка = СчитатьРег("ДинамическаяЯчейка");
	 Адрес = СчитатьРег("Адрес");
	 ЗаписатьРег("СчитаныйШК.ТипДанных",Структура.ТипДанных);
	 ПроверитьДинамическуюЯчейку(Структура);
	 Если Структура.ТипДанных = 0 Тогда
		 Возврат "Ненужно сканировать бэйджик";
		 
	 ИначеЕсли Структура.ТипДанных = 11 Тогда // Складской транспорт	
		 ДинамическаяЯчейка = Структура.Данные;	
		 // Проверка на клиента
		 ЗапросДЯ = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		 |	ЗаданияНаДефрагментацию.Исполнитель КАК Автор,
		 |	ЗаданияНаДефрагментацию.АдресПодбора КАК Клиент
		 |//ПОМЕСТИТЬ Задания
		 |ИЗ
		 |	РегистрСведений.ЗаданияНаДефрагментацию КАК ЗаданияНаДефрагментацию
		 |ГДЕ
		 |	ЗаданияНаДефрагментацию.Исполнитель <> &Автор
		 |	И ЗаданияНаДефрагментацию.ДинамическаяЯчейка = &ДинамическаяЯчейка
		 |
		 |ОБЪЕДИНИТЬ
		 |
		 |ВЫБРАТЬ ПЕРВЫЕ 1
		 |	ЗаданияКладовщикам2.Автор,
		 |	ЗаданияКладовщикам2.Клиент
		 |ИЗ
		 |	РегистрСведений.ЗаданияКладовщикам2 КАК ЗаданияКладовщикам2
		 |ГДЕ
		 |	ЗаданияКладовщикам2.ДинамическаяЯчейка = &ДинамическаяЯчейка
		 |	И ЗаданияКладовщикам2.Исполнитель <> &Автор
		 |	И ЗаданияКладовщикам2.Автор <> &Автор
		 |	И ЗаданияКладовщикам2.Исполнитель2 <> &Автор");
		 
		 ЗапросДЯ.УстановитьПараметр("ДинамическаяЯчейка", ДинамическаяЯчейка);										   
		 ЗапросДЯ.УстановитьПараметр("Автор", Автор);										   
		 
		 РезультатЗапроса = ЗапросДЯ.Выполнить();
		 
		 Если НЕ РезультатЗапроса.Пустой() Тогда
			 
			 Выборка = РезультатЗапроса.Выбрать();	
			 
			 Выборка.Следующий();
			 
			 КлиентСкладскогоТранспорта = Выборка.Клиент;
			 //ЗаписатьРег("ДинамическаяЯчейка","");
			 ОсвободитьДинамическуюЯчейку();
			 Возврат "Выбранный складской"+Символы.ВК+Символы.ПС+"транспорт уже используется"+Символы.ВК+Символы.ПС+"для подбора"+Символы.ВК+Символы.ПС+КлиентСкладскогоТранспорта+Символы.ВК+Символы.ПС+Выборка.Автор;
			 
		 КонецЕсли;
		 Ответ = ПолучитьДинамическуюЯчейку(ДинамическаяЯчейка,"Дефрагментации");	
		 Если не ПустаяСтрока(Ответ) ТОгда
			 Возврат Ответ;	
			 
		 КонецЕсли;
		 //ЗаписатьРег("ДинамическаяЯчейка",ДинамическаяЯчейка);	
		 
	 ИначеЕсли Структура.ТипДанных = 4 Тогда // Адрес 
		 Зона =  Сред("АБВГДЕЖЗИКЛМНОПРСТУФХЦЧЩШЮЭЯ", Число(Сред(Данные,4,2)), 1);
		 Адрес = Зона + Сред(Данные,6,2) + "-" + Сред(Данные,8,2) + "-" + Сред(Данные,10,1);
		 Если ЗначениеЗаполнено(Адрес) И ТипЗНЧ(Адрес) = Тип("Строка") И СтрДлина(Адрес) = 8 Тогда
			 // + Проверка на правильность заполнения адреса
			 Адреса = РегистрыСведений.АдресаМестХранения;
			 ОтборАдреса = Новый Структура("Адрес");
			 ОтборАдреса.Адрес = Адрес;
			 
			 ВыборкаАдреса = Адреса.Выбрать(ОтборАдреса);
			 Если НЕ ВыборкаАдреса.Следующий() Тогда	
				 Возврат "Указанного адреса"+Символы.ВК+Символы.ПС+"не существует!";
			 КонецЕсли;
			 ЗаписатьРег("Адрес",Адрес);
		 Иначе	
			 Возврат "Введены некорректные"+Символы.ВК+Символы.ПС+"параметры адреса!";
		 КонецЕсли;						
	 ИначеЕсли Структура.ТипДанных = 3 Тогда // Товар
		 
		 
		 Если НЕ ЗначениеЗаполнено(Адрес) Тогда
			 Возврат "Перед считыванием товара"+Символы.ВК+Символы.ПС+"необходимо считать адрес!";
		 КонецЕсли;	
		 
		 Возврат ПодборТовараПоШКДефрагментация(ШтрихКод,Автор,Количество);	
		 
	 КонецЕсли;		
	 
 КонецФункции
 //Дефрагментация
 Функция ЗакрытьДефрагментациюСВычеркамиСобрано(ТоварСтроки,Количество)
	 //Клиент = СчитатьРег("Клиент");
	 ТекущийФилиал = Константы.ТекущийСклад.Получить();
	 Автор = ПараметрыСеанса.глТекПользователь;
	 ДинамическаяЯчейка = СчитатьРег("ДинамическаяЯчейка");
	 Адрес = СчитатьРег("Адрес");
	 //НомерЗаданияНаПодбор = СчитатьРег("НомерЗаданияНаПодбор");
	 
	 Попытка
		 //НачатьТранзакцию();
		 // Закрытие заданий
		 Запрос = Новый Запрос("ВЫБРАТЬ
		 |	ЗаданияНаДефрагментацию.КлючУникальности КАК КлючУникальности
		 |ИЗ
		 |	РегистрСведений.ЗаданияНаДефрагментацию КАК ЗаданияНаДефрагментацию
		 |ГДЕ
		 |	ЗаданияНаДефрагментацию.Товар = &Товар
		 |	И ЗаданияНаДефрагментацию.Исполнитель = &Автор
		 |	И ЗаданияНаДефрагментацию.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.Собрано)
		 |	//И ( ЗаданияНаДефрагментацию.АдресХранения = &Адрес или ЗаданияНаДефрагментацию.АдресХранения = &СтарАдрес)");
		 
		 Запрос.УстановитьПараметр("Автор", Автор);
		 Запрос.УстановитьПараметр("ДинамическаяЯчейка", ДинамическаяЯчейка);
		 Запрос.УстановитьПараметр("Товар", ТоварСтроки);
		 Запрос.УстановитьПараметр("Адрес", Адрес);			
		 Запрос.УстановитьПараметр("СтарАдрес",Считатьрег("СтарАдрес"));			
		 Результат = Запрос.Выполнить();
		 
		 Если НЕ Результат.Пустой() Тогда
			 
			 Выборка = Результат.Выбрать();
			 
			 Пока Выборка.Следующий() Цикл
				 
				 // Запись в регистр
				 МЗ = РегистрыСведений.ЗаданияНаДефрагментацию.СоздатьМенеджерЗаписи();
				 МЗ.КлючУникальности = Выборка.КлючУникальности;
				 
				 МЗ.Прочитать();
				 
				 Если МЗ.Выбран() Тогда
					 
					 МЗ.ВремяЗавершенияЗадания = ТекущаяДатаСервер();
					 МЗ.Статус = Перечисления.СтатусыЗаданийКладовщиков.Вычерк;
					 МЗ.Исполнитель = Автор;
					 МЗ.Записать();
					 ЗаписатьВТранзакции(МЗ);
					 //СписатьЖесткийРезерв(МЗ);
					 ЗаписатьРег("ЗаписьР.КлючУникальности",Выборка.КлючУникальности);
					 
				 КонецЕсли;
				 
			 КонецЦикла;
			 
		 КонецЕсли;
		 
		 
		 //ЗафиксироватьТранзакцию();
	 Исключение
		 
		 //ОтменитьТранзакцию();
		 
		 Возврат ОписаниеОшибки();				
	 КонецПопытки;	
	 
	 Возврат "";		
 КонецФункции
 //Дефрагментация
 Функция ЗакрытьДефрагментациюСВычерками(ТоварСтроки,Количество)
	 //Клиент = СчитатьРег("Клиент");
	 ТекущийФилиал = Константы.ТекущийСклад.Получить();
	 Автор = ПараметрыСеанса.глТекПользователь;
	 ДинамическаяЯчейка = СчитатьРег("ДинамическаяЯчейка");
	 Адрес = СчитатьРег("Адрес");
	 //НомерЗаданияНаПодбор = СчитатьРег("НомерЗаданияНаПодбор");
	 //~Транзакция2:	
	 Попытка
		 //НачатьТранзакцию();
		 // Закрытие заданий
		 Запрос = Новый Запрос("ВЫБРАТЬ
		 |	ЗаданияНаДефрагментацию.КлючУникальности КАК КлючУникальности
		 |ИЗ
		 |	РегистрСведений.ЗаданияНаДефрагментацию КАК ЗаданияНаДефрагментацию
		 |ГДЕ
		 |	ЗаданияНаДефрагментацию.Товар = &Товар
		 |	И ЗаданияНаДефрагментацию.Исполнитель = &Автор
		 |	И ЗаданияНаДефрагментацию.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.ВПодборе)
		 |	И ЗаданияНаДефрагментацию.АдресХранения = &Адрес");
		 
		 Запрос.УстановитьПараметр("Автор", Автор);
		 Запрос.УстановитьПараметр("ДинамическаяЯчейка", ДинамическаяЯчейка);
		 Запрос.УстановитьПараметр("Товар", ТоварСтроки);
		 Запрос.УстановитьПараметр("Адрес", Адрес);			
		 Результат = Запрос.Выполнить();
		 
		 Если НЕ Результат.Пустой() Тогда
			 
			 Выборка = Результат.Выбрать();
			 
			 Пока Выборка.Следующий() Цикл
				 
				 // Запись в регистр
				 МЗ = РегистрыСведений.ЗаданияНаДефрагментацию.СоздатьМенеджерЗаписи();
				 МЗ.КлючУникальности = Выборка.КлючУникальности;
				 
				 МЗ.Прочитать();
				 
				 Если МЗ.Выбран() Тогда
					 
					 МЗ.ВремяЗавершенияЗадания = ТекущаяДатаСервер();
					 МЗ.Статус = Перечисления.СтатусыЗаданийКладовщиков.Вычерк;
					 МЗ.Исполнитель = Автор;
					 //МЗ.Записать();
					 ЗаписатьВТранзакции(МЗ);
					 //СписатьЖесткийРезерв(МЗ);
					 ЗаписатьРег("ЗаписьР.КлючУникальности",Выборка.КлючУникальности);
					 
				 КонецЕсли;
				 
			 КонецЦикла;
			 
		 КонецЕсли;
		 
		 
		 //ЗафиксироватьТранзакцию();
	 Исключение
		 
		 Возврат ОписаниеОшибки();				
	 КонецПопытки;	
	 
	 Возврат "";		
 КонецФункции
 //Дефрагментация
 Функция ПодборТовараПоШКДефрагментацияСобрано(Код,Автор,Количество)
	 Список = ПолучитьСписокТовараПоСчитаномуКоду(Код);
	 
	 Если Список.Количество()=0  Тогда
		 Запрос = Новый Запрос;
		 Запрос.Текст = 
		 "ВЫБРАТЬ
		 |	СерийныеНомера.Товар,
		 |	СерийныеНомера.Поставщик
		 |ИЗ
		 |	РегистрСведений.СерийныеНомера КАК СерийныеНомера
		 |ГДЕ
		 |	СерийныеНомера.СерийныйНомер = &Код";
		 Запрос.УстановитьПараметр("Код", Код);
		 Результат = Запрос.Выполнить();
		 ВыборкаДетальныеЗаписи = Результат.Выбрать();
		 Если не ВыборкаДетальныеЗаписи.Следующий() Тогда Возврат "Не найден товар по считанному коду!"; КонецЕсли;
		 список.Добавить(ВыборкаДетальныеЗаписи.Товар);
		 поставщик = ВыборкаДетальныеЗаписи.Поставщик;
	 КонецЕсли;
	 Если Список.Количество()>1  Тогда
		 ЗаписатьРег("СписокВыбораТовара",Список);
		 возврат "Выбор";
	 КонецЕсли;
	 
	 
	 ВыбТовар = Неопределено;		
	 Если Список.Количество() > 0 Тогда		
		 ВыбТовар = Список.Получить(0);//.Значение;
	 КонецЕсли;
	 ЗаписатьРег("ВыбТовар",ВыбТовар);
	 
	 ШКОбработан = ЗначениеЗаполнено(ВыбТовар);
	 Если НЕ ШКОбработан Тогда
		 Возврат "Не найден товар по считанному коду!";
	 КонецЕсли;
	 ЗапросЗаданий = Новый Запрос;
	 ЗапросЗаданий.Текст ="ВЫБРАТЬ
	 |	СУММА(ЗаданияНаДефрагментацию.ТребуемоеКоличество) КАК ТребуемоеКоличество
	 |ИЗ
	 |	РегистрСведений.ЗаданияНаДефрагментацию КАК ЗаданияНаДефрагментацию
	 |ГДЕ
	 |	ЗаданияНаДефрагментацию.Товар = &Товар
	 |	И ЗаданияНаДефрагментацию.Исполнитель = &Автор
	 |	И ЗаданияНаДефрагментацию.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.Собрано)
	 |
	 |ИМЕЮЩИЕ
	 |	СУММА(ЗаданияНаДефрагментацию.ТребуемоеКоличество) < &Количество";		
	 
	 ЗапросЗаданий.УстановитьПараметр("Адрес", Считатьрег("Адрес"));
	 ЗапросЗаданий.УстановитьПараметр("СтарАдрес", Считатьрег("СтарАдрес"));
	 ЗапросЗаданий.УстановитьПараметр("Товар", ВыбТовар);
	 ЗапросЗаданий.УстановитьПараметр("Количество", Количество);
	 ЗапросЗаданий.УстановитьПараметр("Автор", Автор);
	 //ЗапросЗаданий.УстановитьПараметр("НомерЗадания", СчитатьРег("НомерЗаданияНаПодбор"));
	 Выборка = ЗапросЗаданий.Выполнить().Выбрать();
	 Если Выборка.Следующий() Тогда
		 Возврат "Нехватает "+Строка(Количество-Выборка.ТребуемоеКоличество)+" шт.";
	 КонецЕсли;	
	 
	 ЗапросЗаданий.Текст ="ВЫБРАТЬ
	 |	ЗаданияНаДефрагментацию.КлючУникальности
	 |ИЗ
	 |	РегистрСведений.ЗаданияНаДефрагментацию КАК ЗаданияНаДефрагментацию
	 |ГДЕ
	 |	ЗаданияНаДефрагментацию.Товар = &Товар
	 |	И ЗаданияНаДефрагментацию.Исполнитель = &Автор
	 |	И ЗаданияНаДефрагментацию.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.Собрано)
	 |	//И (ЗаданияНаДефрагментацию.АдресПодбора = &Адрес или ЗаданияНаДефрагментацию.АдресПодбора = &СтарАдрес)";		
	 
	 
	 
	 таблица = ЗапросЗаданий.Выполнить().Выбрать();
	 Если не таблица.Следующий() Тогда 
		 Возврат "отсутствует в задании на подтоварку";
	 КонецЕсли;
	 Если 	 Количество < 0 Тогда возврат ЗакрытьДефрагментациюСВычеркамиСобрано(ВыбТовар,-Количество); КонецЕсли;
	 ДинамическаяЯчейка = СчитатьРег("ДинамическаяЯчейка");
	 ОставшеесяКоличество = Количество;
	 Ответ = "";
	 таблица.Сбросить();
	 //НачатьТранзакцию();
	 пока таблица.Следующий() и ОставшеесяКоличество>0 Цикл
		 ЗаписьР = РегистрыСведений.ЗаданияНаДефрагментацию.СоздатьМенеджерЗаписи();    
		 ЗаписьР.КлючУникальности = Таблица.КлючУникальности;
		 ЗаписьР.Прочитать();
		 Если ЗаписьР.Выбран() Тогда 
			 Если ОставшеесяКоличество >= ЗаписьР.ТребуемоеКоличество Тогда
				 ЗаписьР.Перемещено = ЗаписьР.ТребуемоеКоличество;
				 ЗаписьР.Исполнитель = Автор;
				 ЗаписьР.ВремяЗавершенияЗадания = ТекущаяДатаСервер();						
				 ЗаписьР.Статус = Перечисления.СтатусыЗаданийКладовщиков.Завершено;
				 ЗаписьР.ДинамическаяЯчейка = ДинамическаяЯчейка;
				 ЗаписьР.АдресПодбора = СчитатьРег("Адрес");
				 ЗаписатьВТранзакции(ЗаписьР);
				 //ЗаписьР.Записать();
				 ОставшеесяКоличество = ОставшеесяКоличество - ЗаписьР.ТребуемоеКоличество;
				 ЗаписатьРег("ЗаписьР.КлючУникальности",ЗаписьР.КлючУникальности);
				 
			 Иначе
				 ЗаписьР.ТребуемоеКоличество = ЗаписьР.ТребуемоеКоличество - ОставшеесяКоличество;
				 ЗаписатьВТранзакции(ЗаписьР);				
				 //ЗаписьР.Записать();
				 НоваяЗапись = РегистрыСведений.ЗаданияНаДефрагментацию.СоздатьМенеджерЗаписи();
				 ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьР, , "КлючУникальности, ТребуемоеКоличество, Статус");
				 НоваяЗапись.КлючУникальности = Новый УникальныйИдентификатор;
				 НоваяЗапись.ТребуемоеКоличество = ОставшеесяКоличество;
				 НоваяЗапись.Перемещено = ОставшеесяКоличество;						
				 НоваяЗапись.Исполнитель = Автор;
				 НоваяЗапись.ВремяЗавершенияЗадания = ТекущаяДатаСервер();						
				 НоваяЗапись.Статус = Перечисления.СтатусыЗаданийКладовщиков.Завершено;
				 НоваяЗапись.ДинамическаяЯчейка = ДинамическаяЯчейка;
				 НоваяЗапись.АдресПодбора = СчитатьРег("Адрес");
				 ЗаписатьВТранзакции(НоваяЗапись);
				 //НоваяЗапись.Записать();
				 
				 ОставшеесяКоличество = 0;						
				 ЗаписатьРег("ЗаписьР.КлючУникальности",НоваяЗапись.КлючУникальности);
				 
			 КонецЕсли;	
		 Иначе
			 Ответ = Ответ+ " немогу найти задание "+Таблица.КлючУникальности;
		 КонецЕсли;
	 КонецЦикла;
	 //Если ОставшеесяКоличество>0 Тогда
	 //	ОтменитьТранзакцию();
	 //	Возврат Ответ+"Нехватает "+Строка(ОставшеесяКоличество)+" шт.";
	 //КонецЕсли;
	 //ЗафиксироватьТранзакцию();
	 //Иначе
	 //	Возврат "Весь товар " + ?(СтрДлина(ВыбТовар) > 30, Лев(ВыбТовар, 30) + "...", ВыбТовар) + " для адреса " + Адрес + " отсканирован!";
	 //КонецЕсли;
	 возврат Ответ;
	 
 КонецФункции
 //Дефрагментация
 Функция ЗавершитьМоиЗаданияДефрагментацииСобрано(Автор,Адрес) //Функция закидывает все собраное с полки хранения на адрес
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	ЗаданияНаДефрагментацию.КлючУникальности КАК КлючУникальности,
	 |	ЗаданияНаДефрагментацию.АдресХранения КАК АдресОтправитель,
	 |	&Адрес КАК АдресПолучатель,
	 |	ЗаданияНаДефрагментацию.Товар КАК Товар,
	 |	ЗаданияНаДефрагментацию.ТребуемоеКоличество КАК Количество
	 //|	ЗаданияНаДефрагментацию.Перемещено КАК Количество
	 |ИЗ
	 |	РегистрСведений.ЗаданияНаДефрагментацию КАК ЗаданияНаДефрагментацию
	 |ГДЕ
	 |	ЗаданияНаДефрагментацию.Исполнитель = &Автор
	 |	И ЗаданияНаДефрагментацию.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.Собрано)";
	 
	 Запрос.УстановитьПараметр("Автор", Автор);
	 Запрос.УстановитьПараметр("Адрес", Адрес);
	 Результат = Запрос.Выполнить();
	 Если  Результат.Пустой() Тогда возврат "НетЗаписей"; КонецЕсли;
	 ТаблицаЗаданий = Результат.Выгрузить();
	 ТаблицаТоваров  =  ТаблицаЗаданий.Скопировать();
	 ТаблицаТоваров.Свернуть("Товар,АдресОтправитель,АдресПолучатель","Количество");
	 
	 Документ = Документы.ДвижениеТоваровПоСкладу.СоздатьДокумент();
	 Документ.Дата = ПолучитьОперативнуюОтметкуВремени();
	 Документ.Автор  = ПараметрыСеанса.глТекПользователь;
	 Документ.Автор2 = Справочники.Пользователи.ПустаяСсылка();
	 УстановитьНомерДокумента(Документ);
	 Документ.Операция =  Перечисления.ВидыСкладскихОпераций.ПеремещениеТовара;
	 Документ.ВидДвижения = 1;
	 Документ.Состав.Загрузить(ТаблицаТоваров);
	 
	 ~ЗаписьДок:	
	 попытка
		 НачатьТранзакцию();
		 Документ.Записать(РежимЗаписиДокумента.Проведение);
		 Для каждого Строка из  ТаблицаЗаданий Цикл
			 
			 ЗаписьР = РегистрыСведений.ЗаданияНаДефрагментацию.СоздатьМенеджерЗаписи();    
			 ЗаписьР.КлючУникальности = Строка.КлючУникальности;
			 ЗаписьР.Прочитать();
			 Если ЗаписьР.Выбран() Тогда 
				 ЗаписьР.АдресПодбора = Адрес;
				 ЗаписьР.Статус = Перечисления.СтатусыЗаданийКладовщиков.Закрыто;
				 ЗаписьР.ДинамическаяЯчейка = "";
				 ЗаписьР.ВремяЗавершенияЗадания = ТекущаяДатаСервер();
				 ЗаписатьВТранзакции(ЗаписьР);
				 ЗаписьР.Записать();
			 Иначе 
				 ОтменитьТранзакцию();
				 Возврат "Не найдена запись в регистре";
			 КонецЕсли;		
		 КонецЦикла;
	 Исключение
		 ОтменитьТранзакцию();
		 ОписаниеОшибки = ОписаниеОшибки();
		 
		 Если Найти(НРег(ОписаниеОшибки), "конфликт блокировок") > 0 Тогда
			 Sleep(3); //Задержка на 3 мс.
			 Перейти ~ЗаписьДок;
		 КонецЕсли;
		 
		 ошибка = "";
		 Попытка
			 ошибка = Документ.ДополнительныеСвойства.ОшибкаПриПроведении;	
		 Исключение
		 КонецПопытки;
		 
		 Возврат "документ не проведен по причине: " + ошибка + ", "+ ОписаниеОшибки;
		 
	 КонецПопытки;
	 
	 ЗафиксироватьТранзакцию();	
	 Возврат "";
 КонецФункции
 //Дефрагментация
 Функция ЗавершитьМоиЗаданияДефрагментации(Автор)
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	ЗаданияНаДефрагментацию.КлючУникальности КАК КлючУникальности,
	 |	ЗаданияНаДефрагментацию.АдресХранения КАК АдресОтправитель,
	 |	ЗаданияНаДефрагментацию.АдресПодбора КАК АдресПолучатель,
	 |	ЗаданияНаДефрагментацию.Товар КАК Товар,
	 |	ЗаданияНаДефрагментацию.ТребуемоеКоличество КАК ТребуемоеКоличество,
	 |	ЗаданияНаДефрагментацию.Перемещено КАК Количество
	 |ИЗ
	 |	РегистрСведений.ЗаданияНаДефрагментацию КАК ЗаданияНаДефрагментацию
	 |ГДЕ
	 |	ЗаданияНаДефрагментацию.Исполнитель = &Автор
	 |	И ЗаданияНаДефрагментацию.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.Завершено)";
	 
	 Запрос.УстановитьПараметр("Автор", Автор);
	 Результат = Запрос.Выполнить();
	 Если  Результат.Пустой() Тогда возврат "НетЗаписей"; КонецЕсли;
	 ТаблицаЗаданий = Результат.Выгрузить();
	 ТаблицаТоваров  =  ТаблицаЗаданий.Скопировать();
	 ТаблицаТоваров.Свернуть("Товар,АдресОтправитель,АдресПолучатель","Количество");
	 
	 Документ = Документы.ДвижениеТоваровПоСкладу.СоздатьДокумент();
	 Документ.Дата = ПолучитьОперативнуюОтметкуВремени();
	 Документ.Автор  = ПараметрыСеанса.глТекПользователь;
	 Документ.Автор2 = Справочники.Пользователи.ПустаяСсылка();
	 УстановитьНомерДокумента(Документ);
	 Документ.Операция =  Перечисления.ВидыСкладскихОпераций.ПеремещениеТовара;
	 Документ.ВидДвижения = 1;
	 Документ.Состав.Загрузить(ТаблицаТоваров);
	 
	 ~ЗаписьДок:	
	 попытка
		 НачатьТранзакцию();
		 Документ.Записать(РежимЗаписиДокумента.Проведение);
		 Для каждого Строка из  ТаблицаЗаданий Цикл
			 
			 ЗаписьР = РегистрыСведений.ЗаданияНаДефрагментацию.СоздатьМенеджерЗаписи();    
			 ЗаписьР.КлючУникальности = Строка.КлючУникальности;
			 ЗаписьР.Прочитать();
			 Если ЗаписьР.Выбран() Тогда 
				 ЗаписьР.Статус = Перечисления.СтатусыЗаданийКладовщиков.Закрыто;
				 ЗаписьР.ДинамическаяЯчейка = "";
				 ЗаписьР.ВремяЗавершенияЗадания = ТекущаяДатаСервер();
				 ЗаписатьВТранзакции(ЗаписьР);
				 ЗаписьР.Записать();
			 Иначе 
				 ОтменитьТранзакцию();
				 Возврат "Не найдена запись в регистре";
			 КонецЕсли;		
		 КонецЦикла;
	 Исключение
		 ОтменитьТранзакцию();
		 ОписаниеОшибки = ОписаниеОшибки();
		 
		 Если Найти(НРег(ОписаниеОшибки), "конфликт блокировок") > 0 Тогда
			 Sleep(3); //Задержка на 3 мс.
			 Перейти ~ЗаписьДок;
		 КонецЕсли;
		 
		 ошибка = "";
		 Попытка
			 ошибка = Документ.ДополнительныеСвойства.ОшибкаПриПроведении;	
		 Исключение
		 КонецПопытки;
		 
		 Возврат "документ не проведен по причине: " + ошибка + ", "+ ОписаниеОшибки;
		 
	 КонецПопытки;
	 
	 ЗафиксироватьТранзакцию();	
	 Возврат "";
 КонецФункции
 //Дефрагментация
 Функция ПодборТовараПоШКДефрагментация(Код,Автор,Количество)
	 Список = ПолучитьСписокТовараПоСчитаномуКоду(Код);
	 
	 Если Список.Количество()=0  Тогда
		 Запрос = Новый Запрос;
		 Запрос.Текст = 
		 "ВЫБРАТЬ
		 |	СерийныеНомера.Товар,
		 |	СерийныеНомера.Поставщик
		 |ИЗ
		 |	РегистрСведений.СерийныеНомера КАК СерийныеНомера
		 |ГДЕ
		 |	СерийныеНомера.СерийныйНомер = &Код";
		 Запрос.УстановитьПараметр("Код", Код);
		 Результат = Запрос.Выполнить();
		 ВыборкаДетальныеЗаписи = Результат.Выбрать();
		 Если не ВыборкаДетальныеЗаписи.Следующий() Тогда Возврат "Не найден товар по считанному коду!"; КонецЕсли;
		 список.Добавить(ВыборкаДетальныеЗаписи.Товар);
		 поставщик = ВыборкаДетальныеЗаписи.Поставщик;
	 КонецЕсли;
	 Если Список.Количество()>1  Тогда
		 ЗаписатьРег("СписокВыбораТовара",Список);
		 возврат "Выбор";
	 КонецЕсли;
	 
	 
	 ВыбТовар = Неопределено;		
	 Если Список.Количество() > 0 Тогда		
		 ВыбТовар = Список.Получить(0);//.Значение;
	 КонецЕсли;
	 ЗаписатьРег("ВыбТовар",ВыбТовар);
	 
	 ШКОбработан = ЗначениеЗаполнено(ВыбТовар);
	 Если НЕ ШКОбработан Тогда
		 Возврат "Не найден товар по считанному коду!";
	 КонецЕсли;
	 ЗапросЗаданий = Новый Запрос("ВЫБРАТЬ
	 |	ЗаданияНаДефрагментацию.КлючУникальности
	 |ИЗ
	 |	РегистрСведений.ЗаданияНаДефрагментацию КАК ЗаданияНаДефрагментацию
	 |ГДЕ
	 |	ЗаданияНаДефрагментацию.Товар = &Товар
	 |	И ЗаданияНаДефрагментацию.Исполнитель = &Автор
	 |	И ЗаданияНаДефрагментацию.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.ВПодборе)
	 |	И ЗаданияНаДефрагментацию.АдресХранения = &Адрес");		
	 
	 ЗапросЗаданий.УстановитьПараметр("Адрес", Считатьрег("Адрес"));
	 ЗапросЗаданий.УстановитьПараметр("Товар", ВыбТовар);
	 ЗапросЗаданий.УстановитьПараметр("Количество", Количество);
	 ЗапросЗаданий.УстановитьПараметр("Автор", Автор);
	 //ЗапросЗаданий.УстановитьПараметр("НомерЗадания", СчитатьРег("НомерЗаданияНаПодбор"));
	 
	 таблица = ЗапросЗаданий.Выполнить().Выбрать();
	 Если не таблица.Следующий() Тогда 
		 Возврат "отсутствует в подтоварке по адресу "+Считатьрег("Адрес");
	 КонецЕсли;
	 Если 	 Количество < 0 Тогда возврат ЗакрытьДефрагментациюСВычерками(ВыбТовар,-Количество); КонецЕсли;
	 ДинамическаяЯчейка = СчитатьРег("ДинамическаяЯчейка");
	 ОставшеесяКоличество = Количество;
	 Ответ = "";
	 таблица.Сбросить();
	 НачатьТранзакцию();
	 пока таблица.Следующий() и ОставшеесяКоличество>0 Цикл
		 //Собрали = Количество;
		 
		 
		 ЗаписьР = РегистрыСведений.ЗаданияНаДефрагментацию.СоздатьМенеджерЗаписи();    
		 ЗаписьР.КлючУникальности = Таблица.КлючУникальности;
		 ЗаписьР.Прочитать();
		 
		 
		 Если ЗаписьР.Выбран() Тогда 
			 
			 Если ОставшеесяКоличество >= ЗаписьР.ТребуемоеКоличество Тогда
				 
				 //ЗаписьР.ПеремещеноСобралиВКоличестве = ЗаписьР.ТребуемоеКоличество;
				 ЗаписьР.Исполнитель = Автор;
				 ЗаписьР.ВремяЗавершенияЗадания = ТекущаяДатаСервер();						
				 ЗаписьР.Статус = Перечисления.СтатусыЗаданийКладовщиков.Собрано;
				 ЗаписьР.ДинамическаяЯчейка = ДинамическаяЯчейка;
				 ЗаписьР.Записать();
				 
				 ОставшеесяКоличество = ОставшеесяКоличество - ЗаписьР.ТребуемоеКоличество;
				 ЗаписатьРег("ЗаписьР.КлючУникальности",ЗаписьР.КлючУникальности);
				 
			 Иначе
				 
				 ЗаписьР.ТребуемоеКоличество = ЗаписьР.ТребуемоеКоличество - ОставшеесяКоличество;				
				 ЗаписьР.Записать();
				 
				 НоваяЗапись = РегистрыСведений.ЗаданияНаДефрагментацию.СоздатьМенеджерЗаписи();
				 ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьР, , "КлючУникальности, ТребуемоеКоличество, Статус");
				 НоваяЗапись.КлючУникальности = Новый УникальныйИдентификатор;
				 НоваяЗапись.ТребуемоеКоличество = ОставшеесяКоличество;
				 НоваяЗапись.Перемещено = ОставшеесяКоличество;						
				 НоваяЗапись.Исполнитель = Автор;
				 НоваяЗапись.ВремяЗавершенияЗадания = ТекущаяДатаСервер();						
				 НоваяЗапись.Статус = Перечисления.СтатусыЗаданийКладовщиков.Собрано;
				 НоваяЗапись.ДинамическаяЯчейка = ДинамическаяЯчейка;
				 НоваяЗапись.Записать();
				 
				 ОставшеесяКоличество = 0;						
				 ЗаписатьРег("ЗаписьР.КлючУникальности",НоваяЗапись.КлючУникальности);
				 
			 КонецЕсли;	
		 Иначе
			 Ответ = Ответ+ " немогу найти задание "+Таблица.КлючУникальности;
		 КонецЕсли;
	 КонецЦикла;
	 Если ОставшеесяКоличество>0 Тогда
		 ОтменитьТранзакцию();
		 Возврат Ответ+"Нехватает "+Строка(ОставшеесяКоличество)+" шт.";
	 КонецЕсли;
	 ЗафиксироватьТранзакцию();
	 
	 //Иначе
	 //	Возврат "Весь товар " + ?(СтрДлина(ВыбТовар) > 30, Лев(ВыбТовар, 30) + "...", ВыбТовар) + " для адреса " + Адрес + " отсканирован!";
	 //КонецЕсли;
	 возврат Ответ;
	 
 КонецФункции
 //Дефрагментация
 Функция ПолучитьРядыДефрагментации()
	 
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	 |	СУММА(ЗаданияНаДефрагментацию.ТребуемоеКоличество) КАК Требуется,
	 |	ПОДСТРОКА(ЗаданияНаДефрагментацию.АдресПодбора, 1, 3) КАК Секция,
	 |	СУММА(МассоГабаритныеХарактеристики.ОбъемЕд * ЗаданияНаДефрагментацию.ТребуемоеКоличество) КАК Объем
	 |ИЗ
	 |	РегистрСведений.ЗаданияНаДефрагментацию КАК ЗаданияНаДефрагментацию
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МассоГабаритныеХарактеристики КАК МассоГабаритныеХарактеристики
	 |		ПО ЗаданияНаДефрагментацию.Товар = МассоГабаритныеХарактеристики.Товар
	 |ГДЕ
	 |	ЗаданияНаДефрагментацию.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.ЗаданиеСоздано)
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ПОДСТРОКА(ЗаданияНаДефрагментацию.АдресПодбора, 1, 3)
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	Секция
	 |ИТОГИ
	 |	СУММА(Требуется),
	 |	СУММА(Объем)
	 |ПО
	 |	Секция";
	 
	 
	 
	 возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
 КонецФункции
 //Дефрагментация
 Функция ПолучитьСекцииДефрагментации(Ряд)
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	 |	ПОДСТРОКА(ЗаданияНаДефрагментацию.АдресПодбора, 1, 6) КАК Секция,
	 |	СУММА(ЗаданияНаДефрагментацию.ТребуемоеКоличество) КАК Требуется,
	 |	СУММА(МассоГабаритныеХарактеристики.ОбъемЕд * ЗаданияНаДефрагментацию.ТребуемоеКоличество) КАК Объем
	 |ИЗ
	 |	РегистрСведений.ЗаданияНаДефрагментацию КАК ЗаданияНаДефрагментацию
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МассоГабаритныеХарактеристики КАК МассоГабаритныеХарактеристики
	 |		ПО ЗаданияНаДефрагментацию.Товар = МассоГабаритныеХарактеристики.Товар
	 |ГДЕ
	 |	ЗаданияНаДефрагментацию.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.ЗаданиеСоздано)
	 |	И ПОДСТРОКА(ЗаданияНаДефрагментацию.АдресПодбора, 1, 3) = &Ряд
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ПОДСТРОКА(ЗаданияНаДефрагментацию.АдресПодбора, 1, 6)
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	Секция
	 |ИТОГИ
	 |	СУММА(Требуется),
	 |	СУММА(Объем)
	 |ПО
	 |	Секция";
	 
	 Запрос.УстановитьПараметр("ряд",ряд);
	 
	 возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
 КонецФункции
 //Дефрагментация
 Функция ПроверитьСекциюДляДефрагментации(Ряд,Секция)
	 Если не Сред(Секция,1,3)= Ряд Тогда Возврат Ложь;	КонецЕсли;
	 
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	 |	СУММА(ЗаданияНаДефрагментацию.ТребуемоеКоличество) КАК Требуется
	 |ИЗ
	 |	РегистрСведений.ЗаданияНаДефрагментацию КАК ЗаданияНаДефрагментацию
	 |ГДЕ
	 |	ЗаданияНаДефрагментацию.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.ЗаданиеСоздано)
	 |	И ПОДСТРОКА(ЗаданияНаДефрагментацию.АдресПодбора, 1, 6) = &Секция
	 |
	 |ИМЕЮЩИЕ
	 |	СУММА(ЗаданияНаДефрагментацию.ТребуемоеКоличество) > 0";
	 
	 Запрос.УстановитьПараметр("Секция",Секция);
	 
	 возврат Запрос.Выполнить().Выбрать().Следующий();
 КонецФункции
 //Дефрагментация
 Функция ЗаписьЗаданияВРегистрыДефрагментации(Секция)
	 
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	 |	ЗаданияНаДефрагментацию.КлючУникальности КАК КлючУникальности
	 |ИЗ
	 |	РегистрСведений.ЗаданияНаДефрагментацию КАК ЗаданияНаДефрагментацию
	 |ГДЕ
	 |	ПОДСТРОКА(ЗаданияНаДефрагментацию.АдресПодбора, 1, 6) = &Секция
	 |	И ЗаданияНаДефрагментацию.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.ЗаданиеСоздано)";
	 
	 Запрос.УстановитьПараметр("Секция", Секция);
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 Пока Выборка.Следующий() Цикл
		 
		 КлючУникальности = Выборка.КлючУникальности;
		 Рег = РегистрыСведений.ЗаданияНаДефрагментацию.СоздатьМенеджерЗаписи();
		 Рег.КлючУникальности = КлючУникальности;
		 Рег.Прочитать();
		 Если Рег.Выбран() Тогда
			 Рег.ВремяНачалаЗадания = ТекущаяДатаСервер();
			 Рег.Исполнитель = ПараметрыСеанса.глТекПользователь;
			 Рег.Статус = Перечисления.СтатусыЗаданийКладовщиков.ВПодборе;
			 Рег.Записать();
		 КонецЕсли;
	 КонецЦикла;
	 Возврат Неопределено;
 КонецФункции
 
 //Разгрузка--------------------------------------
 Функция ПолучитьСписокЗаданийРазгрузки()
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	ВЫБОР
	 |		КОГДА ТТН.НомерТТНПеревозчика = """"
	 |			ТОГДА ТТН.Транспорт
	 |		ИНАЧЕ ТТН.НомерТТНПеревозчика
	 |	КОНЕЦ КАК Транспорт,
	 |	ТТН.Номер КАК НомерТТН,
	 |	СУММА(1) КАК Количество,
	 |	ТТН.Ссылка,
	 |	МИНИМУМ(ТТНСостав.Получено) КАК Получено,
	 |	ТТН.ВидТТН КАК ВидТТН
	 |ИЗ
	 |	Документ.ТТН.Состав КАК ТТНСостав
	 |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТТН КАК ТТН
	 |		ПО ТТНСостав.Ссылка = ТТН.Ссылка
	 |ГДЕ
	 |	ТТН.Проведен
	 |	И (НЕ ТТН.ПометкаУдаления)
	 |	И ТТН.ФилиалПолучатель = &ФилиалПолучатель
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ТТН.Номер,
	 |	ТТН.Ссылка,
	 |	ТТН.ВидТТН,
	 |	ВЫБОР
	 |		КОГДА ТТН.НомерТТНПеревозчика = """"
	 |			ТОГДА ТТН.Транспорт
	 |		ИНАЧЕ ТТН.НомерТТНПеревозчика
	 |	КОНЕЦ
	 |
	 |ИМЕЮЩИЕ
	 |	МИНИМУМ(ЕСТЬNULL(ТТНСостав.Получено, ЛОЖЬ)) = ЛОЖЬ
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	ВидТТН,
	 |	Транспорт,
	 |	НомерТТН";
	 Запрос.УстановитьПараметр("ФилиалПолучатель", Константы.ТекущийСклад.Получить());
	 Возврат Запрос.Выполнить().Выгрузить();
 КонецФункции
 //Разгрузка
 Функция ПолучитьДокументРазгрузки(НомерТТН)
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ ПЕРВЫЕ 1
	 |	ТТН.Транспорт,
	 |	ТТН.Ссылка,
	 |	ТТН.ВидТТН
	 |ИЗ
	 |	Документ.ТТН.Состав КАК ТТНСостав
	 |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТТН КАК ТТН
	 |		ПО ТТНСостав.Ссылка = ТТН.Ссылка
	 |ГДЕ
	 |	ТТН.Проведен
	 |	И (НЕ ТТН.ПометкаУдаления)
	 |	И ТТН.ФилиалПолучатель = &ФилиалПолучатель
	 //|	И ТТН.ВидТТН = ЗНАЧЕНИЕ(Перечисление.ВидыТТН.ВнутриРегиона)
	 |	И ТТН.Номер = &Номер";
	 Запрос.УстановитьПараметр("ФилиалПолучатель", Константы.ТекущийСклад.Получить());
	 Запрос.УстановитьПараметр("Номер", НомерТТН);
	 Возврат Запрос.Выполнить().Выбрать();
 КонецФункции
 
 //Подбор======================================================================
 Функция ПолучитьСписокЗаданий()
	 возврат ПолучитьФилиалыСЗаданиями();
 КонецФункции
 //подбор
 Функция ПолучитьМоеЗадание(Клиент,Автор)
	 ЗапросЗаданий = Новый Запрос("ВЫБРАТЬ
	 |	ЗаданияКладовщикам2.Товар КАК Товар,
	 |	ЗаданияКладовщикам2.Адрес КАК Адрес,
	 |	СУММА(ЗаданияКладовщикам2.ТребуемоеКоличество - ЗаданияКладовщикам2.СобралиВКоличестве) КАК Количество,
	 |	ЗаданияКладовщикам2.НомерЗадания КАК НомерЗадания
	 |ПОМЕСТИТЬ ВТ_Задание
	 |ИЗ
	 |	РегистрСведений.ЗаданияКладовщикам2 КАК ЗаданияКладовщикам2
	 |ГДЕ
	 |	ЗаданияКладовщикам2.Автор = &Автор
	 |	И ЗаданияКладовщикам2.Клиент = &Клиент
	 |	И ЗаданияКладовщикам2.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.ВПодборе)
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ЗаданияКладовщикам2.Товар,
	 |	ЗаданияКладовщикам2.Адрес,
	 |	ЗаданияКладовщикам2.НомерЗадания
	 |
	 |ИМЕЮЩИЕ
	 |	СУММА(ЗаданияКладовщикам2.ТребуемоеКоличество - ЗаданияКладовщикам2.СобралиВКоличестве) > 0
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ВТ_Задание.Товар,
	 |	ВТ_Задание.Адрес КАК Адрес,
	 |	ВТ_Задание.Количество КАК Количество,
	 |	ВТ_Задание.НомерЗадания,
	 |	МИНИМУМ(УчетКодовПроизводителя.Код) КАК Код
	 |ИЗ
	 |	ВТ_Задание КАК ВТ_Задание
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетКодовПроизводителя КАК УчетКодовПроизводителя
	 |		ПО ВТ_Задание.Товар = УчетКодовПроизводителя.Товар1
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ВТ_Задание.Товар,
	 |	ВТ_Задание.Адрес,
	 |	ВТ_Задание.Количество,
	 |	ВТ_Задание.НомерЗадания
	 |ИТОГИ
	 |	СУММА(Количество)
	 |ПО
	 |	Адрес
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ ВТ_Задание");		
	 
	 ЗапросЗаданий.УстановитьПараметр("Автор", Автор);
	 ЗапросЗаданий.УстановитьПараметр("Клиент", Клиент);	
	 //задание = ЗапросЗаданий.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	 
	 возврат ЗапросЗаданий.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	 
 КонецФункции
 //Подбор
 Функция ПолучитьАдресаИзСекции(Клиент,Секция)
	 
	 Запрос = Новый Запрос;
	 Запрос.УстановитьПараметр("Клиент", Клиент);
	 Запрос.УстановитьПараметр("Секция", Секция);
	 Запрос.Текст = "ВЫБРАТЬ
	 |	РезервыТоваров.Клиент,
	 |	РезервыТоваров.Номенклатура КАК Товар,
	 |	СУММА(РезервыТоваров.Количество) КАК ЖесткийРезерв
	 |ПОМЕСТИТЬ втРезервы
	 |ИЗ
	 |	РегистрНакопления.РезервыТоваров КАК РезервыТоваров
	 |ГДЕ
	 |	ТИПЗНАЧЕНИЯ(РезервыТоваров.Регистратор) = ТИП(Документ.ЗаявкаНаТоварДляФилиала)
	 |	И РезервыТоваров.Клиент = &Клиент
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	РезервыТоваров.Клиент,
	 |	РезервыТоваров.Номенклатура
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	втРезервы.Товар,
	 |	Счет_41_АдресныйОстатки.Адрес,
	 |	СУММА(ЕСТЬNULL(Счет_41_АдресныйОстатки.КоличествоОстаток, 0)) КАК КоличествоОстаток
	 |ПОМЕСТИТЬ втОстатки
	 |ИЗ
	 |	втРезервы КАК втРезервы
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Счет_41_Адресный.Остатки(, (НЕ НеОприходованныйТовар)) КАК Счет_41_АдресныйОстатки
	 |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АдресаМестХранения КАК АдресаМестХранения
	 |			ПО (АдресаМестХранения.Адрес = Счет_41_АдресныйОстатки.Адрес)
	 |				И (АдресаМестХранения.НазначениеМестаХранения = ЗНАЧЕНИЕ(Перечисление.НазначениеМестаХранения.БыстрыйНабор))
	 |				И ((НЕ АдресаМестХранения.Заблокирован))
	 |				И ((НЕ АдресаМестХранения.Адрес = """"))
	 |				И ((НЕ АдресаМестХранения.Адрес = ""А01-01-1""))
	 |		ПО втРезервы.Товар = Счет_41_АдресныйОстатки.Номенклатура
	 |			И (ПОДСТРОКА(Счет_41_АдресныйОстатки.Адрес, 1, 6) = &Секция)
	 |ГДЕ
	 |	ЕСТЬNULL(Счет_41_АдресныйОстатки.КоличествоОстаток, 0) > 0
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	втРезервы.Товар,
	 |	Счет_41_АдресныйОстатки.Адрес
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	втРезервы.Товар,
	 |	втРезервы.ЖесткийРезерв - СУММА(ЕСТЬNULL(ЗаданияКладовщикамОбщие.ТребуемоеКоличество, 0)) КАК Количество
	 |ПОМЕСТИТЬ втСвободныйРезерв
	 |ИЗ
	 |	втРезервы КАК втРезервы
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКладовщикам2 КАК ЗаданияКладовщикамОбщие
	 |		ПО втРезервы.Клиент = ЗаданияКладовщикамОбщие.Клиент
	 |			И втРезервы.Товар = ЗаданияКладовщикамОбщие.Товар
	 |			И (ЗаданияКладовщикамОбщие.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.ВПодборе)
	 |				ИЛИ ЗаданияКладовщикамОбщие.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.Завершено)
	 |				ИЛИ ЗаданияКладовщикамОбщие.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.Собрано)
	 |				ИЛИ ЗаданияКладовщикамОбщие.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.Упаковано))
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	втРезервы.Товар,
	 |	втРезервы.ЖесткийРезерв
	 |
	 |ИМЕЮЩИЕ
	 |	втРезервы.ЖесткийРезерв - СУММА(ЕСТЬNULL(ЗаданияКладовщикамОбщие.ТребуемоеКоличество, 0)) > 0
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	втОстатки.Товар,
	 |	втОстатки.Адрес,
	 |	втОстатки.КоличествоОстаток - СУММА(ЕСТЬNULL(ЗаданияКладовщикамПоАдресу.ТребуемоеКоличество, 0)) КАК Количество
	 |ПОМЕСТИТЬ втСвободныйОстаток
	 |ИЗ
	 |	втОстатки КАК втОстатки
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКладовщикам2 КАК ЗаданияКладовщикамПоАдресу
	 |		ПО втОстатки.Товар = ЗаданияКладовщикамПоАдресу.Товар
	 |			И (ЗаданияКладовщикамПоАдресу.Адрес = втОстатки.Адрес)
	 |			И (ЗаданияКладовщикамПоАдресу.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.ВПодборе)
	 |				ИЛИ ЗаданияКладовщикамПоАдресу.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.Собрано))
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	втОстатки.Товар,
	 |	втОстатки.Адрес,
	 |	втОстатки.КоличествоОстаток
	 |
	 |ИМЕЮЩИЕ
	 |	втОстатки.КоличествоОстаток - СУММА(ЕСТЬNULL(ЗаданияКладовщикамПоАдресу.ТребуемоеКоличество, 0)) > 0
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	втСвободныйОстаток.Адрес КАК Адрес,
	 |	СУММА(ВЫБОР
	 |			КОГДА втСвободныйОстаток.Количество > ЕСТЬNULL(втСвободныйРезерв.Количество, 0)
	 |				ТОГДА ЕСТЬNULL(втСвободныйРезерв.Количество, 0)
	 |			ИНАЧЕ втСвободныйОстаток.Количество
	 |		КОНЕЦ) КАК Количество,
	 |	СУММА(ВЫБОР
	 |			КОГДА втСвободныйОстаток.Количество > ЕСТЬNULL(втСвободныйРезерв.Количество, 0)
	 |				ТОГДА ЕСТЬNULL(втСвободныйРезерв.Количество, 0)
	 |			ИНАЧЕ втСвободныйОстаток.Количество
	 |		КОНЕЦ * ЕСТЬNULL(МГХ.ОбъемЕд, 0)) КАК Объем
	 |ИЗ
	 |	втСвободныйОстаток КАК втСвободныйОстаток
	 |		ЛЕВОЕ СОЕДИНЕНИЕ втСвободныйРезерв КАК втСвободныйРезерв
	 |		ПО втСвободныйОстаток.Товар = втСвободныйРезерв.Товар
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МассоГабаритныеХарактеристики КАК МГХ
	 |		ПО втСвободныйОстаток.Товар = МГХ.Товар
	 |ГДЕ
	 |	ЕСТЬNULL(втСвободныйРезерв.Количество, 0) > 0
	 |	И втСвободныйОстаток.Количество > 0
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	втСвободныйОстаток.Адрес
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ втРезервы
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ втОстатки
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ втСвободныйРезерв
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ втСвободныйОстаток";
	 
	 
	 возврат Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	 
 КонецФункции
 //Подбор
 Функция ПолучитьКлиентаМоеЗадание(Автор)
	 ЗапросЗаданий = Новый Запрос("ВЫБРАТЬ
	 |	ЗаданияКладовщикам2.Товар КАК Товар,
	 |	ЗаданияКладовщикам2.Адрес КАК Адрес,
	 |	СУММА(ЗаданияКладовщикам2.ТребуемоеКоличество) КАК Количество,
	 |	ЗаданияКладовщикам2.НомерЗадания КАК НомерЗадания,
	 |	ЗаданияКладовщикам2.Клиент
	 |ИЗ
	 |	РегистрСведений.ЗаданияКладовщикам2 КАК ЗаданияКладовщикам2
	 |ГДЕ
	 |	ЗаданияКладовщикам2.Автор = &Автор
	 |	И ЗаданияКладовщикам2.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.ВПодборе)
	 |	И ЗаданияКладовщикам2.ТребуемоеКоличество > 0
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ЗаданияКладовщикам2.Товар,
	 |	ЗаданияКладовщикам2.Адрес,
	 |	ЗаданияКладовщикам2.НомерЗадания,
	 |	ЗаданияКладовщикам2.Клиент
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	Адрес");		
	 
	 ЗапросЗаданий.УстановитьПараметр("Автор", Автор);
	 возврат ЗапросЗаданий.Выполнить().Выбрать();
	 
 КонецФункции
 //Подбор
 Функция СканЗаданияОбщий(Данные,Количество)	
	 ШтрихКод = СокрЛП(Данные);
	 Клиент = СчитатьРег("Клиент");
	 ТекущийФилиал = Константы.ТекущийСклад.Получить();
	 Автор = ПараметрыСеанса.глТекПользователь;
	 Структура = ПрочитатьШтрихКод(ШтрихКод);
	 ДинамическаяЯчейка = СчитатьРег("ДинамическаяЯчейка");
	 Адрес = СчитатьРег("Адрес");
	 ПроверитьДинамическуюЯчейку(Структура);
	 ЗаписатьРег("СчитаныйШК.ТипДанных",Структура.ТипДанных);
	 Если Структура.ТипДанных = 0 Тогда
		 Возврат "Ненужно сканировать бэйджик";
	 ИначеЕсли Структура.ТипДанных = 11 Тогда // Складской транспорт	
		 ДинамическаяЯчейка = Структура.Данные;	
		 Возврат ПолучитьДинамическуюЯчейку(Структура.Данные,Клиент);	
	 ИначеЕсли Структура.ТипДанных = 4 Тогда // Адрес 
		 
		 Если НЕ ЗначениеЗаполнено(Клиент) Тогда
			 Возврат "Не выбран клиент!";			
		 КонецЕсли; 		
		 
		 Если НЕ ЗначениеЗаполнено(ДинамическаяЯчейка) Тогда
			 Возврат "Необходимо сканировать"+Символы.ВК+Символы.ПС+"складской транспорт"+Символы.ВК+Символы.ПС+"затем адрес и товар";
		 иначе 
			 Если не ЭтоДинамическаяЯчейка(ДинамическаяЯчейка) Тогда 
				 Возврат "Необходимо сканировать"+Символы.ВК+Символы.ПС+"Динамическую ячейку"+Символы.ВК+Символы.ПС+"затем адрес";
			 КонецЕсли;
		 КонецЕсли;		
		 
		 Зона =  Сред("АБВГДЕЖЗИКЛМНОПРСТУФХЦЧЩШЮЭЯ", Число(Сред(Данные,4,2)), 1);
		 
		 Адрес = Зона + Сред(Данные,6,2) + "-" + Сред(Данные,8,2) + "-" + Сред(Данные,10,1);
		 
		 Если ЗначениеЗаполнено(Адрес) И ТипЗНЧ(Адрес) = Тип("Строка") И СтрДлина(Адрес) = 8 Тогда
			 
			 // + Проверка на правильность заполнения адреса
			 
			 Адреса = РегистрыСведений.АдресаМестХранения;
			 ОтборАдреса = Новый Структура("Адрес");
			 ОтборАдреса.Адрес = Адрес;
			 
			 ВыборкаАдреса = Адреса.Выбрать(ОтборАдреса);
			 Если НЕ ВыборкаАдреса.Следующий() Тогда	
				 Возврат "Указанного адреса"+Символы.ВК+Символы.ПС+"не существует!";
			 КонецЕсли;
			 ЗаписатьРег("Адрес",Адрес);
		 Иначе	
			 Возврат "Введены некорректные"+Символы.ВК+Символы.ПС+"параметры адреса!";
		 КонецЕсли;						
		 
		 
	 ИначеЕсли Структура.ТипДанных = 3 Тогда // Товар
		 
		 
		 Если НЕ ЗначениеЗаполнено(Клиент) Тогда
			 Возврат "Не выбран клиент! ";			
		 КонецЕсли; 		
		 Если НЕ ЗначениеЗаполнено(ДинамическаяЯчейка) Тогда
			 Возврат "Необходимо сканировать"+Символы.ВК+Символы.ПС+"складской транспорт"+Символы.ВК+Символы.ПС+"затем адрес и товар";
		 иначе 
			 Если не ЭтоДинамическаяЯчейка(ДинамическаяЯчейка) Тогда 
				 Возврат "Необходимо сканировать"+Символы.ВК+Символы.ПС+"Динамическую ячейку"+Символы.ВК+Символы.ПС+"затем адрес";
			 КонецЕсли;
		 КонецЕсли;		
		 Если НЕ ЗначениеЗаполнено(Адрес) Тогда
			 Возврат "Перед считыванием товара"+Символы.ВК+Символы.ПС+"необходимо считать адрес!";
		 КонецЕсли;	
		 
		 Возврат ПодборТовараПоШК(ШтрихКод,Автор,СчитатьРег("Клиент"),Количество);	
		 
	 КонецЕсли;		
	 
 КонецФункции
 //Подбор
 функция проверитьфилиалзадания(Филиал)
	 Возврат не ПолучитьФилиалыСЗаданиями().Найти(Филиал,"Филиал") = Неопределено;
 КонецФункции
 //Подбор
 функция проверитьсекциизадания(Филиал,Ряд,Секция)
	 Возврат не получитьСекции(Филиал,Ряд).строки.Найти(Секция,"Секция",Истина) = Неопределено;
 КонецФункции
 //Подбор
 функция проверитьрядзадания(Филиал,Ряд)
	 Возврат не получитьРяды(Филиал).строки.Найти(Ряд,"Секция",Истина) = Неопределено;
 КонецФункции
 //Подбор
 Функция ПолучитьФилиалыСЗаданиями() 
	 
	 ТекущаяДата = ТекущаяДатаСервер();
	 время = дата('00010101') + (ТекущаяДата-НачалоДня(ТекущаяДата));	
	 
	 ЗапросРасписания = Новый Запрос("ВЫБРАТЬ
	 |	РасписаниеОтправкиМашинСоСклада.Филиал КАК Филиал,
	 |	ВЫБОР
	 |		КОГДА РасписаниеОтправкиМашинСоСклада.ДеньНедели = &день
	 |				И РасписаниеОтправкиМашинСоСклада.ВремяОтправкиМашины > &время
	 |			ТОГДА -РАЗНОСТЬДАТ(РасписаниеОтправкиМашинСоСклада.ВремяОтправкиМашины, &Время, МИНУТА)
	 |		ИНАЧЕ ВЫБОР
	 |				КОГДА РасписаниеОтправкиМашинСоСклада.ДеньНедели < &день
	 |					ТОГДА -РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(РасписаниеОтправкиМашинСоСклада.ВремяОтправкиМашины, ДЕНЬ, РасписаниеОтправкиМашинСоСклада.ДеньНедели - &День + 7), &Время, МИНУТА)
	 |				ИНАЧЕ -РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(РасписаниеОтправкиМашинСоСклада.ВремяОтправкиМашины, ДЕНЬ, РасписаниеОтправкиМашинСоСклада.ДеньНедели - &День), &Время, МИНУТА)
	 |			КОНЕЦ
	 |	КОНЕЦ КАК МинутДоОтправкиМашины
	 |ИЗ
	 |	РегистрСведений.РасписаниеОтправкиМашинСоСклада КАК РасписаниеОтправкиМашинСоСклада
	 |ГДЕ
	 |	ВЫБОР
	 |			КОГДА РасписаниеОтправкиМашинСоСклада.ДеньНедели = &день
	 |					И РасписаниеОтправкиМашинСоСклада.ВремяОтправкиМашины > &время
	 |				ТОГДА -РАЗНОСТЬДАТ(РасписаниеОтправкиМашинСоСклада.ВремяОтправкиМашины, &Время, МИНУТА)
	 |			ИНАЧЕ ВЫБОР
	 |					КОГДА РасписаниеОтправкиМашинСоСклада.ДеньНедели < &день
	 |						ТОГДА -РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(РасписаниеОтправкиМашинСоСклада.ВремяОтправкиМашины, ДЕНЬ, РасписаниеОтправкиМашинСоСклада.ДеньНедели - &День + 7), &Время, МИНУТА)
	 |					ИНАЧЕ -РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(РасписаниеОтправкиМашинСоСклада.ВремяОтправкиМашины, ДЕНЬ, РасписаниеОтправкиМашинСоСклада.ДеньНедели - &День), &Время, МИНУТА)
	 |				КОНЕЦ
	 |		КОНЕЦ > 0
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	МинутДоОтправкиМашины");
	 
	 ЗапросРасписания.УстановитьПараметр("день", ДеньНедели(ТекущаяДата));
	 ЗапросРасписания.УстановитьПараметр("время", время);	
	 
	 ТаблицаФилиалов = ЗапросРасписания.Выполнить().Выгрузить();
	 //Запрос = Новый Запрос("ВЫБРАТЬ
	 //					  |	РезервыТоваров.Клиент КАК Клиент,
	 //					  |	РезервыТоваров.Номенклатура КАК Номенклатура,
	 //					  |	СУММА(РезервыТоваров.Количество) КАК ЖесткийРезерв
	 //					  |ПОМЕСТИТЬ Резервы
	 //					  |ИЗ
	 //					  |	РегистрНакопления.РезервыТоваров КАК РезервыТоваров
	 //					  |ГДЕ
	 //					  |	ТИПЗНАЧЕНИЯ(РезервыТоваров.Регистратор) = ТИП(Документ.ЗаявкаНаТоварДляФилиала)
	 //					  |	И РезервыТоваров.Клиент В(&СписокФилиалов)
	 //					  |
	 //					  |СГРУППИРОВАТЬ ПО
	 //					  |	РезервыТоваров.Клиент,
	 //					  |	РезервыТоваров.Номенклатура
	 //					  |;
	 
	 
	 Запрос = Новый Запрос("ВЫБРАТЬ
	 |	РезервыТоваров.Клиент КАК Клиент,
	 |	РезервыТоваров.Номенклатура КАК Номенклатура,
	 |	СУММА(РезервыТоваров.Количество) КАК ЖесткийРезерв
	 |ПОМЕСТИТЬ Резервы
	 |ИЗ
	 |	РегистрНакопления.РезервыТоваров КАК РезервыТоваров
	 |ГДЕ
	 |	ТИПЗНАЧЕНИЯ(РезервыТоваров.Регистратор) = ТИП(Документ.ЗаявкаНаТоварДляФилиала)
	 |	И РезервыТоваров.Клиент В(&СписокФилиалов)
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	РезервыТоваров.Клиент,
	 |	РезервыТоваров.Номенклатура
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	Резервы.Клиент КАК ФирмаСсылка,
	 |	Резервы.Номенклатура КАК Товар,
	 |	Резервы.ЖесткийРезерв - СУММА(ЕСТЬNULL(ЗаданияКладовщикам2.ТребуемоеКоличество, 0)) КАК Требуется
	 |ПОМЕСТИТЬ товары_требуется
	 |ИЗ
	 |	Резервы КАК Резервы
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКладовщикам2 КАК ЗаданияКладовщикам2
	 |		ПО Резервы.Клиент = ЗаданияКладовщикам2.Клиент
	 |			И Резервы.Номенклатура = ЗаданияКладовщикам2.Товар
	 |			И (ЗаданияКладовщикам2.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.ВПодборе)
	 |				ИЛИ ЗаданияКладовщикам2.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.Собрано)
	 |				ИЛИ ЗаданияКладовщикам2.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.Завершено)
	 |				ИЛИ ЗаданияКладовщикам2.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.Упаковано))
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	Резервы.Клиент,
	 |	Резервы.Номенклатура,
	 |	Резервы.ЖесткийРезерв
	 |
	 |ИМЕЮЩИЕ
	 |	Резервы.ЖесткийРезерв - СУММА(ЕСТЬNULL(ЗаданияКладовщикам2.ТребуемоеКоличество, 0)) > 0
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ЗаданияКладовщикам2.Адрес,
	 |	ЗаданияКладовщикам2.Товар,
	 |	СУММА(ЗаданияКладовщикам2.ТребуемоеКоличество) КАК нетуВадресе
	 |ПОМЕСТИТЬ ужесобрано
	 |ИЗ
	 |	РегистрСведений.ЗаданияКладовщикам2 КАК ЗаданияКладовщикам2
	 |ГДЕ
	 |	(ЗаданияКладовщикам2.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.ВПодборе)
	 |			ИЛИ ЗаданияКладовщикам2.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.Собрано))
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ЗаданияКладовщикам2.Адрес,
	 |	ЗаданияКладовщикам2.Товар
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	Счет_41_АдресныйОстатки.Адрес КАК Адрес,
	 |	Счет_41_АдресныйОстатки.КоличествоОстаток - ЕСТЬNULL(ужесобрано.нетуВадресе, 0) КАК Остаток,
	 |	Счет_41_АдресныйОстатки.Номенклатура
	 |ПОМЕСТИТЬ остатки
	 |ИЗ
	 |	РегистрНакопления.Счет_41_Адресный.Остатки КАК Счет_41_АдресныйОстатки
	 |		ЛЕВОЕ СОЕДИНЕНИЕ ужесобрано КАК ужесобрано
	 |		ПО Счет_41_АдресныйОстатки.Адрес = ужесобрано.Адрес
	 |			И Счет_41_АдресныйОстатки.Номенклатура = ужесобрано.Товар
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресаМестХранения КАК АдресаМестХранения
	 |		ПО Счет_41_АдресныйОстатки.Адрес = АдресаМестХранения.Адрес
	 |ГДЕ
	 |	ЕСТЬNULL(Счет_41_АдресныйОстатки.КоличествоОстаток, 0) > 0
	 |	И (НЕ АдресаМестХранения.Заблокирован)
	 |	И АдресаМестХранения.НазначениеМестаХранения = ЗНАЧЕНИЕ(Перечисление.НазначениеМестаХранения.БыстрыйНабор)
	 |	И (НЕ Счет_41_АдресныйОстатки.Адрес = ""А01-01-1"")
	 |	И (НЕ Счет_41_АдресныйОстатки.НеОприходованныйТовар)
	 |	И Счет_41_АдресныйОстатки.КоличествоОстаток - ЕСТЬNULL(ужесобрано.нетуВадресе, 0) > 0
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	СвободныеРезервы.ФирмаСсылка КАК Филиал,
	 |	МАКСИМУМ(СвободныеРезервы.Требуется) КАК требуется,
	 |	СвободныеРезервы.Товар
	 |ПОМЕСТИТЬ нужнособрать
	 |ИЗ
	 |	товары_требуется КАК СвободныеРезервы
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ остатки КАК остатки
	 |		ПО СвободныеРезервы.Товар = остатки.Номенклатура
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	СвободныеРезервы.ФирмаСсылка,
	 |	СвободныеРезервы.Товар
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	0 КАК Объем,
	 |	нужнособрать.Филиал КАК Филиал,
	 |	СУММА(нужнособрать.требуется) КАК требуется
	 |ИЗ
	 |	нужнособрать КАК нужнособрать
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	нужнособрать.Филиал
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	Филиал
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ Резервы
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ нужнособрать
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ товары_требуется
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ остатки
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ ужесобрано");
	 
	 Для Каждого Строка Из ТаблицаФилиалов Цикл
		 
		 МинимальноеВремя = Строка.МинутДоОтправкиМашины;		
		 
		 ОтборФилиалов = Новый Структура;
		 ОтборФилиалов.Вставить("МинутДоОтправкиМашины", МинимальноеВремя);
		 
		 СписокФилиалов = Новый СписокЗначений;
		 
		 НайденныеСтроки = ТаблицаФилиалов.НайтиСтроки(ОтборФилиалов);		
		 
		 Если НЕ НайденныеСтроки.Количество() = 0 Тогда
			 
			 Для Каждого Стр Из НайденныеСтроки Цикл
				 
				 СписокФилиалов.Добавить(Стр.Филиал);
				 //ЗаписатьРег()
				 ТаблицаФилиалов.Удалить(0);	
				 
			 КонецЦикла;			
			 
			 Запрос.УстановитьПараметр("СписокФилиалов", СписокФилиалов);
			 
			 тз = Запрос.Выполнить().Выгрузить();
			 //ЗаписатьРег("филкол",тз.Количество());
			 Если тз.Количество() > 0 Тогда
				 
				 Прервать;
				 
			 КонецЕсли;	
			 
		 КонецЕсли;
		 
	 КонецЦикла;				   
	 
	 возврат тз;
	 
 КонецФункции
 //Подбор
 Функция ПолучитьРяды(Клиент)
	 
	 Запрос = Новый Запрос;
	 Запрос.УстановитьПараметр("Клиент", Клиент);
	 Запрос.Текст = "ВЫБРАТЬ
	 |	РезервыТоваров.Клиент,
	 |	РезервыТоваров.Номенклатура КАК Товар,
	 |	СУММА(РезервыТоваров.Количество) КАК ЖесткийРезерв
	 |ПОМЕСТИТЬ втРезервы
	 |ИЗ
	 |	РегистрНакопления.РезервыТоваров КАК РезервыТоваров
	 |ГДЕ
	 |	ТИПЗНАЧЕНИЯ(РезервыТоваров.Регистратор) = ТИП(Документ.ЗаявкаНаТоварДляФилиала)
	 |	И РезервыТоваров.Клиент = &Клиент
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	РезервыТоваров.Клиент,
	 |	РезервыТоваров.Номенклатура
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	втРезервы.Товар,
	 |	Счет_41_АдресныйОстатки.Адрес,
	 |	СУММА(ЕСТЬNULL(Счет_41_АдресныйОстатки.КоличествоОстаток, 0)) КАК КоличествоОстаток
	 |ПОМЕСТИТЬ втОстатки
	 |ИЗ
	 |	втРезервы КАК втРезервы
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Счет_41_Адресный.Остатки(, (НЕ НеОприходованныйТовар)) КАК Счет_41_АдресныйОстатки
	 |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АдресаМестХранения КАК АдресаМестХранения
	 |			ПО (АдресаМестХранения.Адрес = Счет_41_АдресныйОстатки.Адрес)
	 |				И (АдресаМестХранения.НазначениеМестаХранения = ЗНАЧЕНИЕ(Перечисление.НазначениеМестаХранения.БыстрыйНабор))
	 |				И ((НЕ АдресаМестХранения.Заблокирован))
	 |				И ((НЕ АдресаМестХранения.Адрес = """"))
	 |				И ((НЕ АдресаМестХранения.Адрес = ""А01-01-1""))
	 |		ПО втРезервы.Товар = Счет_41_АдресныйОстатки.Номенклатура
	 |ГДЕ
	 |	ЕСТЬNULL(Счет_41_АдресныйОстатки.КоличествоОстаток, 0) > 0
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	втРезервы.Товар,
	 |	Счет_41_АдресныйОстатки.Адрес
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	втРезервы.Товар,
	 |	втРезервы.ЖесткийРезерв - СУММА(ЕСТЬNULL(ЗаданияКладовщикамОбщие.ТребуемоеКоличество, 0)) КАК Количество
	 |ПОМЕСТИТЬ втСвободныйРезерв
	 |ИЗ
	 |	втРезервы КАК втРезервы
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКладовщикам2 КАК ЗаданияКладовщикамОбщие
	 |		ПО втРезервы.Клиент = ЗаданияКладовщикамОбщие.Клиент
	 |			И втРезервы.Товар = ЗаданияКладовщикамОбщие.Товар
	 |			И (ЗаданияКладовщикамОбщие.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.ВПодборе)
	 |				ИЛИ ЗаданияКладовщикамОбщие.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.Собрано)
	 |				ИЛИ ЗаданияКладовщикамОбщие.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.Завершено)
	 |				ИЛИ ЗаданияКладовщикамОбщие.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.Упаковано))
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	втРезервы.Товар,
	 |	втРезервы.ЖесткийРезерв
	 |
	 |ИМЕЮЩИЕ
	 |	втРезервы.ЖесткийРезерв - СУММА(ЕСТЬNULL(ЗаданияКладовщикамОбщие.ТребуемоеКоличество, 0)) > 0
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	втОстатки.Товар,
	 |	втОстатки.Адрес,
	 |	втОстатки.КоличествоОстаток - СУММА(ЕСТЬNULL(ЗаданияКладовщикамПоАдресу.ТребуемоеКоличество, 0)) КАК Количество
	 |ПОМЕСТИТЬ втСвободныйОстаток
	 |ИЗ
	 |	втОстатки КАК втОстатки
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКладовщикам2 КАК ЗаданияКладовщикамПоАдресу
	 |		ПО втОстатки.Товар = ЗаданияКладовщикамПоАдресу.Товар
	 |			И (ЗаданияКладовщикамПоАдресу.Адрес = втОстатки.Адрес)
	 |			И (ЗаданияКладовщикамПоАдресу.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.ВПодборе)
	 |				ИЛИ ЗаданияКладовщикамПоАдресу.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.Собрано))
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	втОстатки.Товар,
	 |	втОстатки.Адрес,
	 |	втОстатки.КоличествоОстаток
	 |
	 |ИМЕЮЩИЕ
	 |	втОстатки.КоличествоОстаток - СУММА(ЕСТЬNULL(ЗаданияКладовщикамПоАдресу.ТребуемоеКоличество, 0)) > 0
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ПОДСТРОКА(втСвободныйОстаток.Адрес, 1, 3) КАК Секция,
	 |	СУММА(ВЫБОР
	 |			КОГДА втСвободныйОстаток.Количество > ЕСТЬNULL(втСвободныйРезерв.Количество, 0)
	 |				ТОГДА ЕСТЬNULL(втСвободныйРезерв.Количество, 0)
	 |			ИНАЧЕ втСвободныйОстаток.Количество
	 |		КОНЕЦ) КАК Требуется,
	 |	СУММА(ВЫБОР
	 |			КОГДА втСвободныйОстаток.Количество > ЕСТЬNULL(втСвободныйРезерв.Количество, 0)
	 |				ТОГДА ЕСТЬNULL(втСвободныйРезерв.Количество, 0)
	 |			ИНАЧЕ втСвободныйОстаток.Количество
	 |		КОНЕЦ * ЕСТЬNULL(МГХ.ОбъемЕд, 0)) КАК Объем
	 |ИЗ
	 |	втСвободныйОстаток КАК втСвободныйОстаток
	 |		ЛЕВОЕ СОЕДИНЕНИЕ втСвободныйРезерв КАК втСвободныйРезерв
	 |		ПО втСвободныйОстаток.Товар = втСвободныйРезерв.Товар
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МассоГабаритныеХарактеристики КАК МГХ
	 |		ПО втСвободныйОстаток.Товар = МГХ.Товар
	 |ГДЕ
	 |	ЕСТЬNULL(втСвободныйРезерв.Количество, 0) > 0
	 |	И втСвободныйОстаток.Количество > 0
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ПОДСТРОКА(втСвободныйОстаток.Адрес, 1, 3)
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ втРезервы
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ втОстатки
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ втСвободныйРезерв
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ втСвободныйОстаток";
	 
	 возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	 
 КонецФункции
 //Подбор
 Функция ПолучитьСекции(Клиент,Ряд)
	 Запрос = Новый Запрос;
	 Запрос.УстановитьПараметр("Клиент", Клиент);
	 Запрос.УстановитьПараметр("Ряд", Ряд);
	 Запрос.Текст = "ВЫБРАТЬ
	 |	РезервыТоваров.Клиент,
	 |	РезервыТоваров.Номенклатура КАК Товар,
	 |	СУММА(РезервыТоваров.Количество) КАК ЖесткийРезерв
	 |ПОМЕСТИТЬ втРезервы
	 |ИЗ
	 |	РегистрНакопления.РезервыТоваров КАК РезервыТоваров
	 |ГДЕ
	 |	ТИПЗНАЧЕНИЯ(РезервыТоваров.Регистратор) = ТИП(Документ.ЗаявкаНаТоварДляФилиала)
	 |	И РезервыТоваров.Клиент = &Клиент
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	РезервыТоваров.Клиент,
	 |	РезервыТоваров.Номенклатура
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	втРезервы.Товар,
	 |	Счет_41_АдресныйОстатки.Адрес,
	 |	СУММА(ЕСТЬNULL(Счет_41_АдресныйОстатки.КоличествоОстаток, 0)) КАК КоличествоОстаток
	 |ПОМЕСТИТЬ втОстатки
	 |ИЗ
	 |	втРезервы КАК втРезервы
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Счет_41_Адресный.Остатки(, (НЕ НеОприходованныйТовар)) КАК Счет_41_АдресныйОстатки
	 |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АдресаМестХранения КАК АдресаМестХранения
	 |			ПО (АдресаМестХранения.Адрес = Счет_41_АдресныйОстатки.Адрес)
	 |				И (АдресаМестХранения.НазначениеМестаХранения = ЗНАЧЕНИЕ(Перечисление.НазначениеМестаХранения.БыстрыйНабор))
	 |				И ((НЕ АдресаМестХранения.Заблокирован))
	 |				И ((НЕ АдресаМестХранения.Адрес = """"))
	 |				И ((НЕ АдресаМестХранения.Адрес = ""А01-01-1""))
	 |		ПО втРезервы.Товар = Счет_41_АдресныйОстатки.Номенклатура
	 |			И (ПОДСТРОКА(Счет_41_АдресныйОстатки.Адрес, 1, 3) = &Ряд)
	 |ГДЕ
	 |	ЕСТЬNULL(Счет_41_АдресныйОстатки.КоличествоОстаток, 0) > 0
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	втРезервы.Товар,
	 |	Счет_41_АдресныйОстатки.Адрес
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	втРезервы.Товар,
	 |	втРезервы.ЖесткийРезерв - СУММА(ЕСТЬNULL(ЗаданияКладовщикамОбщие.ТребуемоеКоличество, 0)) КАК Количество
	 |ПОМЕСТИТЬ втСвободныйРезерв
	 |ИЗ
	 |	втРезервы КАК втРезервы
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКладовщикам2 КАК ЗаданияКладовщикамОбщие
	 |		ПО втРезервы.Клиент = ЗаданияКладовщикамОбщие.Клиент
	 |			И втРезервы.Товар = ЗаданияКладовщикамОбщие.Товар
	 |			И (ЗаданияКладовщикамОбщие.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.ВПодборе)
	 |				ИЛИ ЗаданияКладовщикамОбщие.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.Собрано)
	 |				ИЛИ ЗаданияКладовщикамОбщие.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.Завершено)
	 |				ИЛИ ЗаданияКладовщикамОбщие.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.Упаковано))
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	втРезервы.Товар,
	 |	втРезервы.ЖесткийРезерв
	 |
	 |ИМЕЮЩИЕ
	 |	втРезервы.ЖесткийРезерв - СУММА(ЕСТЬNULL(ЗаданияКладовщикамОбщие.ТребуемоеКоличество, 0)) > 0
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	втОстатки.Товар,
	 |	втОстатки.Адрес,
	 |	втОстатки.КоличествоОстаток - СУММА(ЕСТЬNULL(ЗаданияКладовщикамПоАдресу.ТребуемоеКоличество, 0)) КАК Количество
	 |ПОМЕСТИТЬ втСвободныйОстаток
	 |ИЗ
	 |	втОстатки КАК втОстатки
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКладовщикам2 КАК ЗаданияКладовщикамПоАдресу
	 |		ПО втОстатки.Товар = ЗаданияКладовщикамПоАдресу.Товар
	 |			И (ЗаданияКладовщикамПоАдресу.Адрес = втОстатки.Адрес)
	 |			И (ЗаданияКладовщикамПоАдресу.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.ВПодборе)
	 |				ИЛИ ЗаданияКладовщикамПоАдресу.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.Собрано))
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	втОстатки.Товар,
	 |	втОстатки.Адрес,
	 |	втОстатки.КоличествоОстаток
	 |
	 |ИМЕЮЩИЕ
	 |	втОстатки.КоличествоОстаток - СУММА(ЕСТЬNULL(ЗаданияКладовщикамПоАдресу.ТребуемоеКоличество, 0)) > 0
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ПОДСТРОКА(втСвободныйОстаток.Адрес, 1, 6) КАК Секция,
	 |	СУММА(ВЫБОР
	 |			КОГДА втСвободныйОстаток.Количество > ЕСТЬNULL(втСвободныйРезерв.Количество, 0)
	 |				ТОГДА ЕСТЬNULL(втСвободныйРезерв.Количество, 0)
	 |			ИНАЧЕ втСвободныйОстаток.Количество
	 |		КОНЕЦ) КАК Требуется,
	 |	СУММА(ВЫБОР
	 |			КОГДА втСвободныйОстаток.Количество > ЕСТЬNULL(втСвободныйРезерв.Количество, 0)
	 |				ТОГДА ЕСТЬNULL(втСвободныйРезерв.Количество, 0)
	 |			ИНАЧЕ втСвободныйОстаток.Количество
	 |		КОНЕЦ * ЕСТЬNULL(МГХ.ОбъемЕд, 0)) КАК Объем
	 |ИЗ
	 |	втСвободныйОстаток КАК втСвободныйОстаток
	 |		ЛЕВОЕ СОЕДИНЕНИЕ втСвободныйРезерв КАК втСвободныйРезерв
	 |		ПО втСвободныйОстаток.Товар = втСвободныйРезерв.Товар
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МассоГабаритныеХарактеристики КАК МГХ
	 |		ПО втСвободныйОстаток.Товар = МГХ.Товар
	 |ГДЕ
	 |	ЕСТЬNULL(втСвободныйРезерв.Количество, 0) > 0
	 |	И втСвободныйОстаток.Количество > 0
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ПОДСТРОКА(втСвободныйОстаток.Адрес, 1, 6)
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ втРезервы
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ втОстатки
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ втСвободныйРезерв
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ втСвободныйОстаток";
	 
	 
	 возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	 
 КонецФункции
 //Подбор
 Функция узнатьСледСекцию(Секция)
	 
	 ряды = ПолучитьСекции(СчитатьРег("Клиент"),Лев(Секция,3));
	 
	 Если  ряды.строки.Количество()=0 Тогда 
		 Возврат "Error";		
	 Иначе
		 
		 Запрос = Новый Запрос;
		 Запрос.Текст = 
		 "ВЫБРАТЬ РАЗЛИЧНЫЕ
		 |	ПОДСТРОКА(АдресаМестХранения.Адрес, 1, 6) КАК Секция
		 |ПОМЕСТИТЬ всесекции
		 |ИЗ
		 |	РегистрСведений.АдресаМестХранения КАК АдресаМестХранения
		 |ГДЕ
		 |	ПОДСТРОКА(АдресаМестХранения.Адрес, 1, 3) = ПОДСТРОКА(&считаннаясекция, 1, 3)
		 |	И ПОДСТРОКА(АдресаМестХранения.Адрес, 1, 6) <= &Конец
		 |	И ПОДСТРОКА(АдресаМестХранения.Адрес, 1, 6) >= &Начало
		 |;
		 |
		 |////////////////////////////////////////////////////////////////////////////////
		 |ВЫБРАТЬ
		 |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ всесекции.Секция) КАК Секция
		 |ПОМЕСТИТЬ количествовсех
		 |ИЗ
		 |	всесекции КАК всесекции
		 |;
		 |
		 |////////////////////////////////////////////////////////////////////////////////
		 |ВЫБРАТЬ
		 |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ всесекции.Секция) КАК Секция
		 |ПОМЕСТИТЬ текущаяпозиция
		 |ИЗ
		 |	всесекции КАК всесекции
		 |ГДЕ
		 |	всесекции.Секция < &считаннаясекция
		 |;
		 |
		 |////////////////////////////////////////////////////////////////////////////////
		 |ВЫБРАТЬ ПЕРВЫЕ 1
		 |	ВЫБОР
		 |		КОГДА количествовсех.Секция / 2 > ЕСТЬNULL(текущаяпозиция.Секция, количествовсех.Секция)
		 |				ИЛИ &считаннаясекция = &Начало
		 |			ТОГДА &Начало
		 |		ИНАЧЕ &Конец
		 |	КОНЕЦ КАК Секция
		 |ИЗ
		 |	количествовсех КАК количествовсех,
		 |	текущаяпозиция КАК текущаяпозиция
		 |;
		 |
		 |////////////////////////////////////////////////////////////////////////////////
		 |УНИЧТОЖИТЬ текущаяпозиция
		 |;
		 |
		 |////////////////////////////////////////////////////////////////////////////////
		 |УНИЧТОЖИТЬ количествовсех
		 |;
		 |
		 |////////////////////////////////////////////////////////////////////////////////
		 |УНИЧТОЖИТЬ всесекции";
		 начальнаясекция = ряды.Строки.Получить(0).Секция;
		 конечнаясекция  = ряды.Строки.Получить(ряды.строки.Количество()-1).Секция;
		 Запрос.УстановитьПараметр("считаннаясекция", Лев(Секция,6));
		 Запрос.УстановитьПараметр("Конец", конечнаясекция);
		 Запрос.УстановитьПараметр("Начало", начальнаясекция);
		 Результат = Запрос.Выполнить();
		 ИдтиВСекцию = Результат.Выбрать();
		 
		 Если ИдтиВСекцию.Следующий() Тогда
			 считаннаясекция = ИдтиВСекцию.Секция;
		 Иначе
			 считаннаясекция = начальнаясекция;
		 КонецЕсли;
		 Возврат считаннаясекция;	
		 
	 КонецЕсли;	
	 Возврат "Error";	
	 
 КонецФункции
 //Подбор
 Функция ВзятьЗаданиеНаПодбор(считаннаясекция)
	 ЗаписатьРег("Секция",считаннаясекция);//заглушка и нужно зафиксировать задание
	 ЗаписатьРег("считаннаясекция",считаннаясекция);//заглушка и нужно зафиксировать задание
	 Возврат ЗаписатьЗаданиеВРегистр(считаннаясекция,СчитатьРег("Клиент")); // ТУТ ЗДЕСЯ именно ТУТА мы создаем задания на подбор в регистре
	 //ЗаписатьЗначения("Выбор Задания ЗаписатьЗаданиеВРегистр",ТекущаяДатаМилисекунды() - ТекущиеМилисекунды,НомерПакета ,Истина);
	 //ТекущиеМилисекунды = ТекущаяДатаМилисекунды();
	 
	 
 КонецФункции
 //Подбор
 Функция ЗаписатьЗаданиеВРегистр(Секция,Клиент)
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	РезервыТоваров.Период,
	 |	РезервыТоваров.Регистратор,
	 |	РезервыТоваров.Клиент,
	 |	РезервыТоваров.Номенклатура КАК Товар,
	 |	СУММА(РезервыТоваров.Количество) КАК ЖесткийРезерв
	 |ПОМЕСТИТЬ втРезервы_Осн
	 |ИЗ
	 |	РегистрНакопления.РезервыТоваров КАК РезервыТоваров
	 |ГДЕ
	 |	ТИПЗНАЧЕНИЯ(РезервыТоваров.Регистратор) = ТИП(Документ.ЗаявкаНаТоварДляФилиала)
	 |	И РезервыТоваров.Клиент = &Клиент
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	РезервыТоваров.Период,
	 |	РезервыТоваров.Регистратор,
	 |	РезервыТоваров.Клиент,
	 |	РезервыТоваров.Номенклатура
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	втРезервы_Осн.Товар КАК Товар,
	 |	втРезервы_Осн.Клиент КАК Клиент,
	 |	СУММА(втРезервы_Осн.ЖесткийРезерв) КАК ЖесткийРезерв
	 |ПОМЕСТИТЬ втРезервы
	 |ИЗ
	 |	втРезервы_Осн КАК втРезервы_Осн
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	втРезервы_Осн.Товар,
	 |	втРезервы_Осн.Клиент
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	втРезервы.Товар,
	 |	Счет_41_АдресныйОстатки.Адрес,
	 |	СУММА(ЕСТЬNULL(Счет_41_АдресныйОстатки.КоличествоОстаток, 0)) КАК КоличествоОстаток
	 |ПОМЕСТИТЬ втОстатки
	 |ИЗ
	 |	втРезервы КАК втРезервы
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Счет_41_Адресный.Остатки(, (НЕ НеОприходованныйТовар)) КАК Счет_41_АдресныйОстатки
	 |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АдресаМестХранения КАК АдресаМестХранения
	 |			ПО (АдресаМестХранения.Адрес = Счет_41_АдресныйОстатки.Адрес)
	 |				И (АдресаМестХранения.НазначениеМестаХранения = ЗНАЧЕНИЕ(Перечисление.НазначениеМестаХранения.БыстрыйНабор))
	 |				И ((НЕ АдресаМестХранения.Заблокирован))
	 |				И ((НЕ АдресаМестХранения.Адрес = """"))
	 |				И ((НЕ АдресаМестХранения.Адрес = ""А01-01-1""))
	 |		ПО втРезервы.Товар = Счет_41_АдресныйОстатки.Номенклатура
	 |			И (ПОДСТРОКА(Счет_41_АдресныйОстатки.Адрес, 1, 6) = &Секция)
	 |ГДЕ
	 |	ЕСТЬNULL(Счет_41_АдресныйОстатки.КоличествоОстаток, 0) > 0
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	втРезервы.Товар,
	 |	Счет_41_АдресныйОстатки.Адрес
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 |	втРезервы.Товар,
	 |	втРезервы.ЖесткийРезерв - СУММА(ЕСТЬNULL(ЗаданияКладовщикамОбщие.ТребуемоеКоличество, 0)) КАК Количество
	 |ПОМЕСТИТЬ втСвободныйРезерв
	 |ИЗ
	 |	втРезервы КАК втРезервы
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКладовщикам2 КАК ЗаданияКладовщикамОбщие
	 |		ПО втРезервы.Клиент = ЗаданияКладовщикамОбщие.Клиент
	 |			И втРезервы.Товар = ЗаданияКладовщикамОбщие.Товар
	 |			И (ЗаданияКладовщикамОбщие.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.ВПодборе)
	 |				ИЛИ ЗаданияКладовщикамОбщие.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.Собрано)
	 |				ИЛИ ЗаданияКладовщикамОбщие.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.Завершено)
	 |				ИЛИ ЗаданияКладовщикамОбщие.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.Упаковано))
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	втРезервы.Товар,
	 |	втРезервы.ЖесткийРезерв
	 |
	 |ИМЕЮЩИЕ
	 |	втРезервы.ЖесткийРезерв - СУММА(ЕСТЬNULL(ЗаданияКладовщикамОбщие.ТребуемоеКоличество, 0)) > 0
	 |
	 |ДЛЯ ИЗМЕНЕНИЯ
	 |	РегистрСведений.ЗаданияКладовщикам2
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 |	втОстатки.Товар,
	 |	втОстатки.Адрес,
	 |	втОстатки.КоличествоОстаток - СУММА(ЕСТЬNULL(ЗаданияКладовщикамПоАдресу.ТребуемоеКоличество, 0)) КАК Количество
	 |ПОМЕСТИТЬ втСвободныйОстаток
	 |ИЗ
	 |	втОстатки КАК втОстатки
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКладовщикам2 КАК ЗаданияКладовщикамПоАдресу
	 |		ПО втОстатки.Товар = ЗаданияКладовщикамПоАдресу.Товар
	 |			И (ЗаданияКладовщикамПоАдресу.Адрес = втОстатки.Адрес)
	 |			И (ЗаданияКладовщикамПоАдресу.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.ВПодборе)
	 |				ИЛИ ЗаданияКладовщикамПоАдресу.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.Собрано))
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	втОстатки.Товар,
	 |	втОстатки.Адрес,
	 |	втОстатки.КоличествоОстаток
	 |
	 |ИМЕЮЩИЕ
	 |	втОстатки.КоличествоОстаток - СУММА(ЕСТЬNULL(ЗаданияКладовщикамПоАдресу.ТребуемоеКоличество, 0)) > 0
	 |
	 |ДЛЯ ИЗМЕНЕНИЯ
	 |	РегистрСведений.ЗаданияКладовщикам2
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	втСвободныйОстаток.Товар КАК Товар,
	 |	втСвободныйОстаток.Адрес КАК Адрес,
	 |	ВЫБОР
	 |		КОГДА втСвободныйОстаток.Количество > ЕСТЬNULL(втСвободныйРезерв.Количество, 0)
	 |			ТОГДА ЕСТЬNULL(втСвободныйРезерв.Количество, 0)
	 |		ИНАЧЕ втСвободныйОстаток.Количество
	 |	КОНЕЦ КАК Требуется
	 |ИЗ
	 |	втСвободныйОстаток КАК втСвободныйОстаток
	 |		ЛЕВОЕ СОЕДИНЕНИЕ втСвободныйРезерв КАК втСвободныйРезерв
	 |		ПО втСвободныйОстаток.Товар = втСвободныйРезерв.Товар
	 |ГДЕ
	 |	ЕСТЬNULL(втСвободныйРезерв.Количество, 0) > 0
	 |	И втСвободныйОстаток.Количество > 0
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 |	втРезервы_Осн.Регистратор КАК ЗаявкаНаТовар,
	 |	втРезервы_Осн.Товар,
	 |	втРезервы_Осн.ЖесткийРезерв - СУММА(ЕСТЬNULL(ЗаданияКладовщикамОбщие.ТребуемоеКоличество, 0)) КАК Количество
	 |ИЗ
	 |	втРезервы_Осн КАК втРезервы_Осн
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКладовщикам2 КАК ЗаданияКладовщикамОбщие
	 |		ПО втРезервы_Осн.Регистратор = ЗаданияКладовщикамОбщие.ЗаявкаНаТовар
	 |			И втРезервы_Осн.Товар = ЗаданияКладовщикамОбщие.Товар
	 |			И (ЗаданияКладовщикамОбщие.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.ВПодборе)
	 |				ИЛИ ЗаданияКладовщикамОбщие.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.Собрано)
	 |				ИЛИ ЗаданияКладовщикамОбщие.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.Завершено)
	 |				ИЛИ ЗаданияКладовщикамОбщие.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.Упаковано))
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	втРезервы_Осн.Регистратор,
	 |	втРезервы_Осн.Товар,
	 |	втРезервы_Осн.ЖесткийРезерв,
	 |	втРезервы_Осн.Период
	 |
	 |ИМЕЮЩИЕ
	 |	втРезервы_Осн.ЖесткийРезерв - СУММА(ЕСТЬNULL(ЗаданияКладовщикамОбщие.ТребуемоеКоличество, 0)) > 0
	 |
	 |ДЛЯ ИЗМЕНЕНИЯ
	 |	РегистрСведений.ЗаданияКладовщикам2
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	втРезервы_Осн.Период
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ втРезервы_Осн
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ втРезервы
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ втОстатки
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ втСвободныйРезерв
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ втСвободныйОстаток";
	 
	 Запрос.УстановитьПараметр("Клиент", Клиент);
	 Запрос.УстановитьПараметр("Секция", Секция);		
	 
	 Результат = Запрос.ВыполнитьПакет();
	 Если Результат[5].Пустой() Тогда				
		 Возврат "Не найдено заданий по данной секции!";			
	 КонецЕсли;
	 
	 ТекущийПользователь = ПараметрыСеанса.глТекПользователь;
	 ТекущаяДата = ТекущаяДатаСервер();
	 Перечисления_СтатусыЗаданийКладовщиков_ВПодборе = Перечисления.СтатусыЗаданийКладовщиков.ВПодборе;
	 
	 ДинамическаяЯчейка = СчитатьРег("ДинамическаяЯчейка");	
	 Ответ = ПолучитьДинамическуюЯчейку(ДинамическаяЯчейка,Клиент);	
	 Если не ПустаяСтрока(Ответ) ТОгда
		 УдалитьРег(ДинамическаяЯчейка);
		 УдалитьРег("ДинамическаяЯчейка");
	 КонецЕсли;
	 
	 ПараметрыОтбора = Новый Структура;
	 ТаблицаТоваров = Результат[5].Выгрузить();
	 ТаблицаРезервов = Результат[6].Выгрузить();
	 
	 Для каждого Товар из ТаблицаТоваров Цикл
		 Если Товар.Требуется = 0 Тогда продолжить; КонецЕсли;
		 ПараметрыОтбора.Вставить("Товар",Товар.Товар);
		 Резервы = ТаблицаРезервов.НайтиСтроки(ПараметрыОтбора);
		 Если Резервы.Количество() = 0 Тогда ПРодолжить; КонецЕсли;
		 Для каждого Резерв из Резервы Цикл
			 Если Резерв.Количество = 0 Тогда Продолжить; КонецЕсли;
			 Если Резерв.Количество > Товар.Требуется Тогда
				 Количество = Товар.Требуется;
				 Товар.Требуется = 0;
				 Резерв.Количество = Резерв.Количество - Количество;
			 Иначе
				 Количество = Резерв.Количество;
				 Резерв.Количество = 0;
				 Товар.Требуется =  Товар.Требуется - Количество;
			 КонецЕсли;
			 Если Количество = 0 Тогда Продолжить; КонецЕсли;
			 НаборЗадания = РегистрыСведений.ЗаданияКладовщикам2.СоздатьМенеджерЗаписи();
			 НаборЗадания.КлючУникальности = Новый УникальныйИдентификатор;
			 НаборЗадания.Клиент = Клиент; 
			 НаборЗадания.Товар = Товар.Товар;
			 НаборЗадания.Адрес = Товар.Адрес;					
			 НаборЗадания.ЗаявкаНаТовар = Резерв.ЗаявкаНаТовар;				
			 НаборЗадания.Автор = ТекущийПользователь;
			 НаборЗадания.ТребуемоеКоличество = Количество;
			 НаборЗадания.СобралиВКоличестве = 0;
			 НаборЗадания.Статус = Перечисления_СтатусыЗаданийКладовщиков_ВПодборе;
			 НаборЗадания.ВремяНачалаЗадания = ТекущаяДата;
			 ЗаписатьВТранзакции(НаборЗадания);
		 КонецЦикла;
	 КонецЦикла;
	 ЗаписатьРег("ВремяНачалаЗадания", ТекущаяДатаСервер());
	 Возврат "";
 КонецФункции
 //Подбор
 Функция ЗакрытьЗаданиеСВычерками(ТоварСтроки,Количество)
	 Клиент = СчитатьРег("Клиент");
	 ТекущийФилиал = Константы.ТекущийСклад.Получить();
	 Автор = ПараметрыСеанса.глТекПользователь;
	 ДинамическаяЯчейка = СчитатьРег("ДинамическаяЯчейка");
	 Адрес = СчитатьРег("Адрес");
	 //НомерЗаданияНаПодбор = СчитатьРег("НомерЗаданияНаПодбор");
	 ~Транзакция1:
	 Попытка
		 НачатьТранзакцию();
		 // Закрытие заданий
		 Запрос = Новый Запрос("ВЫБРАТЬ
		 |	ЗаданияКладовщикам2.ТребуемоеКоличество КАК ТребуемоеКоличество,
		 |	ЗаданияКладовщикам2.КлючУникальности КАК КлючУникальности
		 |ИЗ
		 |	РегистрСведений.ЗаданияКладовщикам2 КАК ЗаданияКладовщикам2
		 |ГДЕ
		 |	ЗаданияКладовщикам2.Товар = &Товар
		 //|	И ЗаданияКладовщикам2.НомерЗадания = &НомерЗадания
		 |	И ЗаданияКладовщикам2.Автор = &Автор
		 |	И ЗаданияКладовщикам2.Адрес = &Адрес
		 |	И ЗаданияКладовщикам2.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.ВПодборе)");
		 
		 Запрос.УстановитьПараметр("Автор", Автор);
		 Запрос.УстановитьПараметр("ДинамическаяЯчейка", ДинамическаяЯчейка);
		 Запрос.УстановитьПараметр("Товар", ТоварСтроки);
		 //Запрос.УстановитьПараметр("НомерЗадания", НомерЗаданияНаПодбор);
		 Запрос.УстановитьПараметр("Адрес", Адрес);			
		 Результат = Запрос.Выполнить();
		 
		 Если НЕ Результат.Пустой() Тогда
			 
			 Выборка = Результат.Выбрать();
			 
			 Пока Выборка.Следующий() Цикл
				 
				 // Запись в регистр
				 МЗ = РегистрыСведений.ЗаданияКладовщикам2.СоздатьМенеджерЗаписи();
				 МЗ.КлючУникальности = Выборка.КлючУникальности;
				 
				 МЗ.Прочитать();
				 
				 Если МЗ.Выбран() Тогда
					 
					 МЗ.ВремяЗавершенияЗадания = ТекущаяДатаСервер();
					 МЗ.Статус = Перечисления.СтатусыЗаданийКладовщиков.Вычерк;
					 МЗ.Исполнитель = Автор;
					 МЗ.Записать();
					 
					 СписатьЖесткийРезерв(МЗ);
					 ЗаписатьРег("ЗаписьР.КлючУникальности",Выборка.КлючУникальности);
					 
				 КонецЕсли;
				 
			 КонецЦикла;
			 
		 КонецЕсли;
		 
		 
		 // Перенос мягких резервов в жёсткий(Если есть листы разногласий на переехавший товар).	
		 ЗапросРезервов = Новый Запрос;
		 ЗапросРезервов.Текст = "ВЫБРАТЬ
		 |	РезервыТоваров.Регистратор КАК Регистратор,
		 |	ЕСТЬNULL(СУММА(РезервыТоваров.МягкийРезерв), 0) КАК МягкийРезерв,
		 |	РезервыТоваров.Клиент КАК Клиент
		 |ИЗ
		 |	РегистрНакопления.РезервыТоваров КАК РезервыТоваров
		 |ГДЕ
		 |	РезервыТоваров.Номенклатура = &Номенклатура
		 |	И РезервыТоваров.Регистратор ССЫЛКА Документ.ЛистРазногласий
		 |
		 |СГРУППИРОВАТЬ ПО
		 |	РезервыТоваров.Регистратор,
		 |	РезервыТоваров.Клиент
		 |
		 |ИМЕЮЩИЕ
		 |	ЕСТЬNULL(СУММА(РезервыТоваров.МягкийРезерв), 0) > 0
		 |
		 |УПОРЯДОЧИТЬ ПО
		 |	РезервыТоваров.Регистратор.Дата";
		 
		 ЗапросРезервов.УстановитьПараметр("Номенклатура", ТоварСтроки);	
		 
		 ТаблицаРезервов = ЗапросРезервов.Выполнить().Выгрузить();
		 
		 ОсталосьСкорректировать = Количество;
		 
		 Для Каждого Стр Из ТаблицаРезервов Цикл
			 
			 Если НЕ ОсталосьСкорректировать > 0 Тогда Прервать; КонецЕсли;
			 
			 Если ОсталосьСкорректировать > Стр.МягкийРезерв Тогда
				 
				 КоличествоДляКорректировки = Стр.МягкийРезерв;
				 
				 ОсталосьСкорректировать = ОсталосьСкорректировать - Стр.МягкийРезерв;
				 
			 Иначе
				 
				 КоличествоДляКорректировки = ОсталосьСкорректировать;
				 
				 ОсталосьСкорректировать = 0;
				 
			 КонецЕсли;    
			 
			 НЗ = РегистрыНакопления.РезервыТоваров.СоздатьНаборЗаписей();
			 НЗ.Отбор.Регистратор.Значение = Стр.Регистратор;
			 НЗ.Отбор.Регистратор.Использование = Истина;
			 
			 НЗ.Прочитать();
			 
			 Для Каждого СтрокаНабора Из НЗ Цикл
				 
				 Если НЕ (СтрокаНабора.Номенклатура = ТоварСтроки И СтрокаНабора.МягкийРезерв > 0) Тогда Продолжить; КонецЕсли;
				 
				 СтрокаНабора.МягкийРезерв = СтрокаНабора.МягкийРезерв - КоличествоДляКорректировки;
				 СтрокаНабора.Количество = СтрокаНабора.Количество + КоличествоДляКорректировки;
				 
			 КонецЦикла;    
			 
			 НЗ.Записать();
			 
		 КонецЦикла;
		 
		 ЗафиксироватьТранзакцию();
	 Исключение
		 
		 ОтменитьТранзакцию();
		 ОписаниеОшибки = ОписаниеОшибки();
		 Если Найти(НРег(ОписаниеОшибки), "конфликт блокировок") > 0 Тогда
			 Sleep(3); //Задержка на 3 мс.
			 Перейти ~Транзакция1;
			 
		 КонецЕсли;
		 //ВызватьИсключение ОписаниеОшибки;
		 Возврат ОписаниеОшибки;				
	 КонецПопытки;	
	 УдалитьРег("ВремяНачалаЗадания");
	 Возврат "";		
 КонецФункции
 //Подбор
 Процедура СписатьЖесткийРезерв(МЗ)
	 
	 НЗ = РегистрыНакопления.РезервыТоваров.СоздатьНаборЗаписей();
	 НЗ.Отбор.Регистратор.Установить(МЗ.ЗаявкаНаТовар);
	 НЗ.Прочитать();
	 
	 БылиИзменения = Ложь;
	 
	 Для Каждого Запись Из НЗ Цикл
		 Если Запись.Номенклатура = МЗ.Товар Тогда
			 БылиИзменения = Истина;
			 Запись.Количество = Запись.Количество - МЗ.ТребуемоеКоличество;
			 Если (Запись.Количество = 0) И (Запись.МягкийРезерв = 0) Тогда
				 НЗ.Удалить(Запись);
			 КонецЕсли;
			 Прервать;
		 КонецЕсли;
	 КонецЦикла;
	 
	 Если БылиИзменения Тогда
		 НЗ.Записать();
	 КонецЕсли;
	 
 КонецПроцедуры
 //Подбор
 Функция ПодборТовараПоШК(Код,Автор,Клиент,Количество)
	 Список = ПолучитьСписокТовараПоСчитаномуКоду(Код);
	 Если Список.Количество()=0  Тогда
		 Запрос = Новый Запрос;
		 Запрос.Текст = 
		 "ВЫБРАТЬ
		 |	СерийныеНомера.Товар,
		 |	СерийныеНомера.Поставщик
		 |ИЗ
		 |	РегистрСведений.СерийныеНомера КАК СерийныеНомера
		 |ГДЕ
		 |	СерийныеНомера.СерийныйНомер = &Код";
		 Запрос.УстановитьПараметр("Код", Код);
		 Результат = Запрос.Выполнить();
		 ВыборкаДетальныеЗаписи = Результат.Выбрать();
		 Если не ВыборкаДетальныеЗаписи.Следующий() Тогда Возврат "Не найден товар по считанному коду!"; КонецЕсли;
		 список.Добавить(ВыборкаДетальныеЗаписи.Товар);
		 поставщик = ВыборкаДетальныеЗаписи.Поставщик;
	 КонецЕсли;
	 Если Список.Количество()>1  Тогда
		 ЗаписатьРег("СписокВыбораТовара",Список);
		 возврат "Выбор";
	 КонецЕсли;
	 
	 
	 ВыбТовар = Неопределено;		
	 Если Список.Количество() > 0 Тогда		
		 ВыбТовар = Список.Получить(0);//.Значение;
	 КонецЕсли;
	 ЗаписатьРег("ВыбТовар",ВыбТовар);
	 
	 ШКОбработан = ЗначениеЗаполнено(ВыбТовар);
	 Если НЕ ШКОбработан Тогда
		 Возврат "Не найден товар по считанному коду!";
	 КонецЕсли;
	 ЗапросЗаданий = Новый Запрос;
	 
	 ЗапросЗаданий.Текст = "ВЫБРАТЬ
	 |	СУММА(ЗаданияКладовщикам2.ТребуемоеКоличество) КАК ТребуемоеКоличество
	 |ИЗ
	 |	РегистрСведений.ЗаданияКладовщикам2 КАК ЗаданияКладовщикам2
	 |ГДЕ
	 |	ЗаданияКладовщикам2.Адрес = &Адрес
	 |	И ЗаданияКладовщикам2.Товар = &Товар
	 //|	И ЗаданияКладовщикам2.НомерЗадания = &НомерЗадания
	 |	И ЗаданияКладовщикам2.Автор = &Автор
	 |	И ЗаданияКладовщикам2.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.ВПодборе)
	 |
	 |ИМЕЮЩИЕ
	 |	СУММА(ЗаданияКладовщикам2.ТребуемоеКоличество) < &Количество";		
	 
	 
	 ЗапросЗаданий.УстановитьПараметр("Адрес", Считатьрег("Адрес"));
	 ЗапросЗаданий.УстановитьПараметр("Товар", ВыбТовар);
	 ЗапросЗаданий.УстановитьПараметр("Количество", Количество);
	 ЗапросЗаданий.УстановитьПараметр("Клиент", Клиент);
	 ЗапросЗаданий.УстановитьПараметр("Автор", Автор);
	 Выборка = ЗапросЗаданий.Выполнить().Выбрать();
	 Если Выборка.Следующий() Тогда 
		 Возврат "Нехватает "+Строка(Количество - Выборка.ТребуемоеКоличество)+" шт.";
	 КонецЕсли;                                           
	 ЗапросЗаданий.Текст = "ВЫБРАТЬ
	 |	ЗаданияКладовщикам2.КлючУникальности
	 |ИЗ
	 |	РегистрСведений.ЗаданияКладовщикам2 КАК ЗаданияКладовщикам2
	 |ГДЕ
	 |	ЗаданияКладовщикам2.Адрес = &Адрес
	 |	И ЗаданияКладовщикам2.Товар = &Товар
	 |	И ЗаданияКладовщикам2.Автор = &Автор
	 |	И ЗаданияКладовщикам2.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.ВПодборе)";		
	 
	 
	 
	 таблица = ЗапросЗаданий.Выполнить().Выбрать();
	 
	 Если не таблица.Следующий() Тогда 
		 Если не ЗначениеЗаполнено(Считатьрег("Адрес")) Тогда 
			 Возврат "Необходимо сканировать Адрес";	
		 КонецЕсли;
		 Возврат "отсутствует в задании или по адресу "+Считатьрег("Адрес");
	 КонецЕсли;
	 Если 	 Количество < 0 Тогда возврат ЗакрытьЗаданиеСВычерками(ВыбТовар,-Количество); КонецЕсли;
	 ДинамическаяЯчейка = СчитатьРег("ДинамическаяЯчейка");
	 ОставшеесяКоличество = Количество;
	 Ответ = "";
	 таблица.Сбросить();
	 пока таблица.Следующий() и ОставшеесяКоличество>0 Цикл
		 ЗаписьР = РегистрыСведений.ЗаданияКладовщикам2.СоздатьМенеджерЗаписи();    
		 ЗаписьР.КлючУникальности = Таблица.КлючУникальности;
		 ЗаписьР.Прочитать();
		 Если ЗаписьР.Выбран() Тогда 
			 Если ОставшеесяКоличество >= ЗаписьР.ТребуемоеКоличество Тогда
				 ЗаписьР.СобралиВКоличестве = ЗаписьР.ТребуемоеКоличество;
				 ЗаписьР.Исполнитель = Автор;
				 ЗаписьР.ВремяЗавершенияЗадания = ТекущаяДатаСервер();						
				 ЗаписьР.Статус = Перечисления.СтатусыЗаданийКладовщиков.Собрано;
				 ЗаписьР.ДинамическаяЯчейка = ДинамическаяЯчейка;
				 //СтарыйСТ = СчитатьРег("ДинамическаяЯчейка");
				 УдалитьРег(ДинамическаяЯчейка);
				 ЗаписатьВТранзакции(ЗаписьР);				
				 //ЗаписьР.Записать();
				 ОставшеесяКоличество = ОставшеесяКоличество - ЗаписьР.ТребуемоеКоличество;
				 ЗаписатьРег("ЗаписьР.КлючУникальности",ЗаписьР.КлючУникальности);
			 Иначе
				 
				 ЗаписьР.ТребуемоеКоличество = ЗаписьР.ТребуемоеКоличество - ОставшеесяКоличество;
				 ЗаписатьВТранзакции(ЗаписьР);
				 //ЗаписьР.Записать();
				 
				 НоваяЗапись = РегистрыСведений.ЗаданияКладовщикам2.СоздатьМенеджерЗаписи();
				 ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьР, , "КлючУникальности, ТребуемоеКоличество, СобралиВКоличестве, Статус");
				 НоваяЗапись.КлючУникальности = Новый УникальныйИдентификатор;
				 НоваяЗапись.ТребуемоеКоличество = ОставшеесяКоличество;
				 НоваяЗапись.СобралиВКоличестве = ОставшеесяКоличество;						
				 НоваяЗапись.Исполнитель = Автор;
				 НоваяЗапись.ВремяЗавершенияЗадания = ТекущаяДатаСервер();						
				 НоваяЗапись.Статус = Перечисления.СтатусыЗаданийКладовщиков.Собрано;
				 НоваяЗапись.ДинамическаяЯчейка = ДинамическаяЯчейка;
				 ЗаписатьВТранзакции(НоваяЗапись);
				 //НоваяЗапись.Записать();
				 ОставшеесяКоличество = 0;						
				 ЗаписатьРег("ЗаписьР.КлючУникальности",НоваяЗапись.КлючУникальности);
				 
			 КонецЕсли;	
		 Иначе
			 Ответ = Ответ+ " немогу найти задание "+Таблица.КлючУникальности;
		 КонецЕсли;
	 КонецЦикла;
	 возврат Ответ;
	 
 КонецФункции
 //Динамические Ячейки 
 Функция ПроверитьДинамическуюЯчейку(скан)
	 Если скан.ТипДанных = 4 Тогда
		 Адреса = РегистрыСведений.АдресаМестХранения;
		 ОтборАдреса = Новый Структура("Адрес");
		 ОтборАдреса.Адрес = скан.Данные;
		 ВыборкаАдреса = Адреса.Выбрать(ОтборАдреса);
		 Если ВыборкаАдреса.Следующий() Тогда	
			 скан.Данные = ВыборкаАдреса.Адрес; 
			 скан.ТипДанных = ?(ВыборкаАдреса.НазначениеМестаХранения = Перечисления.НазначениеМестаХранения.ДинамическаяЯчейка,11,4);
		 КонецЕсли;
	 КонецЕсли;	 
	 Возврат скан;
 КонецФункции
 //Динамические Ячейки 
 Функция ПереместитьВДинамическуюЯчейку()
	 
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 |	ЗаданияКладовщикам2.Товар,
	 |	ЗаданияКладовщикам2.СобралиВКоличестве КАК Количество,
	 |	ЗаданияКладовщикам2.Адрес КАК АдресОтправитель,
	 |	ЗаданияКладовщикам2.КлючУникальности,
	 |	ЗаданияКладовщикам2.ДинамическаяЯчейка КАК АдресПолучатель
	 |ИЗ
	 |	РегистрСведений.ЗаданияКладовщикам2 КАК ЗаданияКладовщикам2
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АдресаМестХранения КАК АдресаМестХранения
	 |		ПО ЗаданияКладовщикам2.ДинамическаяЯчейка = АдресаМестХранения.Адрес
	 |ГДЕ
	 |	ЗаданияКладовщикам2.Исполнитель = &Исполнитель
	 |	И ЗаданияКладовщикам2.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.Собрано)
	 |	И ЗаданияКладовщикам2.ДинамическаяЯчейка <> """"
	 |	И АдресаМестХранения.НазначениеМестаХранения = ЗНАЧЕНИЕ(Перечисление.НазначениеМестаХранения.ДинамическаяЯчейка)
	 |
	 |ДЛЯ ИЗМЕНЕНИЯ
	 |	РегистрСведений.ЗаданияКладовщикам2";
	 
	 Запрос.УстановитьПараметр("Исполнитель", ПараметрыСеанса.глТекПользователь);
	 Результат = Запрос.Выполнить();
	 
	 Если Результат.Пустой() Тогда Возврат ""; КонецЕсли;
	 
	 ТЗ = Результат.Выгрузить();
	 ТЗ.Свернуть("Товар,АдресОтправитель,АдресПолучатель", "Количество");
	 
	 Выборка = Результат.Выбрать();
	 Документ = Документы.ДвижениеТоваровПоСкладу.СоздатьДокумент();
	 Документ.Дата = ПолучитьОперативнуюОтметкуВремени();
	 Документ.Автор  = ПараметрыСеанса.глТекПользователь;
	 Документ.Автор2 = Справочники.Пользователи.ПустаяСсылка();
	 УстановитьНомерДокумента(Документ);
	 Документ.ВидДвижения = 1;
	 Документ.Операция =  Перечисления.ВидыСкладскихОпераций.ПодборТовара;
	 Документ.ВремяЗавершения = ТекущаяДатаСервер();
	 Документ.ВремяНачала = СчитатьРег("ВремяНачалаЗадания");
	 ЗаписатьРег("ВремяНачалаЗадания",Документ.ВремяЗавершения);
	 Документ.НеДелатьПроверок = Истина;
	 Документ.Состав.Загрузить(ТЗ);
	 
	 Попытка
		 НачатьТранзакцию();
		 Пока Выборка.Следующий() Цикл
			 ЗаписьР = РегистрыСведений.ЗаданияКладовщикам2.СоздатьМенеджерЗаписи();
			 ЗаписьР.КлючУникальности = Выборка.КлючУникальности;
			 ЗаписьР.Прочитать();
			 Если ЗаписьР.Выбран() Тогда	 
				 ЗаписьР.Статус = Перечисления.СтатусыЗаданийКладовщиков.Завершено;
				 ЗаписьР.Записать();
			 КонецЕсли;
		 КонецЦикла;
		 Документ.Записать(РежимЗаписиДокумента.Проведение);
		 
	 Исключение
		 
		 ОтменитьТранзакцию();
		 ошибка = "";
		 Попытка
			 ошибка = Документ.ДополнительныеСвойства.ОшибкаПриПроведении;	
		 Исключение
		 КонецПопытки;
		 //Документ.Записать();
		 Возврат "Документ не проведен по причине:"+ошибка + " , "+ ОписаниеОшибки();
	 КонецПопытки;
	 
	 ЗафиксироватьТранзакцию();
	 Возврат "";
 КонецФункции
 //Динамические Ячейки
 Функция ПолучитьДинамическуюЯчейку(знач ДинамическаяЯчейка,Клиент)
	 Ответ = "";
	 Если ПустаяСтрока(ДинамическаяЯчейка) Тогда Возврат Ответ; КонецЕсли;
	 Запрос = Новый Запрос("ВЫБРАТЬ
	 |	ЗаданияКладовщикам2.КлючУникальности КАК КлючУникальности,
	 |	ЗаданияКладовщикам2.Клиент.НаименованиеПолное КАК Клиент,
	 |	ЗаданияКладовщикам2.Исполнитель.Наименование КАК Исполнитель
	 |ИЗ
	 |	РегистрСведений.ЗаданияКладовщикам2 КАК ЗаданияКладовщикам2
	 |ГДЕ
	 |	ЗаданияКладовщикам2.ДинамическаяЯчейка = &ДинамическаяЯчейка
	 |	И (НЕ ЗаданияКладовщикам2.Клиент = &Клиент)
	 |	И (ЗаданияКладовщикам2.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.Собрано)
	 |			ИЛИ ЗаданияКладовщикам2.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.Завершено))");
	 
	 Запрос.УстановитьПараметр("ДинамическаяЯчейка", ДинамическаяЯчейка);
	 Запрос.УстановитьПараметр("Клиент", Клиент);
	 //Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.глТекПользователь);
	 Результат = Запрос.Выполнить();
	 
	 Если НЕ Результат.Пустой() Тогда
		 Выборка = Результат.Выбрать();
		 Выборка.Следующий();
		 Ответ = "ДЯ занята "+Выборка.Исполнитель+" для подбора "+Выборка.Клиент;
	 Иначе	
		 Запрос.Текст = "ВЫБРАТЬ
		 |	ВебСервисТСД.Пользователь,
		 |	ВебСервисТСД.Переменная,
		 |	ВебСервисТСД.Хранилище,
		 |	ВебСервисТСД.Пользователь.Наименование КАК Исполнитель
		 |ИЗ
		 |	РегистрСведений.ВебСервисТСД КАК ВебСервисТСД
		 |ГДЕ
		 |	ВебСервисТСД.Переменная = &ДинамическаяЯчейка";
		 Запрос.УстановитьПараметр("ДинамическаяЯчейка",ДинамическаяЯчейка);
		 
		 Результат = Запрос.Выполнить();
		 
		 Если НЕ Результат.Пустой() Тогда
			 Выборка = Результат.Выбрать();
			 Выборка.Следующий();
			 КлиентТС = Выборка.Хранилище;
			 попытка КлиентТС = Выборка.Хранилище.Получить();Исключение КонецПопытки;
			 Если КлиентТС <> Клиент или (КлиентТС = "Дефрагментации" и Выборка.ПОльзователь <> ПараметрыСеанса.глТекПользователь)Тогда
				 Ответ = "ДЯ занята "+Выборка.Исполнитель+" для подбора "+Строка(КлиентТС);
			 КонецЕсли;
			 
		 КонецЕсли;
		 
	 КонецЕсли;
	 Если ПустаяСтрока(Ответ) ТОгда
		 СтарыйСТ = СчитатьРег("ДинамическаяЯчейка");
		 УдалитьРег(СтарыйСТ);
		 ЗаписатьРег(ДинамическаяЯчейка,Клиент);
		 ЗаписатьРег("ДинамическаяЯчейка",ДинамическаяЯчейка);
		 
	 КонецЕсли;
	 
	 
	 Возврат Ответ;	
 КонецФункции
 //Динамические Ячейки
 Функция ОсвободитьДинамическуюЯчейку()
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	 |	ВебСервисТСД.Пользователь,
	 |	ВебСервисТСД.Переменная,
	 |	ВебСервисТСД.Хранилище,
	 |	ВебСервисТСД.Пользователь.Наименование КАК Исполнитель
	 |ИЗ
	 |	РегистрСведений.ВебСервисТСД КАК ВебСервисТСД
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АдресаМестХранения КАК АдресаМестХранения
	 |		ПО ВебСервисТСД.Переменная = АдресаМестХранения.Адрес
	 |ГДЕ
	 |	ВебСервисТСД.Пользователь = &Пользователь
	 |	И АдресаМестХранения.НазначениеМестаХранения = Значение(Перечисление.НазначениеМестаХранения.ДинамическаяЯчейка)";
	 
	 Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.глТекПользователь);
	 Выборка = Запрос.Выполнить().Выбрать();
	 Пока Выборка.Следующий() Цикл
		 УдалитьРег(Выборка.Переменная);
		 
	 КонецЦикла;	
	 УдалитьРег("ДинамическаяЯчейка");
 КонецФункции
 //Динамические Ячейки 
 Функция ЭтоДинамическаяЯчейка(Адрес)
	 Если Адрес  = неопределено или пустаястрока(Адрес) Тогда Возврат Ложь; КонецЕсли;
	 Адреса = РегистрыСведений.АдресаМестХранения;
	 ОтборАдреса = Новый Структура("Адрес");
	 ОтборАдреса.Адрес = Адрес;
	 ВыборкаАдреса = Адреса.Выбрать(ОтборАдреса);
	 Если ВыборкаАдреса.Следующий() Тогда	
		 возврат ?(ВыборкаАдреса.НазначениеМестаХранения = Перечисления.НазначениеМестаХранения.ДинамическаяЯчейка,Истина,Ложь);
	 КонецЕсли;
	 Возврат Ложь;
 КонецФункции
 
 
 //Инвентаризация=============================================================================
 Процедура РазблокироватьАдрес(Адрес)
	 МЗАдрес       = РегистрыСведений.АдресаМестХранения.СоздатьМенеджерЗаписи();
	 МЗАдрес.Адрес = Адрес;
	 МЗАдрес.Прочитать();
	 Если МЗАдрес.Выбран() Тогда
		 Если МЗАдрес.Заблокирован Тогда
			 МЗАдрес.Заблокирован = Ложь;
			 //МЗАдрес.ДатаПоследнейИнвентаризации = ТекущаяДатаСервер();
			 МЗАдрес.Записать();
		 КонецЕсли;
	 КонецЕсли;
 КонецПРоцедуры			
 //Инвентаризация
 Функция ПытатьсяБлокироватьАдрес(Адрес)
	 МЗАдрес       = РегистрыСведений.АдресаМестХранения.СоздатьМенеджерЗаписи();
	 МЗАдрес.Адрес = Адрес;
	 МЗАдрес.Прочитать();
	 Если МЗАдрес.Выбран() Тогда
		 Если МЗАдрес.Заблокирован Тогда
			 Возврат Ложь;
		 Иначе
			 МЗАдрес.Заблокирован = Истина;
			 //МЗАдрес.ДатаПоследнейИнвентаризации = ТекущаяДатаСервер();
			 МЗАдрес.Записать();
			 Возврат Истина;
		 КонецЕсли;
	 КонецЕсли;
	 Возврат ЛОжь;
 КонецФункции
 
 //Проверка===================================
 Функция ЗакрытьЗаданияПроверки()
	 
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	МАКСИМУМ(ПроверкаТоваров.КоличествоПроверенное) КАК КоличествоПроверенное,
	 |	ПроверкаТоваров.Адрес КАК Адрес,
	 |	ПроверкаТоваров.Номенклатура
	 |ПОМЕСТИТЬ Адреса
	 |ИЗ
	 |	РегистрСведений.ПроверкаТоваров КАК ПроверкаТоваров
	 |ГДЕ
	 |	ПроверкаТоваров.СтатусЗадания = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийПроверкиТовара.Выполняется)
	 |	И (НЕ ПроверкаТоваров.ПометкаУдаления)
	 |	И ПроверкаТоваров.Исполнитель = &Исполнитель
	 |	И ПроверкаТоваров.Адрес <> """"
	 |	И (НЕ ПроверкаТоваров.Адрес ЕСТЬ NULL )
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ПроверкаТоваров.Адрес,
	 |	ПроверкаТоваров.Номенклатура
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	СУММА(Адреса.КоличествоПроверенное) КАК КоличествоПроверенное,
	 |	Адреса.Номенклатура
	 |ПОМЕСТИТЬ Товары
	 |ИЗ
	 |	Адреса КАК Адреса
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	Адреса.Номенклатура
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ПроверкаТоваров.НомерЗадания КАК НомерЗадания,
	 |	Товары.КоличествоПроверенное,
	 |	Товары.Номенклатура
	 |ИЗ
	 |	РегистрСведений.ПроверкаТоваров КАК ПроверкаТоваров
	 |		ЛЕВОЕ СОЕДИНЕНИЕ Товары КАК Товары
	 |		ПО ПроверкаТоваров.Номенклатура = Товары.Номенклатура
	 |			И (ПроверкаТоваров.Адрес = """"
	 |				ИЛИ ПроверкаТоваров.Адрес ЕСТЬ NULL )
	 |ГДЕ
	 |	ПроверкаТоваров.СтатусЗадания = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийПроверкиТовара.Выполняется)
	 |	И (НЕ ПроверкаТоваров.ПометкаУдаления)
	 |	И ПроверкаТоваров.Исполнитель = &Исполнитель
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ Адреса
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ Товары";
	 
	 
	 
	 
	 
	 Запрос.УстановитьПараметр("Исполнитель", ПараметрыСеанса.глТекПользователь);
	 Результат = Запрос.Выполнить();
	 таблица = Результат.Выбрать();
	 
	 
	 Если не таблица.Следующий() Тогда 
		 Возврат "Произошла Ошибка:нет заданий";
	 КонецЕсли;
	 таблица.Сбросить();
	 Ответ = "";
	 пока таблица.Следующий() Цикл
		 ЗаписьР = РегистрыСведений.ПроверкаТоваров.СоздатьМенеджерЗаписи();    
		 ЗаписьР.НомерЗадания = таблица.НомерЗадания;
		 ЗаписьР.Прочитать();
		 Если ЗаписьР.Выбран() Тогда 
			 ЗаписьР.СтатусЗадания = Перечисления.СтатусыЗаданийПроверкиТовара.Завершено;
			 ЗаписьР.ДатаОкончания = ТекущаяДатаСервер();
			 Если ЗаписьР.КоличествоПроверенное = null или ЗаписьР.КоличествоПроверенное = 0 Тогда 
				 ЗаписьР.КоличествоПроверенное = таблица.КоличествоПроверенное;
			 КонецЕсли;
			 ЗаписатьВТранзакции(ЗаписьР);
			 //ЗаписьР.Записать();
		 Иначе
			 Ответ = Ответ+ " немогу найти задание "+Таблица.КлючУникальности;
		 КонецЕсли;
	 КонецЦикла;
	 
	 
	 возврат Ответ;
 КонецФункции
 //Проверка
 Функция СканВыбораЗаданияНаПроверку(Данные,Количество)	
	 ШтрихКод = СокрЛП(Данные);
	 Ответ = "";
	 Автор = ПараметрыСеанса.глТекПользователь;
	 Структура = ПрочитатьШтрихКод(ШтрихКод);
	 ЗаписатьРег("СчитаныйШК.ТипДанных",Структура.ТипДанных);
	 Если Структура.ТипДанных = 0 Тогда
		 Возврат "Ненужно сканировать бэйджик";
	 ИначеЕсли Структура.ТипДанных = 11 Тогда // Складской транспорт	
		 Возврат "Транспорт не требуется";
	 ИначеЕсли Структура.ТипДанных = 7 Тогда // Складской транспорт	
		 Возврат "Транспорт не требуется";
	 ИначеЕсли Структура.ТипДанных = 4 Тогда // Адрес 
		 Возврат "Рано сканировали адрес !!!";
	 ИначеЕсли Структура.ТипДанных = 3 Тогда // Товар
		 Список = ПолучитьСписокТовараПоСчитаномуКоду(Данные);
		 
		 Если Список.Количество()=0  Тогда
			 Запрос = Новый Запрос;
			 Запрос.Текст = 
			 "ВЫБРАТЬ
			 |	СерийныеНомера.Товар,
			 |	СерийныеНомера.Поставщик
			 |ИЗ
			 |	РегистрСведений.СерийныеНомера КАК СерийныеНомера
			 |ГДЕ
			 |	СерийныеНомера.СерийныйНомер = &Код";
			 Запрос.УстановитьПараметр("Код", ШтрихКод);
			 Результат = Запрос.Выполнить();
			 ВыборкаДетальныеЗаписи = Результат.Выбрать();
			 Если не ВыборкаДетальныеЗаписи.Следующий() Тогда Возврат "Не найден товар по считанному коду!"; КонецЕсли;
			 список.Добавить(ВыборкаДетальныеЗаписи.Товар);
			 поставщик = ВыборкаДетальныеЗаписи.Поставщик;
		 КонецЕсли;
		 Если Список.Количество()>1  Тогда
			 ЗаписатьРег("СписокВыбораТовара",Список);
			 возврат "Выбор";
		 КонецЕсли;
		 
		 
		 ВыбТовар = Неопределено;		
		 Если Список.Количество() > 0 Тогда	
			 
			 ВыбТовар = Список.Получить(0);//.Значение;
			 если не ЗначениеЗаполнено(ВыбТовар) Тогда 
				 ВыбТовар = Структура.Данные;
			 КонецЕсли;
		 КонецЕсли;
		 ЗаписатьРег("ВыбТовар",ВыбТовар);
		 
		 ШКОбработан = ЗначениеЗаполнено(ВыбТовар);
		 Если НЕ ШКОбработан Тогда
			 Возврат "Не найден товар по считанному коду!";
		 КонецЕсли;
		 Запрос = Новый Запрос;
		 Запрос.Текст = 
		 "ВЫБРАТЬ
		 |	ПроверкаТоваров.НомерЗадания КАК КлючУникальности
		 |ИЗ
		 |	РегистрСведений.ПроверкаТоваров КАК ПроверкаТоваров
		 |ГДЕ
		 |	ПроверкаТоваров.СтатусЗадания = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийПроверкиТовара.НеВзято)
		 |	И (НЕ ПроверкаТоваров.ПометкаУдаления)
		 |	И ПроверкаТоваров.Номенклатура = &Номенклатура";
		 
		 Запрос.Текст = 
		 "ВЫБРАТЬ
		 |	ПроверкаТоваров.Номенклатура,
		 |	ПроверкаТоваров.КоличествоПроверенное КАК КоличествоПроверенное,
		 |	ПроверкаТоваров.НомерЗадания
		 |ПОМЕСТИТЬ товарИнвентаризации
		 |ИЗ
		 |	РегистрСведений.ПроверкаТоваров КАК ПроверкаТоваров
		 |ГДЕ
		 |	ПроверкаТоваров.СтатусЗадания = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийПроверкиТовара.НеВзято)
		 |	И ПроверкаТоваров.Номенклатура = &Номенклатура
		 |;
		 |
		 |////////////////////////////////////////////////////////////////////////////////
		 |ВЫБРАТЬ РАЗЛИЧНЫЕ
		 |	товарИнвентаризации.Номенклатура
		 |ПОМЕСТИТЬ ВТ_Номенклатура
		 |ИЗ
		 |	товарИнвентаризации КАК товарИнвентаризации
		 |;
		 |
		 |////////////////////////////////////////////////////////////////////////////////
		 |ВЫБРАТЬ
		 |	СУММА(Счет_41_АдресныйОстатки.КоличествоОстаток) КАК Количество,
		 |	Счет_41_АдресныйОстатки.Адрес,
		 |	ВТ_Номенклатура.Номенклатура
		 |ПОМЕСТИТЬ ВТ_ПоАдресам
		 |ИЗ
		 |	ВТ_Номенклатура КАК ВТ_Номенклатура
		 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Счет_41_Адресный.Остатки КАК Счет_41_АдресныйОстатки
		 |		ПО (Счет_41_АдресныйОстатки.Номенклатура = ВТ_Номенклатура.Номенклатура)
		 |ГДЕ
		 |	(НЕ ПОДСТРОКА(Счет_41_АдресныйОстатки.Адрес, 1, 1) = ""П"")
		 |
		 |СГРУППИРОВАТЬ ПО
		 |	Счет_41_АдресныйОстатки.Адрес,
		 |	ВТ_Номенклатура.Номенклатура
		 |;
		 |
		 |////////////////////////////////////////////////////////////////////////////////
		 |ВЫБРАТЬ
		 |	ВТ_ПоАдресам.Адрес,
		 |	товарИнвентаризации.Номенклатура,
		 |	товарИнвентаризации.НомерЗадания
		 |ИЗ
		 |	товарИнвентаризации КАК товарИнвентаризации
		 |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоАдресам КАК ВТ_ПоАдресам
		 |		ПО (ВТ_ПоАдресам.Номенклатура = товарИнвентаризации.Номенклатура)
		 |;
		 |
		 |////////////////////////////////////////////////////////////////////////////////
		 |УНИЧТОЖИТЬ ВТ_ПоАдресам
		 |;
		 |
		 |////////////////////////////////////////////////////////////////////////////////
		 |УНИЧТОЖИТЬ ВТ_Номенклатура
		 |;
		 |
		 |////////////////////////////////////////////////////////////////////////////////
		 |УНИЧТОЖИТЬ товарИнвентаризации";
		 
		 
		 Запрос.УстановитьПараметр("Номенклатура", ВыбТовар);
		 Результат = Запрос.Выполнить();
		 
		 таблица = Результат.Выбрать();
		 Если не таблица.Следующий() Тогда 
			 Возврат "Товар отсутствует в заданиях на проверку";
		 КонецЕсли;
		 таблица.Сбросить();
		 Ответ = "";
		 пока таблица.Следующий() Цикл
			 ЗаписьР = РегистрыСведений.ПроверкаТоваров.СоздатьМенеджерЗаписи();    
			 ЗаписьР.НомерЗадания = таблица.НомерЗадания;
			 ЗаписьР.Прочитать();
			 Если ЗаписьР.Выбран() Тогда 
				 ЗаписьР.Исполнитель = Автор;
				 ЗаписьР.ДатаНачала = ТекущаяДатаСервер();
				 ЗаписьР.СтатусЗадания = Перечисления.СтатусыЗаданийПроверкиТовара.Выполняется;
				 ЗаписатьВТранзакции(ЗаписьР);
				 //ЗаписьР.Записать();
				 
				 //Если не ЗначениеЗаполнено(таблица.Адрес) Тогда 
				 //	НоваяЗапись = РегистрыСведений.ПроверкаТоваров.СоздатьМенеджерЗаписи();
				 //	ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьР, , "НомерЗадания, КоличествоПроверенное");
				 //	НоваяЗапись.НомерЗадания = Новый УникальныйИдентификатор;
				 //	НоваяЗапись.ДатаНачала = ТекущаяДатаСервер();
				 //	НоваяЗапись.Адрес = таблица.Адрес;
				 //	НоваяЗапись.КоличествоПроверенное = 0;
				 //	НоваяЗапись.Записать();
				 //КонецЕсли;
				 //ЗаписатьРег("текущаяСтраница",335);
			 Иначе
				 Ответ = Ответ+ " немогу найти задание "+Таблица.КлючУникальности;
			 КонецЕсли;
		 КонецЦикла;
		 
		 
		 возврат Ответ;
	 КонецЕсли;		
 КонецФункции
 //Проверка
 Функция СканЗаданияНаПроверку(Данные,Количество)	
	 ШтрихКод = СокрЛП(Данные);
	 Ответ = "";
	 Автор = ПараметрыСеанса.глТекПользователь;
	 Структура = ПрочитатьШтрихКод(ШтрихКод);
	 Запрос = Новый Запрос;
	 Запрос.УстановитьПараметр("Исполнитель", ПараметрыСеанса.глТекПользователь);
	 
	 ЗаписатьРег("СчитаныйШК.ТипДанных",Структура.ТипДанных);
	 Если Структура.ТипДанных = 0 Тогда
		 Возврат "Ненужно сканировать бэйджик";
		 
	 ИначеЕсли Структура.ТипДанных = 11 Тогда // Складской транспорт	
		 Возврат "Ну Если только как"+Символы.ВК+Символы.ПС+"средство передвижения";
	 ИначеЕсли Структура.ТипДанных = 7 Тогда // Складской транспорт	
		 Возврат "Ну Если только как"+Символы.ВК+Символы.ПС+"средство передвижения";
		 //проверим при скане адреса при проверке товара		
	 ИначеЕсли Структура.ТипДанных = 4 Тогда // Адрес 
		 Зона =  Сред("АБВГДЕЖЗИКЛМНОПРСТУФХЦЧЩШЮЭЯ", Число(Сред(Данные,4,2)), 1);
		 Адрес = Зона + Сред(Данные,6,2) + "-" + Сред(Данные,8,2) + "-" + Сред(Данные,10,1);
		 Если ЗначениеЗаполнено(Адрес) И ТипЗНЧ(Адрес) = Тип("Строка") И СтрДлина(Адрес) = 8 Тогда
			 // + Проверка на правильность заполнения адреса
			 Адреса = РегистрыСведений.АдресаМестХранения;
			 ОтборАдреса = Новый Структура("Адрес");
			 ОтборАдреса.Адрес = Адрес;
			 ВыборкаАдреса = Адреса.Выбрать(ОтборАдреса);
			 Если НЕ ВыборкаАдреса.Следующий() Тогда	
				 Возврат "Указанного адреса"+Символы.ВК+Символы.ПС+"не существует!";
			 КонецЕсли;
			 ЗаписатьРег("Адрес",Адрес);
			 Запрос.Текст = 
			 "ВЫБРАТЬ
			 |	ПроверкаТоваров.НомерЗадания КАК КлючУникальности
			 |ИЗ
			 |	РегистрСведений.ПроверкаТоваров КАК ПроверкаТоваров
			 |ГДЕ
			 |	ПроверкаТоваров.СтатусЗадания = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийПроверкиТовара.Выполняется)
			 |	И (НЕ ПроверкаТоваров.ПометкаУдаления)
			 |	И ПроверкаТоваров.Исполнитель = &Исполнитель
			 |	И ПроверкаТоваров.Адрес = &Адрес";
			 Запрос.УстановитьПараметр("Адрес", Адрес);
			 //проверим что в регистре на этот адрес еще не укладывали товар 
			 Если не Запрос.Выполнить().Выбрать().Следующий() Тогда //сложночитаемое условие ..необходимо сменить на обратное
				 
				 Запрос.Текст = 
				 "ВЫБРАТЬ
				 |	МАКСИМУМ(ПроверкаТоваров.НомерЗадания) КАК НомерЗадания,
				 |	ПроверкаТоваров.Номенклатура
				 |ИЗ
				 |	РегистрСведений.ПроверкаТоваров КАК ПроверкаТоваров
				 |ГДЕ
				 |	(НЕ ПроверкаТоваров.ПометкаУдаления)
				 |	И ПроверкаТоваров.СтатусЗадания = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийПроверкиТовара.Выполняется)
				 |	И ПроверкаТоваров.Исполнитель = &Исполнитель
				 |
				 |СГРУППИРОВАТЬ ПО
				 |	ПроверкаТоваров.Номенклатура";
				 Результат = Запрос.Выполнить();
				 
				 таблица = Результат.Выбрать();
				 Если не таблица.Следующий() Тогда 
					 Возврат "У вас нет заданий";
				 КонецЕсли;
				 таблица.Сбросить();
				 Ответ = ""; //дубль запись на случай Если Ответ гдето заполнили
				 Если  таблица.Следующий() Тогда
					 ЗаписьР = РегистрыСведений.ПроверкаТоваров.СоздатьМенеджерЗаписи();    
					 ЗаписьР.НомерЗадания = таблица.НомерЗадания;
					 ЗаписьР.Прочитать();
					 Если ЗаписьР.Выбран() Тогда
						 Если (пустаястрока(ЗаписьР.Адрес)) Тогда 
							 ЗаписьР.Адрес = Адрес;
							 ЗаписатьВТранзакции(ЗаписьР);
							 //ЗаписьР.Записать();
						 Иначе
							 //дублируем запись, но уже с новым адресом где лежит данный товар и количеством 0 , происходит это только в случае Если в регистре ранее небыло записи на этот адрес этого автора
							 НоваяЗапись = РегистрыСведений.ПроверкаТоваров.СоздатьМенеджерЗаписи();
							 ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьР, , "НомерЗадания, КоличествоПроверенное");
							 НоваяЗапись.НомерЗадания = Новый УникальныйИдентификатор;
							 НоваяЗапись.Адрес = Адрес;
							 НоваяЗапись.КоличествоПроверенное = 0;
							 ЗаписатьВТранзакции(НоваяЗапись);//.Записать();
						 КонецЕсли;
					 КонецЕсли;
				 КонецЕсли;				
				 Возврат Ответ;	
			 КонецЕсли;
		 Иначе	
			 Возврат "Введены некорректные"+Символы.ВК+Символы.ПС+"параметры адреса!";
		 КонецЕсли;						
		 
	 ИначеЕсли Структура.ТипДанных = 3 Тогда // Товар
		 Адрес = СчитатьРег("Адрес");
		 Если НЕ ЗначениеЗаполнено(Адрес) Тогда
			 Возврат "Перед считыванием товара"+Символы.ВК+Символы.ПС+"необходимо считать адрес!";
		 КонецЕсли;
		 Список = ПолучитьСписокТовараПоСчитаномуКоду(Данные);
		 Если Список.Количество()=0  Тогда
			 Запрос = Новый Запрос;
			 Запрос.Текст = 
			 "ВЫБРАТЬ
			 |	СерийныеНомера.Товар,
			 |	СерийныеНомера.Поставщик
			 |ИЗ
			 |	РегистрСведений.СерийныеНомера КАК СерийныеНомера
			 |ГДЕ
			 |	СерийныеНомера.СерийныйНомер = &Код";
			 Запрос.УстановитьПараметр("Код", ШтрихКод);
			 Результат = Запрос.Выполнить();
			 ВыборкаДетальныеЗаписи = Результат.Выбрать();
			 Если не ВыборкаДетальныеЗаписи.Следующий() Тогда Возврат "Не найден товар по считанному коду!"; КонецЕсли;
			 список.Добавить(ВыборкаДетальныеЗаписи.Товар);
			 поставщик = ВыборкаДетальныеЗаписи.Поставщик;
		 КонецЕсли;
		 Если Список.Количество()>1  Тогда
			 ЗаписатьРег("СписокВыбораТовара",Список);
			 возврат "Выбор";
		 КонецЕсли;
		 
		 
		 ВыбТовар = Неопределено;		
		 Если Список.Количество() > 0 Тогда		
			 ВыбТовар = Список.Получить(0);//.Значение;
		 КонецЕсли;
		 ЗаписатьРег("ВыбТовар",ВыбТовар);
		 
		 ШКОбработан = ЗначениеЗаполнено(ВыбТовар);
		 Если НЕ ШКОбработан Тогда
			 Возврат "Не найден товар по считанному коду!";
		 КонецЕсли;
		 //Запрос = Новый Запрос;
		 Запрос.Текст = 
		 "ВЫБРАТЬ
		 |	ПроверкаТоваров.НомерЗадания КАК КлючУникальности
		 |ИЗ
		 |	РегистрСведений.ПроверкаТоваров КАК ПроверкаТоваров
		 |ГДЕ
		 |	ПроверкаТоваров.СтатусЗадания = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийПроверкиТовара.Выполняется)
		 |	И (НЕ ПроверкаТоваров.ПометкаУдаления)
		 |	И ПроверкаТоваров.Номенклатура = &Номенклатура
		 |	И ПроверкаТоваров.Исполнитель = &Исполнитель
		 |	И ПроверкаТоваров.Адрес = &Адрес";
		 Запрос.УстановитьПараметр("Адрес", Адрес);
		 Запрос.УстановитьПараметр("Номенклатура", ВыбТовар);
		 //Запрос.УстановитьПараметр("Исполнитель", ПараметрыСеанса.глТекПользователь);
		 Результат = Запрос.Выполнить();
		 
		 таблица = Результат.Выбрать();
		 Если не таблица.Следующий() Тогда 
			 Возврат "Товар отсутствует в заданиях на проверку";
		 КонецЕсли;
		 таблица.Сбросить();
		 Если таблица.Следующий() Тогда
			 ЗаписьР = РегистрыСведений.ПроверкаТоваров.СоздатьМенеджерЗаписи();    
			 ЗаписьР.НомерЗадания = таблица.КлючУникальности;
			 ЗаписьР.Прочитать();
			 Если ЗаписьР.Выбран() Тогда 
				 ЗаписьР.Адрес = Адрес;
				 ЗаписьР.КоличествоПроверенное = ЗаписьР.КоличествоПроверенное + ?(Количество=0,1,Количество);
				 ЗаписатьВТранзакции(ЗаписьР);//.Записать();
				 ЗаписатьРег("ЗаписьР.КлючУникальности",ЗаписьР.НомерЗадания);
			 Иначе
				 Ответ = Ответ+ " немогу найти задание "+Таблица.КлючУникальности;
			 КонецЕсли;
		 КонецЕсли;
		 возврат Ответ;
	 КонецЕсли;	
	 возврат "";
 КонецФункции
 //Проверка товара
 Функция ПолучитьНевзятыеЗаданияНаПроверку()
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	ПроверкаТоваров.Номенклатура.Родитель.ВерхнийУровень.Наименование КАК Адрес,
	 |	ПроверкаТоваров.Номенклатура КАК Товар,
	 |	МАКСИМУМ(ВЫБОР
	 |			КОГДА ПроверкаТоваров.КоличествоНаПроверку > 0
	 |				ТОГДА ПроверкаТоваров.КоличествоНаПроверку
	 |			ИНАЧЕ -ПроверкаТоваров.КоличествоНаПроверку
	 |		КОНЕЦ - ВЫБОР
	 |			КОГДА ПроверкаТоваров.КоличествоПроверенное > 0
	 |				ТОГДА ПроверкаТоваров.КоличествоПроверенное
	 |			ИНАЧЕ -ПроверкаТоваров.КоличествоПроверенное
	 |		КОНЕЦ) КАК КоличествоЗадание,
	 |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПроверкаТоваров.Адрес) КАК Объем
	 |ПОМЕСТИТЬ ВТ_Задания
	 |ИЗ
	 |	РегистрСведений.ПроверкаТоваров КАК ПроверкаТоваров
	 |ГДЕ
	 |	ПроверкаТоваров.СтатусЗадания = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийПроверкиТовара.НеВзято)
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ПроверкаТоваров.Номенклатура,
	 |	ПроверкаТоваров.Номенклатура.Родитель.ВерхнийУровень.Наименование
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ВТ_Задания.Адрес КАК Адрес,
	 |	ВТ_Задания.Товар,
	 |	ВТ_Задания.Объем КАК Объем2,
	 |	СУММА(Счет_41_АдресныйОстатки.КоличествоОстаток) КАК Количество,
	 |	ВТ_Задания.КоличествоЗадание,
	 |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Счет_41_АдресныйОстатки.Адрес) КАК Адресов
	 |ПОМЕСТИТЬ ВТ_АдресаСЗаданиями
	 |ИЗ
	 |	ВТ_Задания КАК ВТ_Задания
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Счет_41_Адресный.Остатки КАК Счет_41_АдресныйОстатки
	 |		ПО ВТ_Задания.Товар = Счет_41_АдресныйОстатки.Номенклатура
	 |ГДЕ
	 |	((НЕ ПОДСТРОКА(Счет_41_АдресныйОстатки.Адрес, 1, 1) = ""П"")
	 |			ИЛИ Счет_41_АдресныйОстатки.Адрес ЕСТЬ NULL )
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ВТ_Задания.Адрес,
	 |	ВТ_Задания.Товар,
	 |	ВТ_Задания.Объем,
	 |	ВТ_Задания.КоличествоЗадание
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ ВТ_Задания
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ВТ_АдресаСЗаданиями.Адрес КАК Адрес,
	 |	ВТ_АдресаСЗаданиями.Товар,
	 |	ВТ_АдресаСЗаданиями.Объем2,
	 |	ВТ_АдресаСЗаданиями.Количество КАК Количество,
	 |	ВТ_АдресаСЗаданиями.КоличествоЗадание,
	 |	ВТ_АдресаСЗаданиями.Адресов,
	 |	МАКСИМУМ(УчетКодовПроизводителя.Код) КАК Код
	 |ИЗ
	 |	ВТ_АдресаСЗаданиями КАК ВТ_АдресаСЗаданиями
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетКодовПроизводителя КАК УчетКодовПроизводителя
	 |		ПО ВТ_АдресаСЗаданиями.Товар = УчетКодовПроизводителя.Товар1
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ВТ_АдресаСЗаданиями.Адрес,
	 |	ВТ_АдресаСЗаданиями.Товар,
	 |	ВТ_АдресаСЗаданиями.Объем2,
	 |	ВТ_АдресаСЗаданиями.Количество,
	 |	ВТ_АдресаСЗаданиями.КоличествоЗадание,
	 |	ВТ_АдресаСЗаданиями.Адресов
	 |ИТОГИ
	 |	СУММА(Количество)
	 |ПО
	 |	Адрес
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ ВТ_АдресаСЗаданиями";
	 Результат = Запрос.Выполнить();
	 Возврат Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
 КонецФункции
 //Проверка товара
 Функция ЕстьЗаданияИнвентаризацииНевзятые()
	 
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ ПЕРВЫЕ 1
	 |	ПроверкаТоваров.НомерЗадания
	 |ИЗ
	 |	РегистрСведений.ПроверкаТоваров КАК ПроверкаТоваров
	 |ГДЕ
	 |	 ПроверкаТоваров.СтатусЗадания = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийПроверкиТовара.НеВзято)";
	 Результат = Запрос.Выполнить().Выбрать();
	 Возврат Результат.Следующий();
 КонецФункции
 //Проверка товара
 Функция ЕстьЗаданияИнвентаризацииНаМеня()
	 
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ ПЕРВЫЕ 1
	 |	ПроверкаТоваров.НомерЗадания
	 |ИЗ
	 |	РегистрСведений.ПроверкаТоваров КАК ПроверкаТоваров
	 |ГДЕ
	 |	ПроверкаТоваров.Исполнитель = &Исполнитель
	 |	И ПроверкаТоваров.СтатусЗадания = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийПроверкиТовара.Выполняется)";
	 Запрос.УстановитьПараметр("Исполнитель",ПараметрыСеанса.глТекПользователь);
	 
	 Результат = Запрос.Выполнить().Выбрать();
	 
	 Возврат Результат.Следующий();
 КонецФункции
 //Проверка товара
 Функция МоиЗаданияНаПроверку()     //дерево адресов
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	ПроверкаТоваров.Номенклатура КАК Товар,
	 |	МАКСИМУМ(ПроверкаТоваров.КоличествоПроверенное) КАК Количество,
	 |	ПроверкаТоваров.Адрес КАК Адрес
	 |ИЗ
	 |	РегистрСведений.ПроверкаТоваров КАК ПроверкаТоваров
	 |ГДЕ
	 |	ПроверкаТоваров.СтатусЗадания = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийПроверкиТовара.Выполняется)
	 |	И ПроверкаТоваров.Исполнитель = &Исполнитель
	 |	И ПроверкаТоваров.Адрес <> """"
	 |	И (ВЫРАЗИТЬ(ПроверкаТоваров.Адрес КАК СТРОКА(1))) <> ""П""
	 |	И (НЕ ПроверкаТоваров.Адрес ЕСТЬ NULL )
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ПроверкаТоваров.Номенклатура,
	 |	ПроверкаТоваров.Адрес
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	Адрес,
	 |	Товар,
	 |	Количество
	 |ИТОГИ
	 |	СУММА(Количество)
	 |ПО
	 |	Адрес";
	 
	 Запрос.УстановитьПараметр("Исполнитель", ПараметрыСеанса.глТекПользователь);
	 Результат = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	 Возврат Результат;
 КонецФункции
 //Проверка товара
 Функция МоиАдресаНаПроверку()     //дерево адресов
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ РАЗЛИЧНЫЕ
	 |	Счет_41_АдресныйОстатки.Адрес КАК Адрес
	 |ПОМЕСТИТЬ ВТ_Адреса
	 |ИЗ
	 |	РегистрНакопления.Счет_41_Адресный.Остатки КАК Счет_41_АдресныйОстатки
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроверкаТоваров КАК ПроверкаТоваров
	 |		ПО (ПроверкаТоваров.Номенклатура = Счет_41_АдресныйОстатки.Номенклатура)
	 |			И (Счет_41_АдресныйОстатки.Адрес <> """")
	 |			И ((ВЫРАЗИТЬ(Счет_41_АдресныйОстатки.Адрес КАК СТРОКА(1))) <> ""П"")
	 |ГДЕ
	 |	ПроверкаТоваров.Исполнитель = &Исполнитель
	 |	И ПроверкаТоваров.СтатусЗадания = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийПроверкиТовара.Выполняется)
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ПроверкаТоваров.Номенклатура КАК Товар,
	 |	МАКСИМУМ(ПроверкаТоваров.КоличествоПроверенное) КАК Количество,
	 |	ПроверкаТоваров.Адрес КАК Адрес
	 |ПОМЕСТИТЬ ВТ_Товары
	 |ИЗ
	 |	РегистрСведений.ПроверкаТоваров КАК ПроверкаТоваров
	 |ГДЕ
	 |	ПроверкаТоваров.СтатусЗадания = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийПроверкиТовара.Выполняется)
	 |	И ПроверкаТоваров.Исполнитель = &Исполнитель
	 |	И ПроверкаТоваров.Адрес <> """"
	 |	И (ВЫРАЗИТЬ(ПроверкаТоваров.Адрес КАК СТРОКА(1))) <> ""П""
	 |	И (НЕ ПроверкаТоваров.Адрес ЕСТЬ NULL )
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ПроверкаТоваров.Номенклатура,
	 |	ПроверкаТоваров.Адрес
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ВТ_Товары.Товар КАК Товар,
	 |	ЕСТЬNULL(ВТ_Товары.Количество, 0) КАК Количество,
	 |	ВЫБОР
	 |		КОГДА ВТ_Товары.Адрес ЕСТЬ NULL 
	 |			ТОГДА ВТ_Адреса.Адрес
	 |		ИНАЧЕ ВТ_Товары.Адрес
	 |	КОНЕЦ КАК Адрес
	 |ИЗ
	 |	ВТ_Адреса КАК ВТ_Адреса
	 |		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Товары КАК ВТ_Товары
	 |		ПО ВТ_Адреса.Адрес = ВТ_Товары.Адрес
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	Адрес,
	 |	Количество,
	 |	Товар
	 |ИТОГИ
	 |	СУММА(Количество)
	 |ПО
	 |	Адрес";
	 
	 
	 Запрос.УстановитьПараметр("Исполнитель", ПараметрыСеанса.глТекПользователь);
	 Результат = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	 Возврат Результат;
 КонецФункции
 
 
 
 //Погрузка
 Функция ВычленитьЦифрыИзНомераМашины(Номер)
	 Цифры = ""; 
	 ЗапрещенныеСимволы = " e+-"+Символы.ВК+Символы.ВТаб+Символы.НПП+Символы.ПС+Символы.ПФ+Символы.Таб;
	 Для Х = 1 по СтрДлина(Номер) Цикл
		 Буква = Сред(Номер,Х,1);
		 если Найти(ЗапрещенныеСимволы,Нрег(Буква))>0 Тогда Продолжить; КонецЕсли;
		 Попытка
			 //Если Нрег(Буква) = "e" Тогда ВызватьИсключение "экспонента в номере авто !"; КонецЕсли;
			 ч = Число(буква);
			 Цифры = Цифры + Буква;
		 Исключение
		 КонецПопытки;
	 КонецЦикла;
	 Возврат Цифры;	 
 КонецФункции
 //Погрузка
 Функция ПолучитьТаблицуЭкспедиторов()
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	ТТН.Экспедитор
	 |ПОМЕСТИТЬ экспедиторы
	 |ИЗ
	 |	Документ.ТТН КАК ТТН
	 |ГДЕ
	 |	ТТН.ВидТТН = ЗНАЧЕНИЕ(Перечисление.ВидыТТН.ВнутриРегиона)
	 |	И (НЕ ТТН.Экспедитор = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	 |	И ТТН.Дата > &Дата
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ТТН.Экспедитор
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	экспедиторы.Экспедитор КАК Экспедитор,
	 |	Транспорт.Знак,
	 |	Транспорт.Ссылка
	 |ИЗ
	 |	экспедиторы КАК экспедиторы
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Транспорт КАК Транспорт
	 |		ПО экспедиторы.Экспедитор = Транспорт.ТК
	 |ГДЕ
	 |	(НЕ Транспорт.Знак = """")
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ экспедиторы";
	 Запрос.УстановитьПараметр("Дата",ДобавитьМесяц(ТекущаяДата(),-1));
	 Запрос.УстановитьПараметр("Регион",Константы.ТекущийСклад.Получить().Регион);
	 //Результат = Запрос.Выполнить();
	 //Если Результат.Пустой() Тогда 
	 Запрос.Текст = "ВЫБРАТЬ
	 |	Транспорт.ТК КАК Экспедитор,
	 |	Транспорт.Ссылка,
	 |	Транспорт.Код КАК Знак
	 |ИЗ
	 |	Справочник.Транспорт КАК Транспорт
	 |ГДЕ
	 |	Транспорт.Регион = &Регион
	 |	И Транспорт.ВидДоставки = 3
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	Транспорт.Код,
	 |	Экспедитор";
	 
	 
	 //Запрос.Текст = СтрЗаменить(Запрос.Текст,"И ТТН.Дата > &Дата","");
	 Результат = Запрос.Выполнить();
	 //КонецЕсли;
	 ТЗ = Результат.Выгрузить();
	 Для каждого Стр из ТЗ Цикл
		 Наименование = СокрЛП(Строка(Стр[1]));
		 Количество = ВычленитьЦифрыИзНомераМашины(Строка(Стр[1]));
		 Если не ПустаяСтрока(Количество) Тогда 
			 
			 Стр.Знак = Количество;	  
			 
		 КонецЕсли;
		 
	 КонецЦикла; 
	 
	 Запрос.Текст = "ВЫБРАТЬ
	 |	Таблица.Экспедитор,
	 |	Таблица.Ссылка,
	 |	Таблица.Знак
	 |ПОМЕСТИТЬ СортТаб
	 |ИЗ
	 |	&Таблица КАК Таблица
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	СортТаб.Экспедитор КАК Экспедитор,
	 |	СортТаб.Ссылка,
	 |	СортТаб.Знак КАК Знак
	 |ИЗ
	 |	СортТаб КАК СортТаб
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	Знак,
	 |	Экспедитор";
	 Запрос.УстановитьПараметр("Таблица",ТЗ);
	 
	 Результат = Запрос.Выполнить();
	 //КонецЕсли;
	 Возврат Результат.Выгрузить();
	 
	 //Возврат 
	 
	 
	 
 КонецФункции
 //Погрузка
 Функция ПолучитьСписокЭкспедиторовЗаПоследнийМесяц(ВходныеДанные)
	 ТЗ = ПолучитьТаблицуЭкспедиторов();
	 
	 ДобавитьСтроку(ВходныеДанные,"ЗаполнитьТаблицу","-",113);//
	 Параметр = 1;
	 Для каждого Стр из ТЗ Цикл
		 //Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
		 Код = СокрЛП(Строка(Стр[0]));
		 Код = ?(ПустаяСтрока(Код)," ",Код);
		 Наименование = СокрЛП(Строка(Стр[1]));
		 //Наименование = ?(ПустаяСтрока(Наименование)," ",Наименование);
		 Количество = ВычленитьЦифрыИзНомераМашины(Строка(Стр[1]));
		 //Если ПустаяСтрока(Количество) Тогда 
		 //	Количество = ВычленитьЦифрыИзНомераМашины(Строка(Стр[2]));
		 //КонецЕсли;
		 Если не ПустаяСтрока(Количество) Тогда 
			 ДобавитьСтроку(ВходныеДанные,Количество,Наименование,Параметр);
			 Параметр = Параметр +1;
			 ДобавитьСтроку(ВходныеДанные,"Колонка",Код,3);
		 КонецЕсли;
		 
	 КонецЦикла;
	 ДобавитьСтроку(ВходныеДанные,"КонецТаблицы","-",0);
	 Возврат ВходныеДанные;	
 КонецФункции
 //Погрузка
 Функция ПолучитьДеревоЭкспедиторовЗаПоследнийМесяц()
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	ТТН.Экспедитор
	 |ПОМЕСТИТЬ экспедиторы
	 |ИЗ
	 |	Документ.ТТН КАК ТТН
	 |ГДЕ
	 |	ТТН.ВидТТН = ЗНАЧЕНИЕ(Перечисление.ВидыТТН.ВнутриРегиона)
	 |	И (НЕ ТТН.Экспедитор = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ТТН.Экспедитор
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	экспедиторы.Экспедитор КАК Адрес,
	 |	Транспорт.Знак,
	 |	Транспорт.Ссылка КАК Товар,
	 |	1 КАК Количество
	 |ИЗ
	 |	экспедиторы КАК экспедиторы
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Транспорт КАК Транспорт
	 |		ПО экспедиторы.Экспедитор = Транспорт.ТК
	 |ГДЕ
	 |	(НЕ Транспорт.Знак = """")
	 |ИТОГИ
	 |	СУММА(Количество)
	 |ПО
	 |	Адрес";
	 
	 Запрос.Текст = "ВЫБРАТЬ
	 |	Транспорт.ТК КАК Адрес,
	 |	Транспорт.Знак,
	 |	Транспорт.Ссылка КАК Товар,
	 |	1 КАК Количество
	 |ИЗ
	 |	Справочник.Транспорт КАК Транспорт
	 |ГДЕ
	 |	Транспорт.Регион = &Регион
	 |	И Транспорт.ВидДоставки = 3
	 |ИТОГИ
	 |	СУММА(Количество)
	 |ПО
	 |	Адрес";	
	 Запрос.УстановитьПараметр("Регион",Константы.ТекущийСклад.Получить().Регион);
	 
	 Запрос.УстановитьПараметр("ДатаC",ДобавитьМесяц(ТекущаяДата(),-1));
	 Возврат Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
 КонецФункции
 //Погрузка
 Функция МоиФилиалыНаПогрузку()
	 
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	РасписаниеОтправкиМашинСоСклада.Филиал
	 |ПОМЕСТИТЬ Филиалы
	 |ИЗ
	 |	РегистрСведений.РасписаниеОтправкиМашинСоСклада КАК РасписаниеОтправкиМашинСоСклада
	 |ГДЕ
	 |	РасписаниеОтправкиМашинСоСклада.ДеньНедели = &ДеньНедели
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ РАЗЛИЧНЫЕ
	 |	ТоварнаяНакладная.Объем,
	 |	ТоварнаяНакладная.ФирмаПолучатель
	 |ПОМЕСТИТЬ ВТ_Объемы
	 |ИЗ
	 |	Документ.ТоварнаяНакладная КАК ТоварнаяНакладная
	 |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТТН.ДокументыОтгрузки КАК ТТНДокументыОтгрузки
	 |		ПО (ТТНДокументыОтгрузки.Документ = ТоварнаяНакладная.Ссылка)
	 |			И (ТТНДокументыОтгрузки.Ссылка.Проведен)
	 |		ЛЕВОЕ СОЕДИНЕНИЕ Филиалы КАК Филиалы
	 |		ПО ТоварнаяНакладная.ФирмаПолучатель = Филиалы.Филиал
	 |ГДЕ
	 |	ТоварнаяНакладная.Проведен
	 |	И ТоварнаяНакладная.Резерв
	 |	И ТТНДокументыОтгрузки.Документ ЕСТЬ NULL 
	 |	И ТоварнаяНакладная.Фирма = &Отправитель
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ЕСТЬNULL(РасписаниеОтправкиМашинСоСклада.ВремяОтправкиМашины, ""Без расписания"") КАК Адрес,
	 |	ВТ_Объемы.ФирмаПолучатель КАК Товар,
	 |	ВТ_Объемы.ФирмаПолучатель.Наименование КАК Код,
	 |	СУММА(ЕСТЬNULL(ВТ_Объемы.Объем, 0)) КАК Количество
	 |ИЗ
	 |	ВТ_Объемы КАК ВТ_Объемы
	 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РасписаниеОтправкиМашинСоСклада КАК РасписаниеОтправкиМашинСоСклада
	 |		ПО (РасписаниеОтправкиМашинСоСклада.Филиал = ВТ_Объемы.ФирмаПолучатель)
	 |			И (РасписаниеОтправкиМашинСоСклада.ДеньНедели = &ДеньНедели)
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ЕСТЬNULL(РасписаниеОтправкиМашинСоСклада.ВремяОтправкиМашины, ""Без расписания""),
	 |	ВТ_Объемы.ФирмаПолучатель,
	 |	ВТ_Объемы.ФирмаПолучатель.Наименование
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	Адрес,
	 |	Код
	 |ИТОГИ
	 |	СУММА(Количество)
	 |ПО
	 |	Адрес";
	 
	 Запрос.УстановитьПараметр("Отправитель",Константы.ТекущийСклад.Получить());	
	 
	 Запрос.УстановитьПараметр("ДеньНедели", ДеньНедели(ТекущаяДатаСервер()));
	 Результат = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	 Возврат Результат;	
	 
 КонецФункции
 //Погрузка
 Функция ПолучитьТранспортПоНомеруМашины(Номер)
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	ТТН.Экспедитор
	 |ПОМЕСТИТЬ экспедиторы
	 |ИЗ
	 |	Документ.ТТН КАК ТТН
	 |ГДЕ
	 |	ТТН.ВидТТН = ЗНАЧЕНИЕ(Перечисление.ВидыТТН.ВнутриРегиона)
	 |	И (НЕ ТТН.Экспедитор = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ТТН.Экспедитор
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	экспедиторы.Экспедитор КАК Экспедитор,
	 |	Транспорт.Знак,
	 |	Транспорт.Ссылка
	 |ИЗ
	 |	экспедиторы КАК экспедиторы
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Транспорт КАК Транспорт
	 |		ПО экспедиторы.Экспедитор = Транспорт.ТК
	 |ГДЕ
	 |	Транспорт.Знак = &Номер";
	 //|			ИЛИ ПОДСТРОКА(Транспорт.Знак, 3, 3) = &Номер)";
	 Запрос.Текст = "ВЫБРАТЬ
	 |	Транспорт.ТК КАК Экспедитор,
	 |	Транспорт.Ссылка
	 |ИЗ
	 |	Справочник.Транспорт КАК Транспорт
	 |ГДЕ
	 |	Транспорт.Регион = &Регион
	 |	И Транспорт.ВидДоставки = 3
	 |	И (Транспорт.Знак ПОДОБНО &Номер
	 |			ИЛИ Транспорт.Наименование ПОДОБНО &Номер
	 |			ИЛИ Транспорт.Код ПОДОБНО &Номер)
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	Экспедитор";
	 Запрос.УстановитьПараметр("Номер","%"+Номер+"%");
	 Запрос.УстановитьПараметр("Регион",Константы.ТекущийСклад.Получить().Регион);
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 Возврат Выборка;	
 КонецФункции
 //Погрузка
 Функция ПривязатьСотрудниковПогрузкикТТН(ТТН,ВидДокумента)
	 
	 ОбщийВес            = ТТН.ИтогоВес;
	 ОбщийОбъем          = ТТН.ИтогоОбъем;
	 НачалоОперации = СчитатьРег("ВремяНачРазгрузки");
	 СотрудникиРазгрузки = читатьРег("СотрудникиРазгрузки",Новый Массив);	 
	 Сотрудников = СотрудникиРазгрузки.Количество();
	 если Сотрудников = Неопределено или Сотрудников < 1 тогда Возврат ""; КонецЕсли;
	 
	 Документ = Документы.ПогрузоРазгрузочныеРаботы.СоздатьДокумент();
	 ЗаполнитьШапкуДокумента(Документ); 
	 Документ.Автор = ПараметрыСеанса.глТекПользователь;
	 Документ.ВидДокумента = ВидДокумента;//Перечисления.ВидыСкладскихОпераций.ПогрузкаМашины;
	  
	 Документ.ВремяНачалаРаботы = НачалоОперации;
	 Документ.ВремяОкончанияРаботы = ТекущаяДатаСервер();
	 Документ.ДокументОснование = ТТН.Ссылка;
	 В1 = ОбщийВес/Сотрудников;
	 О1 = ОбщийОбъем/ Сотрудников;
	 ОбщееКоличествоМест          = ТТН.Состав.Итог("МестВсего");
	 КоличествоРаспределенныхМест = 0;
	 СреднееКоличествоМест        = Окр(ОбщееКоличествоМест / Сотрудников);
	 Сч                           = 0;	
	 //КонецОперации = ТекущаяДатаСервер();
	 Для каждого Сотрудник из СотрудникиРазгрузки Цикл
		 РС =  Документ.Состав.Добавить();
		 //РС = РегистрыСведений.УчетВыгрузкиПогрузкиМашины.СоздатьМенеджерЗаписи();
		 Вес = В1;
		 Объем = О1;
		 Сч = Сч + 1;
		 //ЗаписатьРег("Сотрудник"+строка(Сч),Сотрудник);
		 Если Сч = Сотрудников Тогда
			 Мест = ОбщееКоличествоМест - КоличествоРаспределенныхМест;
		 Иначе
			 Мест = СреднееКоличествоМест; 				
		 КонецЕсли;			
		 КоличествоРаспределенныхМест = КоличествоРаспределенныхМест  + Мест;
		 ///////////////////////////////////
		 РС.Сотрудник = Сотрудник;
		 РС.Мест         = Мест;
		 РС.Вес          = Вес;
		 РС.Объем        = Объем;
	 
	 КонецЦикла; 
	 
	 Попытка
		 Документ.Записать(РежимЗаписиДокумента.Проведение);
	 Исключение
		 ошибка = "";
		 Попытка
			 ошибка = Документ.ДополнительныеСвойства.ОшибкаПриПроведении;	
		 Исключение
		 КонецПопытки;
		 Документ.Записать();
		 ВызватьИсключение " создан документ погрузки "+Документ.Номер+" но не проведен "+ошибка + " , "+ ОписаниеОшибки();
	 КонецПопытки;	
	 УдалитьРег("ВремяНачРазгрузки");
	 УдалитьРег("СотрудникиРазгрузки");
 КонецФункции
 //Погрузка
 Функция СоздатьТТН(ТаблицаСоставТТН)
	 ТекущийФилиал = Константы.ТекущийСклад.Получить();
	 Транспорт = СчитатьРег("ВыбранныйТранспорт");
	 //ТаблицаСоставТТН = Новый ТаблицаЗначений;
	 СписокФирм = ТаблицаСоставТТН.ВыгрузитьКолонку("Филиал");
	 //ФилиалПолучатель = СЧитатьРег("Филиал");
	 Если НЕ ЗначениеЗаполнено(Транспорт) Тогда
		 ВызватьИсключение "Не выбран транспорт!";
	 КонецЕсли;	
	 Если СписокФирм.Количество() = 0 Тогда
		 ВызватьИсключение "Не выбраны филиалы-получатели!";
	 КонецЕсли;		
	 ТТН = Документы.ТТН.СоздатьДокумент();	
	 ЗаполнитьШапкуДокумента(ТТН);
	 ТТН.Фирма            = ТекущийФилиал;
	 //ТТН.ФилиалПолучатель = ФилиалПолучатель;
	 ТТН.Комментарий      = "##Документ создан на ТСД";
	 ТТН.Транспорт = Транспорт;
	 ТТН.Экспедитор = Транспорт.ТК;
	 ТТН.СпособДоставки = Транспорт.ВидДоставки;
	 ТТН.ВидТранспорта = Транспорт.ВидДоставки;
	 
	 Если Транспорт.Водители.Количество() = 1 Тогда
		 ТТН.Водитель = Транспорт.Водители[0].Водитель;	 
	 КонецЕсли;	 
	 
	 ТТН.ДатаПрихода = ТТН.Дата; 
	 
	 // Заполняем ТЧ "ДокументыОтгрузки"
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	 |	ТоварнаяНакладная.Ссылка КАК Документ,
	 |	ТоварнаяНакладная.ФирмаПолучатель КАК Филиал,
	 |	ТоварнаяНакладная.Представление КАК ПредставлениеДокумента
	 |ИЗ
	 |	Документ.ТоварнаяНакладная КАК ТоварнаяНакладная
	 |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТТН.ДокументыОтгрузки КАК ТТНДокументыОтгрузки
	 |		ПО ТоварнаяНакладная.Ссылка = ТТНДокументыОтгрузки.Документ
	 |			И (ТТНДокументыОтгрузки.Ссылка.Проведен)
	 |ГДЕ
	 |	ТоварнаяНакладная.Проведен
	 |	И ТоварнаяНакладная.Резерв
	 |	И ТоварнаяНакладная.Фирма = &Отправитель
	 |	И ТоварнаяНакладная.ФирмаПолучатель В(&Получатели)
	 |	И ТТНДокументыОтгрузки.Документ ЕСТЬ NULL 
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	ТоварнаяНакладная.ФирмаПолучатель.Наименование";
	 
	 //Запрос.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяДатаСервер()));
	 Запрос.УстановитьПараметр("Получатели", СписокФирм);
	 Запрос.УстановитьПараметр("Отправитель", ТекущийФилиал);	
	 
	 ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	 
	 Если ТаблицаДокументов.Количество() = 0 Тогда
		 ВызватьИсключение "По установленным отборам не найдено ни одного документа отгрузки.Отправитель="+Строка(ТекущийФилиал)+" Получатель "+Строка(СписокФирм);
	 КонецЕсли;
	 ТТН.Состав.Загрузить(ТаблицаСоставТТН);
	 ТТН.ДокументыОтгрузки.Загрузить(ТаблицаДокументов);	
	 ИтогоОбъем = 0;
	 ИтогоВес = 0;	
	 ИтогоМест = 0;	
	 Для Каждого Строка Из ТТН.Состав Цикл
		 // Рассчитываем вес и объем 
		 ОбщийОбъем = 0;
		 ОбщийВес = 0;
		 
		 Отбор = Новый Структура;
		 Отбор.Вставить("Филиал", Строка.Филиал);
		 
		 НайденныеСтроки = ТаблицаДокументов.НайтиСтроки(Отбор);
		 
		 Для Каждого Стр Из НайденныеСтроки Цикл
			 
			 ОбщийОбъем = ОбщийОбъем + Стр.Документ.Объем;
			 ОбщийВес = ОбщийВес + Стр.Документ.Вес;
			 
		 КонецЦикла;
		 
		 Строка.Объем = ОбщийОбъем;
		 Строка.Вес = ОбщийВес;
		 Строка.МестВсего = Строка.КоличествоМест + Строка.КоличествоНоутбуков + Строка.КоличествоТелевизоров + Строка.ДорогойТовар + Строка.Перекосы;
		 
		 ИтогоМест = ИтогоМест + Строка.МестВсего;
		 ИтогоОбъем = ИтогоОбъем + ОбщийОбъем;
		 ИтогоВес = ИтогоВес + ОбщийВес;		
		 
	 КонецЦикла;	
	 
	 ТТН.ИтогоМест = ИтогоМест;
	 ТТН.ИтогоВес = ИтогоВес;
	 ТТН.ИтогоОбъем = ИтогоОбъем;	
	 ТТН.Отгрузил = ПараметрыСеанса.глТекПользователь;
	 
	 ТекущийГород  = ТекущийФилиал.Город;
	 ТекущийРегион = ТекущийГород.Регион;
	 ТТН.ПунктПогрузки = ТекущийГород;
	 
	 ТТН.ВидТТН = Перечисления.ВидыТТН.ВнутриРегиона;		
	 
	 //ТТН.Записать(РежимЗаписиДокумента.Проведение);
	 Попытка
		 ТТН.Записать(РежимЗаписиДокумента.Проведение);
	 Исключение
		 ошибка = "";
		 Попытка
			 ошибка = ТТН.ДополнительныеСвойства.ОшибкаПриПроведении;	
		 Исключение
		 КонецПопытки;
		 ТТН.Записать();
		 ПривязатьСотрудниковПогрузкикТТН(ТТН,Перечисления.ВидыСкладскихОпераций.ПогрузкаМашины);
		 ВызватьИсключение " создан документ "+ТТН.Номер+" но не проведен "+ошибка + " , "+ ОписаниеОшибки();
		 //Документ.Записать();
		 //ВызватьИсключение ОписаниеОшибки()+" Документ "+Документ.Номер+" не проведен";
	 КонецПопытки;	
	 
	 ПривязатьСотрудниковПогрузкикТТН(ТТН,Перечисления.ВидыСкладскихОпераций.ПогрузкаМашины); 
 КонецФункции
 
 
 
 //Функции вызываемые из экспортируемых в различных операциях  =================================
 //Вызывается при любом скане ШК из Древовидной формы подбора дефрагментации и проверки на ТСД  , необходимо разбить на подфункции
 Функция СканЗадания(ВходныеДанные,Код, Количество, Наименование,Завершить)
	 ДеревоЗаданийТСД = СчитатьРег("ДеревоЗаданийТСД");
	 СтрокаНоменклатуры = ФабрикаXDTO.Тип("http://www.dns-shop.tsd.ru", "СтрокаНоменклатуры");
	 _ФабрикаXDTO = ФабрикаXDTO;
	 СписокНоменклатуры = _ФабрикаXDTO.Тип("http://www.dns-shop.tsd.ru", "СписокНоменклатуры");
	 НомерПакета = 0;
	 ТекущиеМилисекунды = 0;
	 ТС = 0;
	 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
	 УдалитьРег("ЗаписьР.КлючУникальности");
	 ТекущаяСтраница = Считатьрег("текущаяСтраница");
	 
	 Если СчитатьРег("ВопросЗадан") = Истина Тогда
		 УдалитьРег("ВопросЗадан");
		 Операция.Код          = "Завершить";
		 Операция.Наименование = "Оттарабаньте ТС на упаковку";
		 Операция.Количество   = 0;
		 Если Код = "НЕТ" Тогда
			 Если ТекущаяСтраница = 35 Тогда 
				 //ДеревоЗаданийТСД = СчитатьРег("ДеревоЗаданийТСД");
				 Адрес = СчитатьРег("СтарАдрес");
				 Записатьрег("Адрес",Адрес);
				 Попытка
					 строка = ДеревоЗаданийТСД.НайтиСтроки(Новый Структура("Адрес,Товар",Адрес,Справочники.Номенклатура.ПустаяСсылка())).Получить(0).Параметр;
				 Исключение
					 строка = 0;
				 конецпопытки;
				 Операция.Код          = "Раскрыть";
				 Операция.Наименование = Строка(Адрес);
				 Операция.Количество   = строка;
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры);
				 Операция.Код          = "Филиал";
				 Операция.Наименование = "Подтоварка в: "+Адрес;
				 Операция.Количество   = 0;
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 возврат ВходныеДанные;
			 КонецЕсли;	
			 ЗаписатьРег("текущаяСтраница",0);//устанавливаем страницу отображения на тсд 0
			 перегрузитьрег();//завершили задание выходим в менюшку стирая закрепленные переменные складской транспорт клиент и тд
			 ЗакрытьВсеКроме(Неопределено);
			 ОсвободитьДинамическуюЯчейку();
			 
			 //Удалитьрег("ДинамическаяЯчейка");
			 
		 КонецЕсли;
		 Если Код = "ДА" Тогда
			 Если ТекущаяСтраница = 35 Тогда
				 //ДеревоЗаданийТСД = СчитатьРег("ДеревоЗаданийТСД");
				 Адрес = СчитатьРег("СтарАдрес");
				 Если пустаяСтрока(Адрес)Тогда
					 адреса = ПолучитьМоеЗаданиеДефрагментацияСобрано(ПараметрыСеанса.глТекПользователь);
					 ЗаписатьЗначения("ПолучитьМоеЗаданиеДефрагментацияСобрано",ТекущаяДатаМилисекунды() - ТекущиеМилисекунды,НомерПакета ,Истина);
					 ТекущиеМилисекунды = ТекущаяДатаМилисекунды();
					 адреса.Следующий();
					 Адрес = адреса.Адрес;
					 ЗаписатьРег("СтарАдрес",Адрес);
				 КонецЕсли;
				 Операция.Код          = "Раскрыть";
				 Операция.Наименование = Строка(Адрес);
				 Операция.Количество   = 0;
				 Попытка
					 строка = ДеревоЗаданийТСД.НайтиСтроки(Новый Структура("Адрес,Товар",Адрес,Справочники.Номенклатура.ПустаяСсылка())).Получить(0);
					 Операция.Количество   = строка.Параметр;
				 Исключение 
				 конецпопытки;
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры);
				 Операция.Код          = "Филиал";
				 Операция.Наименование = "Подтоварка в: "+СчитатьРег("Адрес");
				 Операция.Количество   = 0;
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 ЗавершитьМоиЗаданияДефрагментации(ПараметрыСеанса.глТекПользователь);
				 ЗаписатьЗначения("ЗавершитьМоиЗаданияДефрагментации",ТекущаяДатаМилисекунды() - ТекущиеМилисекунды,НомерПакета ,Истина);
				 ТекущиеМилисекунды = ТекущаяДатаМилисекунды();
				 возврат ВходныеДанные;
				 
			 КонецЕсли;	
			 
			 считаннаясекция = узнатьСледСекцию(СчитатьРег("Адрес"));
			 //ЗаписатьЗначения("узнатьСледСекцию",ТекущаяДатаМилисекунды() - ТекущиеМилисекунды,НомерПакета ,Истина);
			 ТекущиеМилисекунды = ТекущаяДатаМилисекунды();
			 
			 Если  считаннаясекция ="Error" Тогда 
				 Операция.Код          = "Завершить";
				 Операция.Наименование = "Оттарабаньте ТС на упаковку";
				 Операция.Количество   = 0;
				 ЗаписатьРег("текущаяСтраница",0);//устанавливаем страницу отображения на тсд 3
				 перегрузитьрег();//завершили задание выходим в менюшку стирая закрепленные переменные складской транспорт клиент и тд
			 Иначе
				 ЗаписатьРег("Секция",считаннаясекция);//заглушка и нужно зафиксировать задание
				 ЗаписатьРег("считаннаясекция",считаннаясекция);//заглушка и нужно зафиксировать задание
				 //фиксация заданий за работником чтоб другие несмогли это взять
				 Ответ = ЗаписатьЗаданиеВРегистр(считаннаясекция,СчитатьРег("Клиент"));
				 //ЗаписатьЗначения("ЗаписатьЗаданиеВРегистр",ТекущаяДатаМилисекунды() - ТекущиеМилисекунды,НомерПакета ,Истина);
				 //ТекущиеМилисекунды = ТекущаяДатаМилисекунды();
				 
				 Операция.Код          = "Обновить";
				 Операция.Наименование = "Новая секция";
				 Операция.Количество   = 0;
				 УдалитьРег("Адрес");
				 Адрес = "";
				 ЗаписатьРег("текущаяСтраница",3);//устанавливаем страницу отображения на тсд
			 КонецЕсли;
		 КонецЕсли;
		 ВходныеДанные.Номенклатура.Добавить(Операция);
		 возврат ВходныеДанные;
	 КонецЕсли;
	 
	 Если текущаяСтраница = 442 Тогда
		 Если Код = "Отмена" Тогда
			 
			 Записатьрег("текущаяСтраница",4);
			 УдалитьРег("ТаблицаСоставТТН");
			 ДобавитьСтроку( ВходныеДанные,"Выйти","Успех",4);
			 Возврат ВходныеДанные; 
		 КонецЕсли;
		 
		 строка = ДеревоЗаданийТСД.НайтиСтроки(Новый Структура("Параметр",Код)).Получить(0);
		 Филиал = строка.Товар; 
		 Время =  строка.Адрес;
		 
		 
		 Выборка = ПолучитьТранспортПоНомеруМашины(Код);
		 Если Выборка.Следующий() Тогда 
			 ЗаписатьРег("ВыбранныйТранспорт",Выборка.Ссылка);	
			 ЗаписатьРег("Экспедитор",Выборка.Экспедитор);	
			 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
			 Операция.Код          = "-";
			 Операция.Наименование = СокрЛП(Выборка.Экспедитор);
			 Операция.Количество   = 438;
			 ВходныеДанные.Номенклатура.Добавить(Операция);
			 ТекущаяСтраница = 438;
			 ЗаписатьРег("текущаяСтраница",438);
		 Иначе
			 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
			 Операция.Код          = "Error";
			 Операция.Наименование = "Невозможно определить экспедитора";
			 Операция.Количество   = 0;
			 ВходныеДанные.Номенклатура.Добавить(Операция);
		 КонецЕсли;
		 Возврат ВходныеДанные;
	 КонецЕсли;
	 
	 Если ТекущаяСтраница = 435 Тогда
		 Ответ = "Выберите филиал";
		 Если Код = "Отмена" Тогда
			 
			 Записатьрег("текущаяСтраница",4);
			 УдалитьРег("ТаблицаСоставТТН");
			 ДобавитьСтроку( ВходныеДанные,"Выйти","Успех",4);
			 Возврат ВходныеДанные; 
			 
			 
		 КонецЕсли;
		 
		 Попытка
			 ЧКод = Число(Код);
			 Если Чкод = 0 Тогда ВызватьИсключение "Выберите филиал"; КонецЕсли;
			 строка = ДеревоЗаданийТСД.НайтиСтроки(Новый Структура("Параметр",ЧКод)).Получить(0);
			 Филиал = строка.Товар; 
			 Время =  строка.Адрес;
			 
			 ТаблицаСоставТТН = Новый ТаблицаЗначений();
			 ЧТИП = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(0, 0, ДопустимыйЗнак.Любой));
			 ТИПФИЛИАЛ =  Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
			 ТИПВРЕМЯ = Новый ОписаниеТипов("Дата", , ,	Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
			 ТаблицаСоставТТН.Колонки.Добавить("Филиал", ТИПФИЛИАЛ,"",0);
			 ТаблицаСоставТТН.Колонки.Добавить("Время", ТИПВРЕМЯ,"",0);
			 ТаблицаСоставТТН.Колонки.Добавить("Перекосы", ЧТИП,"Перекосы",1);
			 ТаблицаСоставТТН.Колонки.Добавить("ДорогойТовар", ЧТИП,"ДорогойСклад",1);
			 ТаблицаСоставТТН.Колонки.Добавить("КоличествоТелевизоров", ЧТИП,"Телевизоры",1);
			 ТаблицаСоставТТН.Колонки.Добавить("КоличествоНоутбуков", ЧТИП,"Ноутбуки",1);
			 ТаблицаСоставТТН.Колонки.Добавить("КоличествоМест", ЧТИП,"Оргтехника",1);
			 ТаблицаСоставТТН = ЧитатьРег("ТаблицаСоставТТН",ТаблицаСоставТТН);
			 НоваяСтрока = ТаблицаСоставТТН.Добавить();
			 НоваяСтрока.Филиал = Филиал;
			 НоваяСтрока.Время = Время;
			 ЗаписатьРег("ТаблицаСоставТТН",ТаблицаСоставТТН);
			 ЗаписатьРег("Филиал",Филиал);
			 ЗаписатьРег("Время",Время);
			 Ответ = "";
			 Записатьрег("текущаяСтраница",441);
		 Исключение
		 КонецПопытки;
		 Операция.Код          =  ?(ПустаяСтрока(Ответ),"Выйти","Error");
		 Операция.Наименование =  " "+Ответ;
		 Операция.Количество   = 441;//4 выход в глвное меню
		 ВходныеДанные.Номенклатура.Добавить(Операция);
		 Возврат ВходныеДанные;
	 КонецЕсли;
	 //-----------------------------------------------------------
	 Если ТекущаяСтраница = 335 Тогда 
		 //Отмена:Отмена:0
		 Если Код = "Завершить" и Количество = 0 Тогда 
			 //тут требуется "всхлопнуть" регистр
			 ЗаписатьРег("текущаяСтраница",0);
			 Ответ = ЗакрытьЗаданияПроверки();
			 //------------------------------------------------
			 Операция.Код          =  ?(ПустаяСтрока(Ответ),"Выйти","Error");
			 Операция.Наименование =  " "+Ответ;
			 Операция.Количество   = 4;//4 выход в глвное меню
			 ВходныеДанные.Номенклатура.Добавить(Операция);
			 Возврат ВходныеДанные;
			 
		 Иначе
			 Ответ = СканЗаданияНаПроверку(Код,Количество);
			 Операция.Код          = ?(ПустаяСтрока(Ответ),"Выйти","Error");
			 Операция.Наименование = " "+Ответ;
			 Операция.Количество   = 4;//
			 Если не ПустаяСтрока(Ответ) Тогда 
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 Возврат ВходныеДанные;
			 КонецЕсли;
			 
		 КонецЕсли;
		 
		 //--------------------------------------------------------------
	 ИначеЕсли ТекущаяСтраница = 330 Тогда
		 //выбран товар или товарная группа в первом окне по заданиям на проверку 
		 Ответ = СканВыбораЗаданияНаПроверку(Код,Количество);
		 //ЗаписатьЗначения("СканВыбораЗаданияНаПроверку",ТекущаяДатаМилисекунды() - ТекущиеМилисекунды,НомерПакета ,Истина);
		 ТекущиеМилисекунды = ТекущаяДатаМилисекунды();
		 Операция.Код          = ?(ПустаяСтрока(Ответ),"Выйти","Error");
		 Завершить = ПустаяСтрока(Ответ);
		 Операция.Наименование = " "+Ответ;
		 Операция.Количество   = ?(ЕстьЗаданияИнвентаризацииНаМеня(),335, 4);//
		 ВходныеДанные.Номенклатура.Добавить(Операция);
		 Возврат ВходныеДанные;
		 
	 ИначеЕсли ТекущаяСтраница = 35 Тогда
		 Ответ = СканСобраноДефрагментацииОбщий(Код,Количество);
		 //ЗаписатьЗначения("СканСобраноДефрагментацииОбщий",ТекущаяДатаМилисекунды() - ТекущиеМилисекунды,НомерПакета ,Истина);
		 //ТекущиеМилисекунды = ТекущаяДатаМилисекунды();
		 
	 ИначеЕсли ТекущаяСтраница = 30 Тогда
		 Ответ = СканЗаданияДефрагментацииОбщий(Код,Количество);
		 
	 Иначе
		 ЗаписатьРег("Код",Код);
		 Если Код = ".Х." и Количество = 0 Тогда
			 Ответ = ПереместитьВДинамическуюЯчейку(); 
			 Операция.Код          =  ?(ПустаяСтрока(Ответ),"Выйти","Error");
			 Если Считатьрег("ОшибкуПоказал") = Ответ Тогда
				 УдалитьРег("ОшибкуПоказал");
				 Операция.Код          =  "Выйти";
			 иначе
				 ЗаписатьРег("ОшибкуПоказал",Ответ);
			 КонецЕсли;
			 Операция.Наименование =  " "+Ответ;
			 Операция.Количество   = 4;//4 выход в глвное меню
			 ВходныеДанные.Номенклатура.Добавить(Операция);
			 Возврат ВходныеДанные;	 
			 
		 КонецЕсли;
		 
		 Ответ = СканЗаданияОбщий(Код,Количество);
		 
	 КонецЕсли;
	 Если не ПустаяСтрока(Ответ) Тогда
		 
		 Операция.Код          = "Error";
		 Операция.Наименование = Ответ;
		 Операция.Количество   = 1;
		 
		 товары = СчитатьРег("СписокВыбораТовара");
		 Если Ответ = "Выбор" и (не товары = Неопределено)  Тогда
			 //Интерактивный Вопрос пользователю
			 Операция.Код          = "Вопрос";
			 Операция.Наименование = "Выберите товар";
			 Операция.Количество   = 0;
			 ВходныеДанные.Номенклатура.Добавить(Операция);
			 Для каждого стр из товары цикл
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = стр.Код;
				 Операция.Наименование = стр.Наименование;
				 Операция.Количество   = 0;
				 ВходныеДанные.Номенклатура.Добавить(Операция);
			 КонецЦикла;
		 Иначе
			 ВходныеДанные.Номенклатура.Добавить(Операция);
			 
		 КонецЕсли;
		 возврат ВходныеДанные;
		 
		 
		 
	 КонецЕсли;
	 //ДеревоЗаданийТСД = СчитатьРег("ДеревоЗаданийТСД");
	 Ключ = СчитатьРег("ЗаписьР.КлючУникальности");
	 
	 Если ТекущаяСтраница = 35 Тогда 
		 ЗаписьР = РегистрыСведений.ЗаданияНаДефрагментацию.СоздатьМенеджерЗаписи();
		 Клиент = СчитатьРег("Секция");
	 ИначеЕсли ТекущаяСтраница = 30 Тогда 
		 ЗаписьР = РегистрыСведений.ЗаданияНаДефрагментацию.СоздатьМенеджерЗаписи();
		 Клиент = СчитатьРег("Секция");
	 Иначе			
		 ЗаписьР = РегистрыСведений.ЗаданияКладовщикам2.СоздатьМенеджерЗаписи();
		 Клиент = СчитатьРег("Клиент");
	 КонецЕсли;
	 Если ТекущаяСтраница = 335 Тогда 
		 ЗаписьР = РегистрыСведений.ПроверкаТоваров.СоздатьМенеджерЗаписи();
		 Клиент = СчитатьРег("ВыбТовар");
		 ЗаписьР.НомерЗадания = Ключ;
	 Иначе
		 ЗаписьР.КлючУникальности = Ключ;
	 КонецЕсли;
	 ЗаписьР.Прочитать();
	 ДинамическаяЯчейка = СчитатьРег("ДинамическаяЯчейка");
	 Адрес = СчитатьРег("Адрес");
	 ТипДанных =СчитатьРег("СчитаныйШК.ТипДанных");
	 
	 Если ТипДанных = 4 и не пустаястрока(Адрес) Тогда
		 Если ТекущаяСтраница = 335 Тогда 
			 Операция.Код          = "Обновить";
			 Операция.Наименование = "Проверка "+Адрес;
			 Операция.Количество   = 0;
			 ВходныеДанные.Номенклатура.Добавить(Операция);
			 ЗаписатьРег("ОбновлениеАдрес",Адрес);
			 ЗаписатьРег("Адрес",Адрес);
			 возврат ВходныеДанные;
		 ИначеЕсли ТекущаяСтраница = 35 Тогда 
			 адреса = ПолучитьМоеЗаданиеДефрагментацияСобрано(ПараметрыСеанса.глТекПользователь); //возвращается выборка по иерархии
			 ЗаписатьЗначения("ПолучитьМоеЗаданиеДефрагментацияСобрано",ТекущаяДатаМилисекунды() - ТекущиеМилисекунды,НомерПакета ,Истина);
			 ТекущиеМилисекунды = ТекущаяДатаМилисекунды();
			 
		 ИначеЕсли ТекущаяСтраница = 30 Тогда 
			 адреса = ПолучитьМоеЗаданиеДефрагментация(ПараметрыСеанса.глТекПользователь); //возвращается выборка по иерархии
			 ЗаписатьЗначения("ПолучитьМоеЗаданиеДефрагментация",ТекущаяДатаМилисекунды() - ТекущиеМилисекунды,НомерПакета ,Истина);
			 ТекущиеМилисекунды = ТекущаяДатаМилисекунды();
			 
		 Иначе
			 адреса = ПолучитьМоеЗадание(Клиент,ПараметрыСеанса.глТекПользователь); //возвращается выборка по иерархии
			 ЗаписатьЗначения("ПолучитьМоеЗадание",ТекущаяДатаМилисекунды() - ТекущиеМилисекунды,НомерПакета ,Истина);
			 ТекущиеМилисекунды = ТекущаяДатаМилисекунды();
			 
		 КонецЕсли;
		 Если не адреса.НайтиСледующий(Новый Структура("Адрес",Адрес)) Тогда 
			 Операция.Код          = "Error";
			 Операция.Наименование = "В задании нет "+Символы.ВК+Символы.ПС+"считанного адреса"+Символы.ВК+Символы.ПС+Адрес;
			 Операция.Количество   = 0;
			 Если ТекущаяСтраница = 35 Тогда 
				 Операция.Код          = "Вопрос";
				 
				 Операция.Наименование = "Вы пытаетесь разместить"+Символы.ВК+Символы.ПС+"товар в адрес"+Символы.ВК+Символы.ПС+Адрес+
				 Символы.ВК+Символы.ПС+
				 "Вы уверены?";
				 Операция.Количество   = 0;
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "НЕТ";
				 Операция.Наименование = "НЕТ";
				 Операция.Количество   = 0;
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "ДА";
				 Операция.Наименование = "ДА";
				 Операция.Количество   = 1;
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 ДобавитьСтроку(ВходныеДанные,"БезКоличества"," ",0);
				 ЗаписатьРег("ВопросЗадан",Истина);
				 возврат ВходныеДанные;
				 
				 
			 КонецЕсли;
		 Иначе
			 //ДеревоЗаданийТСД = Новый ТаблицаЗначений;
			 Операция.Код          = "Раскрыть";
			 Операция.Наименование = Адрес;
			 Операция.Количество   = 0;
			 Попытка
				 строка = ДеревоЗаданийТСД.НайтиСтроки(Новый Структура("Адрес,Товар",Адрес,Справочники.Номенклатура.ПустаяСсылка())).Получить(0).Параметр;
				 Операция.Количество   = строка;
			 Исключение КонецПопытки;
			 //ЗаписатьРег("Раскрыть",Адрес);
			 ВходныеДанные.Номенклатура.Добавить(Операция);
			 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры);
			 Операция.Код          = "Филиал";
			 Если текущаяСтраница = 35 Тогда
				 Операция.Наименование = Строка(Клиент);
			 Иначе
				 Операция.Наименование = ?(ТекущаяСтраница = 30,"Подтоварка ","")+Строка(Клиент)+" из "+Адрес;
			 КонецЕсли;
			 Операция.Количество   = 0;
			 //ЗаписатьРег("Раскрыть",Адрес);
			 ВходныеДанные.Номенклатура.Добавить(Операция);
			 возврат ВходныеДанные;
			 
		 КонецЕсли;
		 
	 ИначеЕсли ТипДанных = 11 Тогда 
		 Операция.Код          = ?(ПустаяСтрока(Ответ),"Транспорт","Error");
		 Операция.Наименование = ?(ПустаяСтрока(Ответ),ДинамическаяЯчейка,Ответ);
		 Операция.Количество   = 0;
		 ВходныеДанные.Номенклатура.Добавить(Операция);
		 возврат ВходныеДанные;
		 
	 ИначеЕсли ТипДанных = 3 Тогда
		 
		 //ЗаписатьРег("ЗаписьР.Выбран",ЗаписьР.Выбран());
		 
		 
		 Если не (ЗаписьР.Выбран() и ЗначениеЗаполнено(Ключ))  Тогда
			 Операция.Код          = "Error";
			 Операция.Наименование = ?(ПустаяСтрока(Ответ),"Товар не распознан",Ответ);
			 Операция.Количество   = 0;
			 
		 Иначе
			 Попытка
				 Если ТекущаяСтраница = 335 Тогда
					 Если ЗаписьР.КоличествоПроверенное=1 Тогда 
						 Операция.Код          = "Обновить";
						 Операция.Наименование = "Проверка "+Адрес;
						 Операция.Количество   = 0;
						 ВходныеДанные.Номенклатура.Добавить(Операция);
						 Возврат ВходныеДанные;
					 КонецЕсли;
					 
					 строка = ДеревоЗаданийТСД.НайтиСтроки(Новый Структура("Адрес,Товар",Адрес,ЗаписьР.Номенклатура)).Получить(0).Параметр;	
				 ИначеЕсли ТекущаяСтраница = 35 Тогда
					 строка = ДеревоЗаданийТСД.НайтиСтроки(Новый Структура("Товар",ЗаписьР.Товар)).Получить(0).Параметр;
				 Иначе
					 строка = ДеревоЗаданийТСД.НайтиСтроки(Новый Структура("Адрес,Товар",Адрес,ЗаписьР.Товар)).Получить(0).Параметр;
				 КонецЕсли;
			 Исключение строка = 0; 
			 КонецПопытки;
			 Если ТекущаяСтраница = 335 Тогда
				 Операция.Код          = Строка(ЗаписьР.Номенклатура.Код);
				 Операция.Наименование = "("+Формат(ЗаписьР.КоличествоПроверенное,"ЧН=; ЧГ=0")+") "+ЗаписьР.Номенклатура.Наименование+"("+ЗаписьР.Номенклатура.Код+")";
				 Операция.Количество   = строка; //ЗаписьР.ТребуемоеКоличество-ЗаписьР.СобралиВКоличестве; 
			 Иначе
				 
				 Операция.Код          = Строка(ЗаписьР.Товар.Код);
				 Операция.Наименование = "("+Формат(ЗаписьР.ТребуемоеКоличество,"ЧН=; ЧГ=0")+") "+ЗаписьР.Товар.Наименование+"("+ЗаписьР.Товар.Код+")";
				 Операция.Количество   = строка; //ЗаписьР.ТребуемоеКоличество-ЗаписьР.СобралиВКоличестве; 
			 КонецЕсли;
			 ЗапросЗаданий = Новый Запрос;
			 ЗапросЗаданий.Текст = "ВЫБРАТЬ
			 |	заданиявсего.Товар КАК Товар,
			 |	СУММА(заданиявсего.ТребуемоеКоличество) КАК КоличествоВсего,
			 |	СУММА(ВЫБОР
			 |			КОГДА заданиявсего.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.ВПодборе)
			 |				ТОГДА заданиявсего.ТребуемоеКоличество
			 |			ИНАЧЕ 0
			 |		КОНЕЦ) КАК Количество
			 |ИЗ
			 |	РегистрСведений.ЗаданияКладовщикам2 КАК заданиявсего
			 |ГДЕ
			 |	(заданиявсего.Автор = &Автор
			 |			ИЛИ заданиявсего.Исполнитель = &Автор)
			 |	И заданиявсего.Клиент = &Клиент
			 |	И (заданиявсего.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.ВПодборе)
			 |			ИЛИ заданиявсего.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.Собрано)
			 |			ИЛИ заданиявсего.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.Завершено))
			 |	И заданиявсего.Адрес = &Адрес
			 |	И заданиявсего.Товар = &Товар
			 |
			 |СГРУППИРОВАТЬ ПО
			 |	заданиявсего.Товар";
			 Если ТекущаяСтраница = 35 Тогда
				 ЗаписатьРег("запрос",ТекущаяСтраница);
				 ЗапросЗаданий.Текст = "ВЫБРАТЬ
				 |	ЗаданияНаДефрагментацию.Товар КАК Товар,
				 |	СУММА(ЗаданияНаДефрагментацию.ТребуемоеКоличество) КАК КоличествоВсего,
				 |	СУММА(ВЫБОР
				 |			КОГДА ЗаданияНаДефрагментацию.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.Собрано)
				 |				ТОГДА ЗаданияНаДефрагментацию.ТребуемоеКоличество
				 |			ИНАЧЕ 0
				 |		КОНЕЦ) КАК Количество
				 |ИЗ
				 |	РегистрСведений.ЗаданияНаДефрагментацию КАК ЗаданияНаДефрагментацию
				 |ГДЕ
				 |	ЗаданияНаДефрагментацию.Исполнитель = &Автор
				 |	И (ЗаданияНаДефрагментацию.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.Завершено)
				 |			ИЛИ ЗаданияНаДефрагментацию.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.Собрано))
				 |	И ЗаданияНаДефрагментацию.Товар = &Товар
				 |//	И ЗаданияНаДефрагментацию.АдресПодбора = &Адрес
				 |
				 |СГРУППИРОВАТЬ ПО
				 |	ЗаданияНаДефрагментацию.Товар";
				 
			 ИначеЕсли ТекущаяСтраница = 30 Тогда 
				 ЗаписатьРег("запрос",ТекущаяСтраница);
				 ЗапросЗаданий.Текст = "ВЫБРАТЬ
				 |	ЗаданияНаДефрагментацию.Товар КАК Товар,
				 |	СУММА(ЗаданияНаДефрагментацию.ТребуемоеКоличество) КАК КоличествоВсего,
				 |	СУММА(ВЫБОР
				 |			КОГДА ЗаданияНаДефрагментацию.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.ВПодборе)
				 |				ТОГДА ЗаданияНаДефрагментацию.ТребуемоеКоличество
				 |			ИНАЧЕ 0
				 |		КОНЕЦ) КАК Количество
				 |ИЗ
				 |	РегистрСведений.ЗаданияНаДефрагментацию КАК ЗаданияНаДефрагментацию
				 |ГДЕ
				 |	ЗаданияНаДефрагментацию.Исполнитель = &Автор
				 |	И (ЗаданияНаДефрагментацию.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.ВПодборе)
				 |			ИЛИ ЗаданияНаДефрагментацию.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.Собрано))
				 |	И ЗаданияНаДефрагментацию.Товар = &Товар
				 |	И ЗаданияНаДефрагментацию.АдресХранения = &Адрес
				 |
				 |СГРУППИРОВАТЬ ПО
				 |	ЗаданияНаДефрагментацию.Товар";
			 ИначеЕсли ТекущаяСтраница = 335 Тогда
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 Возврат ВходныеДанные;
				 
			 КонецЕсли;
			 
			 ЗапросЗаданий.УстановитьПараметр("Автор", ПараметрыСеанса.глТекПользователь);
			 ЗапросЗаданий.УстановитьПараметр("Товар", ЗаписьР.Товар);	
			 ЗапросЗаданий.УстановитьПараметр("Клиент", Клиент);	
			 ЗапросЗаданий.УстановитьПараметр("Адрес", Адрес);
			 ЗапросЗаданий.УстановитьПараметр("НомерЗадания", ЗаписьР.НомерЗадания);	
			 колич = ЗапросЗаданий.Выполнить().Выбрать();
			 ЗаписатьЗначения("Запрос остатков по заданию страница: "+строка(ТекущаяСтраница) ,ТекущаяДатаМилисекунды() - ТекущиеМилисекунды,НомерПакета ,Истина);
			 ТекущиеМилисекунды = ТекущаяДатаМилисекунды();
			 
			 Коливо = 0;
			 Если  колич.Следующий() Тогда
				 Операция.Наименование = "("+Формат(колич.Количество,"ЧН=; ЧГ=0")+"/"+Формат(колич.КоличествоВсего,"ЧН=; ЧГ=0")+")"+колич.Товар.Наименование+"("+колич.Товар.Код+")";
				 Коливо =  колич.Количество;	
			 КонецЕсли;
			 //Записатьрег("КоличествоОстаток",Строка(ЗаписьР.Товар)+" "+Строка(Адрес)+" "+Строка(Коливо));
			 Если Коливо = 0  Тогда //ЗаписьР.ТребуемоеКоличество = ЗаписьР.СобралиВКоличестве  Тогда
				 Операция.Код          = "Удалить";   //удаляем строчку с товаром
				 Операция.Наименование = Строка(ЗаписьР.Товар.Код);
				 Операция.Количество   = строка;   //удаление товара
				 
				 ЗапросЗаданий = Новый Запрос;
				 
				 ЗапросЗаданий.Текст = "ВЫБРАТЬ
				 |	ЗаданияКладовщикам2.Товар КАК Товар
				 |ИЗ
				 |	РегистрСведений.ЗаданияКладовщикам2 КАК ЗаданияКладовщикам2
				 |ГДЕ
				 |	ЗаданияКладовщикам2.Автор = &Автор
				 |	И ЗаданияКладовщикам2.Клиент = &Клиент
				 |	И ЗаданияКладовщикам2.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.ВПодборе)
				 //|	И ЗаданияКладовщикам2.НомерЗадания = &НомерЗадания
				 |	И ЗаданияКладовщикам2.Адрес = &Адрес
				 |
				 |СГРУППИРОВАТЬ ПО
				 |	ЗаданияКладовщикам2.Товар
				 |
				 |ИМЕЮЩИЕ
				 |	СУММА(ЗаданияКладовщикам2.ТребуемоеКоличество - ЗаданияКладовщикам2.СобралиВКоличестве) > 0";		
				 Если ТекущаяСтраница = 35 Тогда 
					 ЗапросЗаданий.Текст = "ВЫБРАТЬ
					 |	регистр.Товар КАК Товар
					 |ИЗ
					 |	РегистрСведений.ЗаданияНаДефрагментацию КАК регистр
					 |ГДЕ
					 |	регистр.Автор = &Автор
					 |	И регистр.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.Собрано)
					 |//	И регистр.АдресПодбора = &Адрес
					 |
					 |СГРУППИРОВАТЬ ПО
					 |	регистр.Товар
					 |
					 |ИМЕЮЩИЕ
					 |	СУММА(регистр.ТребуемоеКоличество) > 0";		
					 
				 ИначеЕсли ТекущаяСтраница = 30 Тогда 
					 ЗапросЗаданий.Текст = "ВЫБРАТЬ
					 |	Регистр.Товар КАК Товар
					 |ИЗ
					 |	РегистрСведений.ЗаданияНаДефрагментацию КАК Регистр
					 |ГДЕ
					 |	Регистр.Автор = &Автор
					 |	И Регистр.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.ВПодборе)
					 |	И Регистр.АдресХранения = &Адрес
					 |
					 |СГРУППИРОВАТЬ ПО
					 |	Регистр.Товар
					 |
					 |ИМЕЮЩИЕ
					 |	СУММА(Регистр.ТребуемоеКоличество) > 0";		
					 
					 
				 КонецЕсли;						
				 
				 //В запросе проверяем после удаления строки есть ли еще другие товары/адреса в задании 
				 //и Если нет то удаляем строку с адресом
				 ЗапросЗаданий.УстановитьПараметр("Автор", ПараметрыСеанса.глТекПользователь);
				 ЗапросЗаданий.УстановитьПараметр("Клиент", Клиент);	
				 ЗапросЗаданий.УстановитьПараметр("Адрес", Адрес);
				 ЗапросЗаданий.УстановитьПараметр("НомерЗадания", ЗаписьР.НомерЗадания);	
				 
				 
				 Если не  ЗапросЗаданий.Выполнить().Выбрать().Следующий() Тогда 
					 ВходныеДанные.Номенклатура.Добавить(Операция);
					 Если ТекущаяСтраница = 35 Тогда
						 Попытка
							 строка = ДеревоЗаданийТСД.НайтиСтроки(Новый Структура("Адрес,Товар",Адрес,Справочники.Номенклатура.ПустаяСсылка())).Получить(0).Параметр;
						 Исключение
							 строка = ДеревоЗаданийТСД.НайтиСтроки(Новый Структура("Адрес,Товар",Считатьрег("СтарАдрес"),Справочники.Номенклатура.ПустаяСсылка())).Получить(0).Параметр;
						 КонецПопытки;
					 Иначе
						 строка = ДеревоЗаданийТСД.НайтиСтроки(Новый Структура("Адрес,Товар",Адрес,Справочники.Номенклатура.ПустаяСсылка())).Получить(0).Параметр;
					 КонецЕсли;
					 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры);
					 Операция.Код          = "Удалить";
					 Операция.Наименование = Адрес;   // удаление адреса
					 Операция.Количество   = строка;
					 Если ТекущаяСтраница = 30 Тогда
						 считаннаясекция = "Error";	
						 Операция.Код          = "Обновить";//Выйти";
						 Операция.Наименование = "Оттарабаньте ТС в Адрес подбора";
						 Операция.Количество   = 0;
						 
						 
						 
						 
						 УдалитьРег("Адрес");
						 //ЗаписатьРег("текущаяСтраница",35);//устанавливаем страницу отображения на тсд 35 в случае убирания всего товара с экрана
						 ЗаписатьРег("текущаяСтраница",35);//устанавливаем страницу отображения на тсд 35 в случае убирания всего товара с экрана
						 Операция.Код          = "Выйти";
						 Завершить = Истина;
						 
						 Операция.Наименование = "Адрес куда дефрагментируем";
						 Операция.Количество   = 90;//
						 УдалитьРег("АдресСканирован");
						 ЗаписатьРег("текущаяСтраница",90);//устанавливаем страницу отображения на тсд 35 в случае убирания всего товара с экрана
						 ВходныеДанные.Номенклатура.Добавить(Операция);
						 возврат ВходныеДанные;
						 
					 КонецЕсли;
					 
					 Если ТекущаяСтраница = 35 Тогда 
						 Ответ = ЗавершитьМоиЗаданияДефрагментации(ПараметрыСеанса.глТекПользователь);
						 ЗаписатьЗначения("ЗавершитьМоиЗаданияДефрагментации ",ТекущаяДатаМилисекунды() - ТекущиеМилисекунды,НомерПакета ,Истина);
						 ТекущиеМилисекунды = ТекущаяДатаМилисекунды();
						 //ЗаписатьРег("ЗавершитьДефрагментац",Ответ);
						 Если Ответ = "НетЗаписей" Тогда 
						 ИначеЕсли пустаяСтрока(Ответ) Тогда
						 Иначе
							 Операция.Код          = "Error";
							 Операция.Наименование = Ответ;
							 Операция.Количество   = 0;
							 ВходныеДанные.Номенклатура.Добавить(Операция);
							 Возврат ВходныеДанные;
						 КонецЕсли;
					 КонецЕсли;
				 КонецЕсли;
				 Если Операция.Код   = "Удалить" и ТекущаяСтраница < 30 и Операция.Наименование = Адрес Тогда
					 ЗаписатьРег("старАдрес",Адрес);
					 Удалитьрег("Адрес");
					 //Ответ = ПереместитьВДинамическуюЯчейку();
				 КонецЕсли;
				 
			 КонецЕсли;//конец условия по нулевому количеству
			 //проверяем что неосталось задании 
			 //закрываем окно Если это был последний товар , последний адрес
			 //ЗаписатьРег(Операция.Код+"1",Операция.Наименование);
			 
			 Если ТекущаяСтраница = 35 Тогда 
				 задания = ПолучитьМоеЗаданиеДефрагментацияСобрано(ПараметрыСеанса.глТекПользователь); 
				 ЗаписатьЗначения("ПолучитьМоеЗаданиеДефрагментацияСобрано",ТекущаяДатаМилисекунды() - ТекущиеМилисекунды,НомерПакета ,Истина);
				 ТекущиеМилисекунды = ТекущаяДатаМилисекунды();
				 
			 ИначеЕсли ТекущаяСтраница = 30 Тогда 
				 задания = ПолучитьМоеЗаданиеДефрагментация(ПараметрыСеанса.глТекПользователь); 
				 ЗаписатьЗначения("ПолучитьМоеЗаданиеДефрагментация",ТекущаяДатаМилисекунды() - ТекущиеМилисекунды,НомерПакета ,Истина);
				 ТекущиеМилисекунды = ТекущаяДатаМилисекунды();
				 
			 Иначе
				 задания = ПолучитьМоеЗадание(Клиент,ПараметрыСеанса.глТекПользователь); 
				 //ЗаписатьЗначения("ПолучитьМоеЗадание",ТекущаяДатаМилисекунды() - ТекущиеМилисекунды,НомерПакета ,Истина);
				 //ТекущиеМилисекунды = ТекущаяДатаМилисекунды();
				 
			 КонецЕсли;
			 //Если нет заданий .. закрываем окно
			 Если не задания.Следующий() Тогда
				 //ряды = ПолучитьСекции(СчитатьРег("Клиент"),Лев(СчитатьРег("Адрес"),3));
				 Если ТекущаяСтраница = 35 Тогда 
					 считаннаясекция = "Error";	
					 Операция.Код          = "Завершить";
					 Операция.Наименование = "Усе перемещено"; //нужно проверить есть ли незавершенные задания и Если есть то перекинуть в окно 30 Если и в 35 нет завершенных нужно в 35
					 Операция.Количество   = 0;
					 //Если ТекущаяСтраница = 35 Тогда 
					 Ответ = ЗавершитьМоиЗаданияДефрагментации(ПараметрыСеанса.глТекПользователь);
					 ЗаписатьЗначения("ЗавершитьМоиЗаданияДефрагментации",ТекущаяДатаМилисекунды() - ТекущиеМилисекунды,НомерПакета ,Истина);
					 ТекущиеМилисекунды = ТекущаяДатаМилисекунды();
					 
					 Если Ответ = "НетЗаписей" Тогда 
					 ИначеЕсли пустаяСтрока(Ответ) Тогда
					 Иначе
						 Операция.Код          = "Error";
						 Операция.Наименование = Ответ;
						 Операция.Количество   = 0;
						 ВходныеДанные.Номенклатура.Добавить(Операция);
						 Возврат ВходныеДанные;
					 КонецЕсли;
					 //КонецЕсли;
					 Если  Операция.Код          = "Завершить" тогда	 Завершить = Истина; КонецЕсли;
					 
					 ЗаписатьРег("текущаяСтраница",0);//устанавливаем страницу отображения на тсд 0
					 ВходныеДанные.Номенклатура.Добавить(Операция);
					 возврат ВходныеДанные;
					 
				 ИначеЕсли ТекущаяСтраница = 30 Тогда 
					 считаннаясекция = "Error";	
					 Операция.Код          = "Обновить";//Выйти";
					 Операция.Наименование = "Оттарабаньте ТС в Адрес подбора";
					 Операция.Количество   = 0;
					 УдалитьРег("Адрес");
					 //ЗаписатьРег("текущаяСтраница",35);//устанавливаем страницу отображения на тсд 35 в случае убирания всего товара с экрана
					 ЗаписатьРег("текущаяСтраница",35);//устанавливаем страницу отображения на тсд 35 в случае убирания всего товара с экрана
					 Операция.Код          = "Выйти";
					 Операция.Наименование = "Адрес куда дефрагментируем";
					 Операция.Количество   = 90;//
					 УдалитьРег("АдресСканирован");
					 ЗаписатьРег("текущаяСтраница",90);//устанавливаем страницу отображения на тсд 35 в случае убирания всего товара с экрана
					 ВходныеДанные.Номенклатура.Добавить(Операция);
					 возврат ВходныеДанные;
					 
				 Иначе
					 Адрес = СчитатьРег("Адрес");
					 Если не ЗначениеЗаполнено(Адрес) Тогда Адрес = СчитатьРег("старАдрес");ЗаписатьРег("Адрес",Адрес); КонецЕсли;
					 ПереместитьВДинамическуюЯчейку();
					 считаннаясекция = узнатьСледСекцию(Адрес);
					 Удалитьрег("старАдрес");
				 КонецЕсли;
					 ПереместитьВДинамическуюЯчейку();
		 
				 Если  считаннаясекция ="Error" Тогда 
					 Операция.Код          = "Завершить";
					 Операция.Наименование = "Оттарабаньте ТС на упаковку";
					 Операция.Количество   = 0;
					 //нужно проверить есть ли еще ряды и в случае Если есть , перекинуть в ряды
					 ряды = ПолучитьРяды(СчитатьРег("Клиент"));
					 УдалитьРег("Адрес");
					 УдалитьРег("Секция");
					 Если ряды.Строки.Количество() > 0 Тогда 
						 ЗаписатьРег("текущаяСтраница",1);//устанавливаем страницу отображения на тсд 3
						 Операция.Код          = "Выйти";
						 Операция.Наименование = "Следующий ряд";
						 Операция.Количество   = 1;
						 
					 Иначе
						 //----------------------------------
						 ЗаписатьРег("текущаяСтраница",0);//устанавливаем страницу отображения на тсд 3
						 перегрузитьрег();//завершили задание выходим в менюшку стирая закрепленные переменные складской клиент и тд
					 КонецЕсли;
					 
					 ЗакрытьВсеКроме(Неопределено);
					 
				 Иначе
					 //Интерактивный Вопрос пользователю
					 Операция.Код          = "Вопрос";
					 Операция.Наименование = "Хотите продолжить подбор в секции "+считаннаясекция;
					 Операция.Количество   = 0;
					 ВходныеДанные.Номенклатура.Добавить(Операция);
					 
					 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
					 Операция.Код          = "НЕТ";
					 Операция.Наименование = "НЕТ";
					 Операция.Количество   = 0;
					 ВходныеДанные.Номенклатура.Добавить(Операция);
					 
					 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
					 Операция.Код          = "ДА";
					 Операция.Наименование = "ДА";
					 Операция.Количество   = 1;
					 ВходныеДанные.Номенклатура.Добавить(Операция);
					 ДобавитьСтроку(ВходныеДанные,"БезКоличества"," ",0);
					 ЗаписатьРег("ВопросЗадан",Истина);
					 возврат ВходныеДанные;
				 КонецЕсли;
			 КонецЕсли;//конец условия по наличию записи в регистре
		 КонецЕсли;
	 Иначе
		 //Операция.Код          = ?(ПустаяСтрока(Операция.Код),"Error",Операция.Код);
		 //Операция.Наименование = ?(ПустаяСтрока(Ответ),ДинамическаяЯчейка,Ответ);
	 КонецЕсли; //Конец условия по типу данных 
	 ВходныеДанные.Номенклатура.Добавить(Операция);
	 Если  Операция.Код          = "Завершить" или  Операция.Код          = "Выйти" тогда		 Завершить = Истина;  ПереместитьВДинамическуюЯчейку(); КонецЕсли;
	 
	 Возврат ВходныеДанные;
	 
 КонецФункции
 //Функция вызываемая из экспортируемых в операциях инвентаризация, размещение , перемещение =================================
 //Вызывается при любом скане ШК из Листовидной формы на ТСД 
 Функция СканСпискаТоваров(ВходныеДанные,Код, Количество, Наименование)
	 СтрокаНоменклатуры = ФабрикаXDTO.Тип("http://www.dns-shop.tsd.ru", "СтрокаНоменклатуры");
	 _ФабрикаXDTO = ФабрикаXDTO;
	 СписокНоменклатуры = _ФабрикаXDTO.Тип("http://www.dns-shop.tsd.ru", "СписокНоменклатуры");
	 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
	 ТекущаяСтраница = Считатьрег("текущаяСтраница");
	 Если ТекущаяСтраница = 538 или ТекущаяСтраница = 438 Тогда 
		 
		 Операция.Код          = "Ошибка";
		 Операция.Наименование = "Сканируйте бэйджики сотрудников";
		 Операция.Количество = 0;
		 Если Код = "Отмена" Тогда ЗаписатьРег("текущаяСтраница",4); 
			 Операция.Код          = "Выход";
			 Операция.Наименование = "-";
			 Операция.Количество = 4;
			 
		 иначе
			 Данные = ПрочитатьШтрихКод(Код);
			 
			 Если Данные.типДанных = 0 Тогда
				 Сотрудник = справочники.Пользователи.НайтиПоКоду(Данные.Данные);
				 Операция.Код          = "vis"+Сотрудник.Код;
				 Операция.Наименование = Строка(Сотрудник);
				 Операция.Количество = -1;
			 КонецЕсли; 
		 КонецЕсли;
		 ВходныеДанные.Номенклатура.Добавить(Операция); 
		 Возврат ВходныеДанные;
		 
	 КонецЕсли;
	 Если ТекущаяСтраница = 441 Тогда 
		 Если Код = "Отмена" Тогда 
			 Записатьрег("текущаяСтраница",4);
			 УдалитьРег("ТаблицаСоставТТН");
			 
			 ДобавитьСтроку( ВходныеДанные,"Выйти","Успех",4);
			 Возврат ВходныеДанные; 
		 КонецЕсли;
		 ДобавитьСтроку( ВходныеДанные,"Ошибка","Заполните вручную",0);
		 Возврат ВходныеДанные; 
	 КонецЕсли;
	 Адрес = СчитатьРег("АдресПолки");
	 СейчасИнвентаризация = (Считатьрег("СейчасИнвентаризация") <> НЕопределено);
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	Счет_41_АдресныйОстатки.Номенклатура.Наименование КАК Наименование,
	 |	Счет_41_АдресныйОстатки.Номенклатура.Код КАК Код,
	 |	СУММА(Счет_41_АдресныйОстатки.КоличествоОстаток) КАК Количество,
	 |	Счет_41_АдресныйОстатки.Номенклатура
	 |ПОМЕСТИТЬ ВТТовар
	 |ИЗ
	 |	РегистрНакопления.Счет_41_Адресный.Остатки(, ) КАК Счет_41_АдресныйОстатки
	 |ГДЕ
	 |	Счет_41_АдресныйОстатки.Адрес = &Адрес
	 |	И Счет_41_АдресныйОстатки.Номенклатура = &товар
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	Счет_41_АдресныйОстатки.Номенклатура.Код,
	 |	Счет_41_АдресныйОстатки.Номенклатура.Наименование,
	 |	Счет_41_АдресныйОстатки.Номенклатура
	 |
	 |ИМЕЮЩИЕ
	 |	СУММА(Счет_41_АдресныйОстатки.КоличествоОстаток) > 0
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ВТТовар.Наименование,
	 |	ВТТовар.Код,
	 |	ЕСТЬNULL(ВТТовар.Количество, 0) КАК Количество,
	 |	УчетКодовПроизводителя.Код КАК Артикул
	 |ИЗ
	 |	ВТТовар КАК ВТТовар
	 |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.УчетКодовПроизводителя КАК УчетКодовПроизводителя
	 |		ПО ВТТовар.Номенклатура = УчетКодовПроизводителя.Товар1
	 |ГДЕ
	 |	УчетКодовПроизводителя.Товар1 = &товар
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |УНИЧТОЖИТЬ ВТТовар";
	 
	 
	 КоличествоНаЭкране = 0;
	 Попытка
		 КоличествоНаЭкране = Число(СтрЗаменить(Наименование,"E",""));
	 Исключение КонецПопытки;
	 
	 товар = ПолучитьТоварПоСчитанномуКоду2(Код);
	 Если ТипЗнч(товар) = Тип("Массив") Тогда
		 //Интерактивный Вопрос пользователю
		 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
		 Операция.Код          = "Вопрос";
		 Операция.Наименование = "Выберите товар";
		 Операция.Количество   = 0;
		 ВходныеДанные.Номенклатура.Добавить(Операция);
		 Для каждого стр из товар цикл
			 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
			 Операция.Код          = стр.Код;
			 Операция.Наименование = стр.Наименование;
			 Операция.Количество   = 0;
			 ВходныеДанные.Номенклатура.Добавить(Операция);
		 КонецЦикла;
		 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
		 Операция.Код          = "0";
		 Операция.Наименование = "КонецСписка";
		 Операция.Количество   = 0;
		 ВходныеДанные.Номенклатура.Добавить(Операция);
		 возврат ВходныеДанные;
	 КонецЕсли;
	 //здесь проверяется весь товар сканированный или вручную из операций (Инвентаризация , перемещение , размещение с Т зоны)
	 ЗаписатьРег("ВыбТовар",товар);
	 Если не ЗначениеЗаполнено(товар) Тогда
		 Операция.Код          = "Ошибка";
		 Операция.Наименование = "Товар не найден"+Символы.ВК+Символы.ПС+"по считанному коду";
		 Операция.Количество   = 0;
		 ВходныеДанные.Номенклатура.Добавить(Операция);
		 Возврат ВходныеДанные;
	 КонецЕсли;
	 Запрос.УстановитьПараметр("Адрес",Адрес);
	 Запрос.УстановитьПараметр("товар",товар);
	 НуженТовар = Ложь;
	 Если  КоличествоНаЭкране < 1 Тогда 
		 Рез = Запрос.Выполнить();
		 Выборка = Рез.Выбрать();
		 Если (не товар.ЭтоГруппа) и ЗначениеЗаполнено(товар) и Выборка.Следующий() Тогда
			 
			 Для Итератор = 1 по Выборка.Количество() Цикл
				 //Пока Выборка.Следующий() Цикл
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = "Артикул";
				 Операция.Наименование = Строка(Выборка.Артикул);
				 Операция.Количество   = 0;
				 Если не СейчасИнвентаризация Тогда Попытка Операция.Количество   = Число(Количество); Исключение КонецПопытки; КонецЕсли;
				 ВходныеДанные.Номенклатура.Добавить(Операция);
				 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
				 Операция.Код          = товар.Код;
				 Операция.Наименование = товар.Наименование;
				 Операция.Количество   = 0;
				 Если Выборка.Следующий() Тогда
					 ВходныеДанные.Номенклатура.Добавить(Операция);
				 КонецЕсли;
				 НуженТовар = Истина;
			 КонецЦикла;
			 //Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
			 //Операция.Код          = товар.Код;
			 //Операция.Наименование = товар.Наименование;
			 
		 КонецЕсли;
	 КонецЕсли;
	 
	 Операция.Код          = ?(ЗначениеЗаполнено(товар),?(не товар.ЭтоГруппа,товар.Код,"Ошибка"),"Ошибка");
	 Операция.Наименование = ?(ЗначениеЗаполнено(товар),?(не товар.ЭтоГруппа,товар.Наименование,"нельзя выбрать"+Символы.ВК+Символы.ПС+"товарную группу"),"Товар не найден"+Символы.ВК+Символы.ПС+"по считанному коду");
	 Если  КоличествоНаЭкране = -1 Тогда	
		 Операция.Количество   = Количество;  //Если это первый скан 
		 
	 ИначеЕсли КоличествоНаЭкране = 0 или  КоличествоНаЭкране < -1 Тогда
		 Операция.Количество   = -Количество;  //со знаком минус это чтоб добавить количесвто к количеству на экране , 1 это то что уже добавилось по скану
	 Иначе
		 Операция.Количество   = 0;
		 
	 КонецЕсли;
	 Если СейчасИнвентаризация Тогда
		 //Если  КоличествоНаЭкране = 1 Тогда	
		 //Операция.Количество   = 0-Количество; 
		 //КонецЕсли;
		 ВходныеДанные.Номенклатура.Добавить(Операция);
		 //ВходныеДанные.Номенклатура.Добавить(Операция);
		 Возврат ВходныеДанные;
	 КонецЕсли;
	 Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	Счет_41_АдресныйОстатки.Номенклатура.Наименование КАК Наименование,
	 |	Счет_41_АдресныйОстатки.Номенклатура.Код КАК Код,
	 |	СУММА(Счет_41_АдресныйОстатки.КоличествоОстаток) КАК Количество
	 |ИЗ
	 |	РегистрНакопления.Счет_41_Адресный.Остатки(, ) КАК Счет_41_АдресныйОстатки
	 |ГДЕ
	 |	Счет_41_АдресныйОстатки.Адрес = &Адрес
	 //|	И (НЕ Счет_41_АдресныйОстатки.НеОприходованныйТовар)
	 |	И Счет_41_АдресныйОстатки.Номенклатура = &товар
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	Счет_41_АдресныйОстатки.Номенклатура.Код,
	 |	Счет_41_АдресныйОстатки.Номенклатура.Наименование
	 |
	 |ИМЕЮЩИЕ
	 |	СУММА(Счет_41_АдресныйОстатки.КоличествоОстаток) > 0";
	 //Запрос.УстановитьПараметр("Адрес",Адрес);
	 //Запрос.УстановитьПараметр("товар",товар);
	 
	 Результат = Запрос.Выполнить();
	 ВыборкаДетальныеЗаписи = Результат.Выбрать();
	 Если не ВыборкаДетальныеЗаписи.Следующий() Тогда
		 
		 
		 
		 Операция.Код          = "Удалить";
		 Операция.Наименование = товар.код;
		 Операция.Количество   = 0;
		 ВходныеДанные.Номенклатура.Добавить(Операция);
		 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры);
		 
		 Операция.Код          = "Ошибка";
		 Операция.Наименование = "Товара нет на полке";
		 Операция.Количество   = 0;
		 ВходныеДанные.Номенклатура.Добавить(Операция);
		 
		 НуженТовар = Истина;
		 Возврат ВходныеДанные;
	 КонецЕсли;
	 Если КоличествоНаЭкране = -2 Тогда  КоличествоНаЭкране = 0 КонецЕсли;	
	 Если ВыборкаДетальныеЗаписи.Количество < ( ?(КоличествоНаЭкране=-1,1,КоличествоНаЭкране)+1 ) Тогда
		 Операция.Количество   = ВыборкаДетальныеЗаписи.Количество;
		 ВходныеДанные.Номенклатура.Добавить(Операция);
		 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры);
		 Операция.Код          = "Ошибка";
		 Операция.Наименование = "Товара не достаточно на полке";
		 Операция.Количество = 0;
		 //НуженТовар = не( ВыборкаДетальныеЗаписи.Количество = 0);
		 ВходныеДанные.Номенклатура.Добавить(Операция);
		 Возврат ВходныеДанные;
		 
	 КонецЕсли;
	 ВходныеДанные.Номенклатура.Добавить(Операция); 
	 Возврат ВходныеДанные;
	 
 КонецФункции
 //Функция вызываемая из экспортируемых в операциях инвентаризация, размещение , перемещение =================================
 Функция СчитатьАдрес(ВходныеДанные,Код, Количество, Наименование)
	 //ЗаписатьРег("сканАдреса",Код+Строка(Количество)+Наименование);
	 СтрокаНоменклатуры = ФабрикаXDTO.Тип("http://www.dns-shop.tsd.ru", "СтрокаНоменклатуры");
	 _ФабрикаXDTO = ФабрикаXDTO;
	 СписокНоменклатуры = _ФабрикаXDTO.Тип("http://www.dns-shop.tsd.ru", "СписокНоменклатуры");
	 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
	 ШК = Код;
	 текущаястраница = читатьрег("текущаяСтраница",Количество);
	 Если текущаястраница = 6 Тогда
		 Ответ =  СканЗаданияОбщий(ШК,1);
		 ТипДанных =СчитатьРег("СчитаныйШК.ТипДанных");
		 Если (не ПустаяСтрока(Ответ)) или (не ТипДанных = 11) Тогда
			 возврат "Недействителен";
		 КонецЕсли;
		 ЗаписатьРег("текущаяСтраница",3);
		 Возврат "Ок";	
	 КонецЕсли;
	 Адрес = проверитьадрес(ШК);
	 Если СчитатьРег("СейчасИнвентаризация") <> НЕопределено Тогда 
		 Если Адрес = "А01-01-1" Тогда
			 Ответ = "Недействителен";
			 Возврат Ответ;
		 КонецЕсли;
		 РазблокироватьАдрес(считатьРег("АдресИнвентаризации"));
		 ЗаписатьРег("АдресИнвентаризации",Адрес);
		 Если не ПытатьсяБлокироватьАдрес(Адрес)  Тогда
			 Ответ = "Недействителен";
			 Возврат Ответ;
		 КонецЕсли;
	 КонецЕсли;
	 
	 
	 Если ЗначениеЗаполнено(Адрес) И ТипЗНЧ(Адрес) = Тип("Строка") И СтрДлина(Адрес) = 8 Тогда
		 // + Проверка на правильность заполнения адреса
		 Адреса = РегистрыСведений.АдресаМестХранения;
		 ОтборАдреса = Новый Структура("Адрес");
		 ОтборАдреса.Адрес = Адрес;
		 
		 ВыборкаАдреса = Адреса.Выбрать(ОтборАдреса);
		 Если ВыборкаАдреса.Следующий() Тогда	
			 Ответ = ВыборкаАдреса.Адрес;
			 ЗаписатьРег("Разм",СчитатьРег("Вид_Окна"));
			 Если СчитатьРег("Вид_Окна")= "Адрес получатель:" ТОгда Ответ= "Т00-00-0" КонецЕсли;
			 ЗаписатьРег("АдресПолки",Ответ);
			 //Возврат "Недействителен";
		 КонецЕсли;
		 //Возврат ВыборкаАдреса.Адрес; 
		 
	 КонецЕсли;
	 Если Ответ = "Недействителен" Тогда
		 Запрос = Новый Запрос;
		 Запрос.Текст = 
		 "ВЫБРАТЬ
		 |	АдресаМестХранения.Адрес КАК Адрес
		 |ИЗ
		 |	РегистрСведений.АдресаМестХранения КАК АдресаМестХранения
		 |ГДЕ
		 |	АдресаМестХранения.Адрес = &Адрес";
		 Запрос.УстановитьПараметр("Адрес", ШК);
		 Результат = Запрос.Выполнить();
		 ВыборкаДетальныеЗаписи = Результат.Выбрать();
		 Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			 Ответ = ВыборкаДетальныеЗаписи.Адрес;
			 ЗаписатьРег("Разм",СчитатьРег("Вид_Окна"));
			 Если СчитатьРег("Вид_Окна")= "Адрес получатель:" ТОгда Ответ= "Т00-00-0" КонецЕсли;
			 
			 ЗаписатьРег("АдресПолки",Ответ);
			 
		 КонецЕсли;
		 //Возврат "Недействителен"; 
	 КонецЕсли;
	 Возврат Ответ;
 КонецФункции
 //Окно информации========================================================================= 
 Функция ИнформацияОТовареПоШК(РазмещениеДоступно,Код)
	 Список = ПолучитьСписокТовараПоСчитаномуКоду(Код);
	 //ЗаписатьРег("СписокИнформация",Список);
	 //поставщик = Справочники.Контрагенты.ПустаяСсылка()
	 Если Список.Количество()=0  Тогда
		 Запрос = Новый Запрос;
		 Запрос.Текст = 
		 "ВЫБРАТЬ
		 |	СерийныеНомера.Товар,
		 |	СерийныеНомера.Поставщик
		 |ИЗ
		 |	РегистрСведений.СерийныеНомера КАК СерийныеНомера
		 |ГДЕ
		 |	СерийныеНомера.СерийныйНомер = &Код";
		 Запрос.УстановитьПараметр("Код", Код);
		 Результат = Запрос.Выполнить();
		 ВыборкаДетальныеЗаписи = Результат.Выбрать();
		 Если не ВыборкаДетальныеЗаписи.Следующий() Тогда Возврат "По считанному коду товар не найден!"; КонецЕсли;
		 список.Добавить(ВыборкаДетальныеЗаписи.Товар);
		 поставщик = ВыборкаДетальныеЗаписи.Поставщик;
	 КонецЕсли;
	 Ответ = "";
	 Если ЗначениеЗаполнено(поставщик) Тогда
		 Ответ = Ответ + "Сканирован SN: "+Код+Символы.ВК+Символы.ПС+"Поставщик: "+Строка(Поставщик)+Символы.ВК+Символы.ПС;	
	 КонецЕсли;
	 
	 ТекущийСклад = Константы.ТекущийСклад.Получить();
	 ТекущаяДата               = ТекущаяДатаСервер();
	 Запрос = Новый Запрос();
	 РазмещениеДоступно = Ложь;
	 для каждого НТовар из Список Цикл
		 Запрос.Текст = "ВЫБРАТЬ
		 |	СУММА(РезервыТоваров.Количество) КАК ЖесткийРезерв,
		 |	СУММА(РезервыТоваров.МягкийРезерв) КАК МягкийРезерв,
		 |	РезервыТоваров.Номенклатура КАК Товар
		 |ИЗ
		 |	РегистрНакопления.РезервыТоваров КАК РезервыТоваров
		 |ГДЕ
		 |	(ТИПЗНАЧЕНИЯ(РезервыТоваров.Регистратор) = ТИП(Документ.ЗаявкаНаТоварДляФилиала)
		 |			ИЛИ ТИПЗНАЧЕНИЯ(РезервыТоваров.Регистратор) = ТИП(Документ.ЛистРазногласий))
		 |	И РезервыТоваров.Номенклатура = &Товар
		 |
		 |СГРУППИРОВАТЬ ПО
		 |	РезервыТоваров.Номенклатура";
		 
		 Запрос.УстановитьПараметр("Товар", НТовар);
		 ЗаписатьРег("ИнформацияПоТовару",НТовар);
		 Выборка	= Запрос.Выполнить().Выбрать();
		 
		 Выборка.Следующий();
		 ЖесткийРезерв = Выборка.ЖесткийРезерв;
		 МягкийРезерв = Выборка.МягкийРезерв;
		 
		 Ответ = Ответ +"("+НТовар.Код+") "+ Строка(НТовар)+Символы.ВК+Символы.ПС+
		 "Жесткий Р. "+Формат(ЖесткийРезерв,"ЧДЦ=0; ЧН=Отсутствует; ЧГ=0")+?(ЖесткийРезерв=0,""," шт.")+Символы.ВК+Символы.ПС+ 
		 "Мягкий Р. "+Формат(МягкийРезерв,"ЧДЦ=0; ЧН=Отсутствует; ЧГ=0")+?(МягкийРезерв=0,""," шт.")+Символы.ВК+Символы.ПС;
		 
		 Запрос.Текст = "ВЫБРАТЬ
		                |	Счет_41_АдресныйОстатки.Адрес КАК Адрес,
		                |	СУММА(ЕСТЬNULL(Счет_41_АдресныйОстатки.КоличествоОстаток, 0)) КАК Количество,
		                |	АдресаМестХранения.НазначениеМестаХранения КАК ТипМестаХранения,
		                |	СУММА(ВЫБОР
		                |			КОГДА Счет_41_АдресныйОстатки.НеОприходованныйТовар = ИСТИНА
		                |				ТОГДА 1
		                |			ИНАЧЕ 0
		                |		КОНЕЦ) КАК НеОприходованныйТовар
		                |ИЗ
		                |	РегистрНакопления.Счет_41_Адресный.Остатки КАК Счет_41_АдресныйОстатки
		                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресаМестХранения КАК АдресаМестХранения
		                |		ПО Счет_41_АдресныйОстатки.Адрес = АдресаМестХранения.Адрес
		                |ГДЕ
		                |	Счет_41_АдресныйОстатки.Номенклатура = &Товар
		                |
		                |СГРУППИРОВАТЬ ПО
		                |	Счет_41_АдресныйОстатки.Адрес,
		                |	АдресаМестХранения.НазначениеМестаХранения
		                |ИТОГИ
		                |	СУММА(Количество)
		                |ПО
		                |	ОБЩИЕ";
		 Вбрка	= Запрос.Выполнить();
		 
		 ВбркИтоги = Вбрка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		 
		 Если ВбркИтоги.Следующий() Тогда 
			 Выборка = ВбркИтоги.Выбрать();
			 свободно = 0;
			 Попытка
				 свободно =  ВбркИтоги.Количество - ЖесткийРезерв - МягкийРезерв;
				 Если свободно < 0 Тогда свободно =0 ; КонецЕсли;
				 //Ответ = Ответ +"Свободный остаток: "+Формат(ВбркИтоги.Количество - ЖесткийРезерв - МягкийРезерв ,"ЧДЦ=0; ЧН=; ЧГ=0")+" шт."+Символы.ВК+Символы.ПС;
			 Исключение 
				 свободно = Выборка.Количество;
				 Если свободно = неопределено или свободно = null или свободно < 0 Тогда свободно =0 ; КонецЕсли;
				 //Ответ = Ответ +"Свободный остаток: "+Формат(ВбркИтоги.Количество ,"ЧДЦ=0; ЧН=; ЧГ=0")+" шт."+Символы.ВК+Символы.ПС;	
			 КонецПопытки;
			 //Если свободно < 0 Тогда свободно =0 ; КонецЕсли;
			 Ответ = Ответ +?(свободно=0,"","Свободный остаток: "+Формат(свободно ,"ЧДЦ=0; ЧН=Отсутствует; ЧГ=0")+" шт.")+Символы.ВК+Символы.ПС;
			 
			 пока Выборка.Следующий() цикл
				 Если Выборка.Адрес = "Т00-00-0" Тогда РазмещениеДоступно = Истина; КонецЕсли;
				 Ответ = Ответ + Выборка.Адрес+" "+Формат(Выборка.Количество,"ЧДЦ=0; ЧН=0; ЧГ=0")+" шт." + ?(Выборка.НеОприходованныйТовар = 0 ,""," из них Неоприходованно "+ Формат(Выборка.НеОприходованныйТовар,"ЧДЦ=0; ЧН=0; ЧГ=0")) +Строка(Выборка.ТипМестаХранения)+Символы.ВК+Символы.ПС;
			 КонецЦикла;
		 КонецЕсли;
		 Ответ = Ответ + Символы.ВК+Символы.ПС;
	 КонецЦикла;
	 Возврат Ответ;
	 
 КонецФункции
 //Окно информации========================================================================= 
 Функция СканИнформацияОбщий(РазмещениеДоступно,Данные)
	 УдалитьРег("ИнформацияПоТовару");
	 ИнформационноеСообщение = "";
	 ШтрихКод = СокрЛП(Данные);
	 ТекущийФилиал = Константы.ТекущийСклад.Получить();
	 Автор = ПараметрыСеанса.глТекПользователь;
	 Структура = ПрочитатьШтрихКод(ШтрихКод);
	 ПроверитьДинамическуюЯчейку(Структура);
	 
	 Если Структура.ТипДанных = 0 Тогда
		 Пользователь = Справочники.Пользователи.НайтиПоКоду(Структура.Данные);
		 Запрос = Новый Запрос;
		 Запрос.Текст = 
		 "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
		 |	ВебСервисТСД.Пользователь,
		 |	ЗаданияКладовщикам2.Клиент
		 |ИЗ
		 |	РегистрСведений.ВебСервисТСД КАК ВебСервисТСД
		 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКладовщикам2 КАК ЗаданияКладовщикам2
		 |		ПО ВебСервисТСД.Пользователь = ЗаданияКладовщикам2.Исполнитель
		 |			И (ЗаданияКладовщикам2.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.ВПодборе))
		 |ГДЕ
		 |	ВебСервисТСД.Пользователь = &Пользователь";
		 
		 Запрос.УстановитьПараметр("Пользователь", Пользователь);
		 
		 Результат = Запрос.Выполнить();
		 
		 ВыборкаДетальныеЗаписи = Результат.Выбрать();
		 
		 Если  ВыборкаДетальныеЗаписи.Следующий() Тогда
			 
			 Возврат Строка(Пользователь)+?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Клиент),Символы.ВК+Символы.ПС+"собирает:"+Строка(ВыборкаДетальныеЗаписи.Клиент)," ");
		 Иначе
			 Возврат Строка(Пользователь)+Символы.ВК+Символы.ПС+"не в сети терминалов ";
		 КонецЕсли;
	 ИначеЕсли Структура.ТипДанных = 11 Тогда // Складской транспорт	
		 ДинамическаяЯчейка = Структура.Данные;	
		 // Проверка на клиента
		 ЗапросДЯ = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		 |	ЗаданияКладовщикам2.Клиент,
		 |	ЗаданияКладовщикам2.Автор.Наименование + "" "" + ЗаданияКладовщикам2.Исполнитель.Наименование КАК Автор
		 |ИЗ
		 |	РегистрСведений.ЗаданияКладовщикам2 КАК ЗаданияКладовщикам2
		 |ГДЕ
		 |	ЗаданияКладовщикам2.ДинамическаяЯчейка = &ДинамическаяЯчейка
		 |	И (ЗаданияКладовщикам2.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.Собрано)
		 |			ИЛИ ЗаданияКладовщикам2.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийКладовщиков.Завершено))");
		 
		 ЗапросДЯ.УстановитьПараметр("ДинамическаяЯчейка", ДинамическаяЯчейка);										   
		 
		 РезультатЗапроса = ЗапросДЯ.Выполнить();
		 
		 Если НЕ РезультатЗапроса.Пустой() Тогда
			 Выборка = РезультатЗапроса.Выбрать();	
			 Выборка.Следующий();
			 КлиентСкладскогоТранспорта = Выборка.Клиент;
			 ИнформационноеСообщение = "Выбранная динамическая"+Символы.ВК+Символы.ПС+"ячейка используется"
			 +Символы.ВК+Символы.ПС+"для подбора"+Символы.ВК+Символы.ПС
			 +"клиента "+Символы.ВК+Символы.ПС+ КлиентСкладскогоТранспорта+Символы.ВК+Символы.ПС+ Выборка.Автор+Символы.ВК+Символы.ПС;
			 //			 Возврат "Выбранный складской"+Символы.ВК+Символы.ПС+"транспорт используется"
			 //			 +Символы.ВК+Символы.ПС+"для подбора"+Символы.ВК+Символы.ПС
			 //			 +"клиента "+Символы.ВК+Символы.ПС+ КлиентСкладскогоТранспорта+Символы.ВК+Символы.ПС+ Выборка.Автор;
		 Иначе
			 
			 ЗапросДЯ.Текст = "ВЫБРАТЬ
			 |	ВебСервисТСД.Пользователь,
			 |	ВебСервисТСД.Переменная,
			 |	ВебСервисТСД.Хранилище,
			 |	ВебСервисТСД.Пользователь.Наименование КАК Исполнитель
			 |ИЗ
			 |	РегистрСведений.ВебСервисТСД КАК ВебСервисТСД
			 |ГДЕ
			 |	ВебСервисТСД.Переменная = &ДинамическаяЯчейка";
			 //ЗапросДЯ.УстановитьПараметр("ДинамическаяЯчейка",ДинамическаяЯчейка);
			 РезультатЗапроса = ЗапросДЯ.Выполнить();
			 
			 Если НЕ РезультатЗапроса.Пустой() Тогда
				 Выборка = РезультатЗапроса.Выбрать();	
				 Выборка.Следующий();
				 КлиентТС = Выборка.Хранилище;
				 попытка КлиентТС = Выборка.Хранилище.Получить();Исключение КонецПопытки;
				 ИнформационноеСообщение = "Выбранный складской"+Символы.ВК+Символы.ПС+"транспорт используется"
				 +Символы.ВК+Символы.ПС+"для подбора"+Символы.ВК+Символы.ПС
				 +"клиента "+Символы.ВК+Символы.ПС+ КлиентТС+Символы.ВК+Символы.ПС+ Выборка.Исполнитель+Символы.ВК+Символы.ПС;
			 иначе
	//			 
	// ЗапросДЯ.Текст = 
	//	"ВЫБРАТЬ
	//	|	Счет_41_АдресныйОстатки.Номенклатура,
	//	|	Счет_41_АдресныйОстатки.КоличествоОстаток
	//	|ИЗ
	//	|	РегистрНакопления.Счет_41_Адресный.Остатки КАК Счет_41_АдресныйОстатки
	//	|ГДЕ
	//	|	Счет_41_АдресныйОстатки.Адрес = &ДинамическаяЯчейка";
	//РезультатЗапроса = ЗапросДЯ.Выполнить();
	//		 
	//Если НЕ РезультатЗапроса.Пустой() Тогда
	//			 ИнформационноеСообщение = "Выбранный складской"+Символы.ВК+Символы.ПС+"заполнена товаром"
	//			 +Символы.ВК+Символы.ПС+"и при этом никем не занята"+Символы.ВК+Символы.ПС
	//			 +"этот товар не должен находится в этой ДЯ, обратитесь к администратору "+Символы.ВК+Символы.ПС;

	//					 
	//	
	//	
	//	
	//	Иначе
				 ИнформационноеСообщение = "Складской транспорт никем не занят"+Символы.ВК+Символы.ПС;	
			 //КонецЕсли;
			 КонецЕсли;
		 КонецЕсли;
		 Структура.ТипДанных = 4;
	 КонецЕсли;
	 
	 Если Структура.ТипДанных = 7 Тогда // Складской транспорт	
		 СкладскойТранспорт = Структура.Данные;	
		 ЗапросСТ = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		 |	СкладскойТранспортОстатки.Номенклатура,
		 |	СкладскойТранспортОстатки.КоличествоОстаток
		 |ИЗ
		 |	РегистрНакопления.СкладскойТранспорт.Остатки КАК СкладскойТранспортОстатки
		 |ГДЕ
		 |	СкладскойТранспортОстатки.СкладскойТранспорт = &СкладскойТранспорт");
		 
		 ЗапросСТ.УстановитьПараметр("СкладскойТранспорт", СкладскойТранспорт);										   
		 
		 РезультатЗапроса = ЗапросСТ.Выполнить();
		 
		 Если НЕ РезультатЗапроса.Пустой() Тогда
			 Выборка = РезультатЗапроса.Выбрать();	
			 
			 //КлиентСкладскогоТранспорта = Выборка.Клиент;
			 ИнформационноеСообщение = "Выбранный складской"+Символы.ВК+Символы.ПС+"транспорт используется"
			 +Символы.ВК+Символы.ПС+"для размещения"+Символы.ВК+Символы.ПС;
			 пока Выборка.Следующий() Цикл 
				 ИнформационноеСообщение = ИнформационноеСообщение + "("+ Выборка.Номенклатура.Код+") "+Выборка.Номенклатура.Наименование+ " количество:"+Строка(Выборка.КоличествоОстаток)+" шт."+Символы.ВК+Символы.ПС; 
			 КонецЦикла;
		 Иначе
			 ИнформационноеСообщение = "Складской транспорт никем не занят"+Символы.ВК+Символы.ПС;	
		 КонецЕсли;
	Возврат ИнформационноеСообщение;	 
	 КонецЕсли;
	 
	 Если Структура.ТипДанных = 4 Тогда // Адрес 
		 Зона =  Сред("АБВГДЕЖЗИКЛМНОПРСТУФХЦЧЩШЮЭЯ", Число(Сред(Данные,4,2)), 1);
		 Адрес = Зона + Сред(Данные,6,2) + "-" + Сред(Данные,8,2) + "-" + Сред(Данные,10,1);
		 Если ЗначениеЗаполнено(Адрес) И ТипЗНЧ(Адрес) = Тип("Строка") И СтрДлина(Адрес) = 8 Тогда
			 Адреса = РегистрыСведений.АдресаМестХранения;
			 ОтборАдреса = Новый Структура("Адрес");
			 ОтборАдреса.Адрес = Адрес;
			 ВыборкаАдреса = Адреса.Выбрать(ОтборАдреса);
			 
			 Если НЕ ВыборкаАдреса.Следующий() Тогда	
				 Возврат "Указанного адреса"+Символы.ВК+Символы.ПС+"не существует!";
			 КонецЕсли;
			 Запрос = Новый Запрос;
			 Запрос.Текст = 
			 "ВЫБРАТЬ
			 |	СУММА(Счет_41_АдресныйОстатки.КоличествоОстаток * МассоГабаритныеХарактеристики.ОбъемЕд) КАК Объем,
			 |	СУММА(Счет_41_АдресныйОстатки.КоличествоОстаток) КАК Остаток,
			 |	Счет_41_АдресныйОстатки.Номенклатура КАК Товар,
			 |	СУММА(ВЫБОР
			 |			КОГДА Счет_41_АдресныйОстатки.НеОприходованныйТовар = ИСТИНА
			 |				ТОГДА 1
			 |			ИНАЧЕ 0
			 |		КОНЕЦ) КАК Неоприходованно
			 |ИЗ
			 |	РегистрНакопления.Счет_41_Адресный.Остатки КАК Счет_41_АдресныйОстатки
			 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МассоГабаритныеХарактеристики КАК МассоГабаритныеХарактеристики
			 |		ПО Счет_41_АдресныйОстатки.Номенклатура = МассоГабаритныеХарактеристики.Товар
			 |ГДЕ
			 |	Счет_41_АдресныйОстатки.Адрес = &Адрес
			 |
			 |СГРУППИРОВАТЬ ПО
			 |	Счет_41_АдресныйОстатки.Номенклатура
			 |ИТОГИ
			 |	СУММА(Объем),
			 |	СУММА(Остаток),
			 |	СУММА(Неоприходованно)
			 |ПО
			 |	ОБЩИЕ";
			 
			 
			 Запрос.УстановитьПараметр("Адрес", Адрес);
			 
			 Результат = Запрос.Выполнить();
			 
			 ВыборкаДетальныеЗаписи = Результат.Выбрать();
			 Ответ = "Адрес:"+Адрес;
			 иАдр = РегистрыСведений.АдресаМестХранения.СоздатьМенеджерЗаписи();
			 иАдр.Адрес = Адрес;
			 иАдр.Прочитать();
			 максОбъем = иАдр.ТипМестаХранения.Объем;
			 Если максОбъем = 0 Тогда максОбъем = 0.001; КонецЕсли;
			 Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				 Ответ = Ответ +Символы.ВК+Символы.ПС+ 
				 ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Товар),
				 Строка(ВыборкаДетальныеЗаписи.Товар)+Символы.ВК+Символы.ПС+"("+ВыборкаДетальныеЗаписи.Товар.Код+")",
				 "Всего");
				 Ответ = Ответ +Символы.ВК+Символы.ПС+"Обьем: "
				 +Формат(ВыборкаДетальныеЗаписи.Объем,"ЧДЦ=4; ЧН=; ЧГ=0")+" м3 "
				 +?(не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Товар),
				 ";"+Формат(100*ВыборкаДетальныеЗаписи.Объем/максОбъем,"ЧДЦ=1; ЧН=; ЧГ=0")+"% заполнения",
				 "");;
				 Ответ = Ответ +Символы.ВК+Символы.ПС+"Количество: "+
				 Формат(ВыборкаДетальныеЗаписи.Остаток,"ЧН=; ЧГ=0");
				 Ответ = Ответ + ?(ВыборкаДетальныеЗаписи.Неоприходованно = 0 ,"",Символы.ВК+Символы.ПС+"из них неоприходованно: "+
				 Формат(ВыборкаДетальныеЗаписи.Неоприходованно,"ЧН=; ЧГ=0"));
				 Ответ = Ответ +Символы.ВК+Символы.ПС+"----------------"
			 КонецЦикла;
			 Возврат ИнформационноеСообщение + Ответ;
			 
		 Иначе	
			 Возврат ИнформационноеСообщение + "Введены некорректные"+Символы.ВК+Символы.ПС+"параметры адреса!";
		 КонецЕсли;						
		 
		 
	 ИначеЕсли Структура.ТипДанных = 3 Тогда // Товар
		 возврат ИнформацияОТовареПоШК(РазмещениеДоступно,Данные);
	 Иначе 
		 Возврат "по коду "+СокрЛП(Данные)+" информация не найдена в базе данных. В данном окне можно получать информацию по: EAN кодам производителя, артикулам товаров, адресам, динамическим ячейкам, бейджикам сотрудников.";
	 КонецЕсли;		
	 
 КонецФункции
 
 Функция ПолучитьТаблицуИзНоменклатуры(Список)
	 ТЗ = новый ТаблицаЗначений;
	 КЧ = Новый КвалификаторыЧисла(12,2);
	 КС = Новый КвалификаторыСтроки(20);
	 ОписаниеТиповС = Новый ОписаниеТипов("Строка", ,
	 Новый КвалификаторыСтроки(8, ДопустимаяДлина.Фиксированная));
	 ОписаниеТиповЧ = Новый ОписаниеТипов("Число",
	 Новый КвалификаторыЧисла(0, 0, ДопустимыйЗнак.Любой));
	 ТЗ.Колонки.Добавить("Код",ОписаниеТиповС);
	 ТЗ.Колонки.Добавить("Количество",ОписаниеТиповЧ);
	 ТЗ.Колонки.Добавить("Адрес",ОписаниеТиповС);
	 
	 Для каждого товар из Список.Номенклатура Цикл
		 нс = ТЗ.Добавить();
		 нс.Код = товар.Код;
		 нс.Адрес = проверитьадрес(товар.Наименование); 
		 нс.Количество = товар.Количество;
	 КонецЦикла;
	 Возврат ТЗ;		 
 КонецФункции
 
 
 
 //работа с Формами ТСД ================================================================================
 Функция ПреобразоватьКоординаты(х,у,размерх,размеру)    //отображение кнопок и окон на экране ТСД , избавляем пакет данных от избыточности
	 Возврат	Цел((у)  //положение У
	 +Цел(х)*Pow(2,9)  //положение Х начиная с 9 бита информации
	 +((Цел(?(размерх > 127,127,размерх))%127)*Pow(2,18)) //размер Х начиная с 18 бита информации
	 +((Цел(размеру))*Pow(2,18+7)));  //размер У начиная через 7 бит и до "упора" :) упор сейчас 64 бита 
 КонецФункции
 //работа с Формами ТСД ================================================================================
 Функция РазместитьКнопкуТСД(ВходныеДанные,Текст="",КодКнопки=0,Х = 0,У= 0,Ширина = 0,Высота= 0,Доступность = Истина,Видимость = Истина)
	 СтрокаНоменклатуры = ФабрикаXDTO.Тип("http://www.dns-shop.tsd.ru", "СтрокаНоменклатуры");
	 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
	 Операция.Код          = Формат(Цел(КодКнопки + ?(Доступность,0,65536)+?(Видимость,0,Pow(2,17))),"ЧДЦ=0; ЧН=; ЧГ=0");
	 //если КодКнопки = 0 Тогда Операция.Код  = "Форма" КонецЕсли;
	 Операция.Наименование = Текст;
	 Операция.Количество   = ПреобразоватьКоординаты(Х,У,Ширина,Высота);
	 ВходныеДанные.Номенклатура.Добавить(Операция);
	 Возврат ВходныеДанные;
 КонецФункции
 //работа с Формами ТСД ================================================================================
 Функция ШрифтЭлементаТСД(ВходныеДанные,КодКнопки=0,Ширина = 0,Высота= 0,Толщина = 0,Угол = 0)
	 СтрокаНоменклатуры = ФабрикаXDTO.Тип("http://www.dns-shop.tsd.ru", "СтрокаНоменклатуры");
	 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
	 Операция.Код          = "ПоменятьШрифт";
	 Операция.Наименование = Формат(Цел(КодКнопки),"ЧДЦ=0; ЧН=; ЧГ=0");
	 Операция.Количество   = ПреобразоватьКоординаты(Толщина,Угол,Ширина,Высота);
	 ВходныеДанные.Номенклатура.Добавить(Операция);
	 Возврат ВходныеДанные;
 КонецФункции
 //работа с Формами ТСД ================================================================================
 Функция ДобавитьКолонкуТСД(ВходныеДанные,Текст="",Ширина = 0,НомерКолонки = 0)
	 СтрокаНоменклатуры = ФабрикаXDTO.Тип("http://www.dns-shop.tsd.ru", "СтрокаНоменклатуры");
	 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
	 Операция.Код          = "ДобавитьКолонкуСписка"+Строка(НомерКолонки);
	 Операция.Наименование = Текст;
	 Операция.Количество   = Цел(Ширина);
	 ВходныеДанные.Номенклатура.Добавить(Операция);
	 Возврат ВходныеДанные;
 КонецФункции
 //работа с Формами ТСД ================================================================================
 Функция УдалитьКолонкуСписка(ВходныеДанные,Ширина = 0)
	 СтрокаНоменклатуры = ФабрикаXDTO.Тип("http://www.dns-shop.tsd.ru", "СтрокаНоменклатуры");
	 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
	 Операция.Код          = "УдалитьКолонкуСписка";
	 Операция.Наименование = "";
	 Операция.Количество   = Цел(Ширина);
	 ВходныеДанные.Номенклатура.Добавить(Операция);
	 Возврат ВходныеДанные;
 КонецФункции
 //работа с Формами ТСД ================================================================================
 Функция ЗаполнитьТаблицу(ВходныеДанные,ТЗ,ПараметрыТаблицы = 113)
	 СтрокаНоменклатуры = ФабрикаXDTO.Тип("http://www.dns-shop.tsd.ru", "СтрокаНоменклатуры");
	 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
	 Операция.Код          = "ЗаполнитьТаблицу";
	 Операция.Наименование = "-";
	 Операция.Количество   = ПараметрыТаблицы; //113  //ListView_SetExtendedListViewStyle(  0х71 =0x00000040 + 0x00000001 +0x00000010 +0x00000020 = LVS_EX_ONECLICKACTIVATE | LVS_EX_GRIDLINES | LVS_EX_HEADERDRAGDROP | LVS_EX_FULLROWSELECT);
	 ВходныеДанные.Номенклатура.Добавить(Операция);
	 Параметр = 1;
	 Для каждого Стр из ТЗ Цикл
		 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
		 Код = СокрЛП(Строка(Стр[0]));
		 Код = ?(ПустаяСтрока(Код)," ",Код);
		 Наименование = СокрЛП(Строка(Стр[1]));
		 Наименование = ?(ПустаяСтрока(Наименование)," ",Наименование);
		 Операция.Код          = Код;
		 Операция.Наименование = Наименование;
		 Операция.Количество   = Параметр;
		 //попытка
		 //	Операция.Количество   = Число(Стр[2]);
		 //Исключение
		 //КонецПопытки;
		 Параметр = Параметр +1;
		 ВходныеДанные.Номенклатура.Добавить(Операция);
	 КонецЦикла;
	 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
	 Операция.Код          = "КонецТаблицы";
	 Операция.Наименование = "-";
	 Операция.Количество   = 0;
	 ВходныеДанные.Номенклатура.Добавить(Операция);
	 Возврат ВходныеДанные;
 КонецФункции
 //работа с Формами ТСД ================================================================================
 Функция ДобавитьСтроку(ВходныеДанные,Код,Наименование,Количество)
	 
	 СтрокаНоменклатуры = ФабрикаXDTO.Тип("http://www.dns-shop.tsd.ru", "СтрокаНоменклатуры");
	 Операция = ФабрикаXDTO.Создать(СтрокаНоменклатуры); 
	 Операция.Код          = Код;
	 Операция.Наименование = Наименование;
	 Операция.Количество   = Количество;
	 ВходныеДанные.Номенклатура.Добавить(Операция);	 
	 Возврат ВходныеДанные;
	 
 КонецФункции
 //работа с Формами ТСД ================================================================================ 
 Функция ЗаполнитьПо16бит(БитыДо16,БитыПосле16) 
	 Возврат	Цел(БитыДо16)+Цел(БитыПосле16)*Pow(2,16);  
 КонецФункции
 //работа с Формами ТСД ================================================================================ 
 Функция ИзменитьТекстИВидимость(ВходныеДанные,Код,Наименование,Доступность=Истина,Видимость=Истина,ВыделитьТекст = Ложь)
	 ДобавитьСтроку(ВходныеДанные,"ТекстИСвойства",Наименование,ЗаполнитьПо16бит(Код,?(Доступность,0,1)+?(Видимость,0,2)+?(ВыделитьТекст,0,4)));
 КонецФункции
 
 
 
 //работа с ТСД
 Функция ПолучитьИнфоОбатарее(знач СтрокаПараметров)
	 //BackupBatteryVoltage=3800:BackupBatteryLifePercent=100:BatteryCurrent=0:BatteryVoltage=4044:BatteryTemperature=0:ACLineStatus=0:BatteryAverageCurrent=0:BatteryChemistry=4
	 ПараметрыБатарей = Новый СоОтветствие();
	 пока истина цикл
		 н = Найти(СтрокаПараметров,"=");
		 д = Найти(СтрокаПараметров,":");
		 Если н = 0 или д = 0 Тогда прервать; КонецЕсли;
		 Ключ = лев(СтрокаПараметров,н-1);
		 Значение = сред(СтрокаПараметров,н+1,д-н-1);
		 Попытка
			 ЗаписатьРег(Ключ,Число(Значение));
			 Если ключ = "BatteryFlag" или ключ = "LastPacketSize" Тогда
				 //ЗаписатьЗначения(ключ,Число(Значение),,Ложь);			
			 КонецЕсли;
			 
			 Если ключ = "LastPacketTime" Тогда
				 //ЗаписатьЗначения(ключ,Число(Значение)/1000,,Истина);			
			 КонецЕсли;
			 
		 Исключение КонецПопытки;
		 ПараметрыБатарей.Вставить(Ключ,значение);
		 СтрокаПараметров = сред(СтрокаПараметров,д+1,1000);
	 КонецЦикла;
	 Возврат ПараметрыБатарей;
 КонецФункции
 //Из общий модулей модифицированное==============================================
 Функция ПрочитатьШтрихКод(ШтрихКод) 
	 
	 Результат = Новый Структура("ТипДанных, Данные");
	 // 0 - Пользователь;
	 // 1 - Задание кладовщику
	 // 2 - Место
	 // 3 - Номенклатура
	 // 4 - Адрес
	 // 5 - Мешок
	 // 6 - Управляющие коды
	 // 7 - Складской транспорт
	 
	 //Если СтрДлина(ШтрихКод) < 3 Или ШтрихКод = Неопределено Тогда Возврат Неопределено; КонецЕсли;
	 ТипШтрихКода = Лев(ШтрихКод, 3);
	 
	 ТипШтрихКодаОдинСимвол = Лев(ШтрихКод, 1);
	 
	 Если (ТипШтрихКода = "vis") Или
		 (ТипШтрихКода = "zdn") Или
		 (ТипШтрихКода = "upr") Или		 
		 (ТипШтрихКода = "mst") Или
		 (ТипШтрихКода = "str") Или		 
		 //(ТипШтрихКода = "nom") Или 
		 (ТипШтрихКода = "adr") Или 
		 (ТипШтрихКода = "msk") Тогда
		 Данные = Сред(ШтрихКод, 4);
	 ИначеЕсли ВРег(ТипШтрихКодаОдинСимвол) = "Z" Тогда	
		 Данные = Сред(ШтрихКод, 2);			
	 Иначе
		 Данные = ШтрихКод;
	 КонецЕсли;
	 
	 Если ТипШтрихКода = "vis" Тогда
		 
		 Результат.ТипДанных = 0;
		 Результат.Данные    = Данные; // Код пользователя		
		 
	 ИначеЕсли ТипШтрихКода = "upr" Тогда
		 
		 Результат.ТипДанных = 6;
		 Результат.Данные    = Число(СокрЛП(Данные));		
		 
	 ИначеЕсли ТипШтрихКода = "zdn" Тогда
		 
		 Результат.ТипДанных = 1;
		 Результат.Данные    = Число(СокрЛП(Данные));		
		 
	 ИначеЕсли ТипШтрихКода = "mst" ИЛИ ВРег(ТипШтрихКодаОдинСимвол) = "Z" Тогда
		 Результат.ТипДанных = 2;
		 Результат.Данные    = Данные;
		 //ИначеЕсли ТипШтрихКода = "nom" Тогда
		 //	Результат.ТипДанных = 3;
		 //	Результат.Данные    = ПолучитьТоварПоСчитанномуКоду(Данные);
		 //ИначеЕсли ТипШтрихКода = "adr" Тогда
		 //	Результат.ТипДанных = 4;
		 //	Результат.Данные    = Данные;	
	 ИначеЕсли ТипШтрихКода = "adr" Тогда
		 ШК = ШтрихКод;
		 Зона =  Сред("АБВГДЕЖЗИКЛМНОПРСТУФХЦЧЩШЮЭЯ", Число(Сред(ШК,4,2)), 1);
		 Адрес = Зона + Сред(ШК,6,2) + "-" + Сред(ШК,8,2) + "-" + Сред(ШК,10,1);
		 Результат.Данные    = Адрес;
		 Результат.ТипДанных = 4;
		 
	 ИначеЕсли ТипШтрихКода = "str" Тогда		
		 Результат.ТипДанных = 7;
		 Результат.Данные    = Данные;				
	 ИначеЕсли ТипШтрихКода = "msk" Тогда // Мешок
		 Результат.ТипДанных = 5;
		 Результат.Данные    = Данные;
	 ИначеЕсли СтрДлина(Данные) = 9 Тогда // Считаем что это место, пришедшее от поставщика
		 Результат.ТипДанных = 2;
		 Результат.Данные    = Данные;
	 Иначе
		 Результат.ТипДанных = 3;
		 Результат.Данные    = ПолучитьТоварПоСчитанномуКоду2(Данные);
	 КонецЕсли;
	 
	 Возврат Результат;
	 
 КонецФункции
 //Из общего модуля модифицированное
 Функция ПолучитьТоварПоСчитанномуКоду2(Код, ПытатьсяДобавить = Ложь) 
	 Список = ПолучитьСписокТовараПоСчитаномуКоду(Код);
	 Если Список.Количество()=0  Тогда
		 Запрос = Новый Запрос;
		 Запрос.Текст = 
		 "ВЫБРАТЬ
		 |	СерийныеНомера.Товар,
		 |	СерийныеНомера.Поставщик
		 |ИЗ
		 |	РегистрСведений.СерийныеНомера КАК СерийныеНомера
		 |ГДЕ
		 |	СерийныеНомера.СерийныйНомер = &Код";
		 Запрос.УстановитьПараметр("Код", Код);
		 Результат = Запрос.Выполнить();
		 ВыборкаДетальныеЗаписи = Результат.Выбрать();
		 Если не ВыборкаДетальныеЗаписи.Следующий() Тогда Возврат Справочники.Номенклатура.ПустаяСсылка(); КонецЕсли;
		 список.Добавить(ВыборкаДетальныеЗаписи.Товар);
	 КонецЕсли;
	 Если список.Количество() > 1 Тогда 
		 Возврат список;
	 КонецЕсли;
	 Возврат список[0];
	 
	 //
	 //НаборКодовТовара = ПолучитьСписокТовараПоСчитаномуКоду(Код); 
	 //Если НаборКодовТовара.Количество() = 0 Тогда 
	 //	Возврат Справочники.Номенклатура.ПустаяСсылка();
	 //КонецЕсли;	
	 //
	 //Возврат НаборКодовТовара[0];
	 
 КонецФункции
 //Из общий модулей модифицированное
 Функция ПолучитьСписокТовараПоСчитаномуКоду(КодПроизводителя)
	 Результат = Новый Массив;
	 КодПроизводителя = СокрЛП(КодПроизводителя);
	 Если КодПроизводителя = "" Тогда Возврат Результат; КонецЕсли;
	 // Ищем товар в регистре сведений "УчетКодовПроизводителя"
	 Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ Товар1 ИЗ РегистрСведений.УчетКодовПроизводителя ГДЕ Код = &Код");	
	 Запрос.УстановитьПараметр("Код", КодПроизводителя);
	 Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Товар1");
	 // Если не нашли, ищем по коду в справочнике "Номенклатура"
	 Если Результат.Количество() = 0 Тогда
		 Товар = Справочники.Номенклатура.НайтиПоКоду(Прав("0000000" + Лев(КодПроизводителя, 7), 7));
		 Если ЗначениеЗаполнено(Товар) Тогда
			 Результат.Добавить(Товар);
		 КонецЕсли;                  	
	 КонецЕсли;                  	
	 Возврат Результат;
 КонецФункции
 //Общая функия Стабилизация записи в регистры
 Функция ЗаписатьВТранзакции(Объект)
	 ~Запись:
	 Попытка
		 НачатьТранзакцию();
		 Объект.Записать();
	 Исключение
		 ОтменитьТранзакцию();
		 ОписаниеОшибки = ОписаниеОшибки();
		 Если Найти(НРег(ОписаниеОшибки), "конфликт блокировок") > 0 Тогда
			 Sleep(3); //Задержка на 3 мс.
			 Перейти ~Запись;
			 
		 КонецЕсли;
		 ВызватьИсключение ОписаниеОшибки;
	 КонецПопытки;
	 ЗафиксироватьТранзакцию();
 КонецФункции
 //выкидывание пользователя
 Функция ЕстьЕщеСессииПользователя(Список)
	 Если не Список.Номенклатура.Количество()=2 Тогда возврат ложь; КонецЕсли;
	 Попытка
		 ЗаписатьРег("БилдВерсии",Список.Номенклатура.Получить(1).Количество);
		 ЗаписатьРег("Метрика",Список.Номенклатура.Получить(1).Наименование);
		 ПараметрыПитания = ПолучитьИнфоОбатарее(Список.Номенклатура.Получить(1).Наименование);
	 Исключение конецпопытки;
	 Попытка
		 Завершение = СчитатьРег("ЗавершитьСеанс");
		 Если ЗначениеЗаполнено(Завершение) Тогда
			 КлиентВерсия =  Список.Номенклатура.Получить(1).Код;
			 ЗаписатьРег("СессияВерсия",КлиентВерсия);
			 Если Завершение = КлиентВерсия Тогда
				 ВерсияКлиента = СчитатьРег("ВерсияКлиента");
				 возврат Истина;
			 КонецЕсли;
		 КонецЕсли;
	 Исключение
	 КонецПопытки;
	 
	 Возврат Ложь;	
 КонецФункции
 //работа с СМС , незавершена и неиспользуется , со стороны ТСД готовность 90 %
 Функция ЕстьСообщения(Список)
	 Попытка
		 смс = СчитатьРег("ЕстьСообщение");
		 Если ЗначениеЗаполнено(смс)  Тогда
			 УдалитьРег("ЕстьСообщение");
			 возврат Истина;
		 КонецЕсли;
	 Исключение
	 КонецПопытки;
	 Возврат Ложь;	
 КонецФункции
 
 //Общая неиспользуемая
 Процедура ЗаписатьЗначения(Переменная,Значение,НомерПакета = Неопределено,ЗамерВремени = Истина)  //Удалить
	 
 КонецПроцедуры
 //Общая
 Функция ПослатьПисьмо(ТекстОшибки)
	 Попытка
		 ПрофильПочты = Новый ИнтернетПочтовыйПрофиль;
		 ПрофильПочты.АдресСервераSMTP = "mail.partner.ru";
		 ПрофильПочты.ПортSMTP = 25;
		 ПрофильПочты.Пользователь = "it_faq@dns-shop.ru";
		 ПрофильПочты.ПользовательSMTP = "it_faq";
		 ПрофильПочты.ВремяОжидания = 50000; 
		 ПрофильПочты.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
		 Почта = Новый ИнтернетПочта;
		 Сообщение = Новый ИнтернетПочтовоеСообщение;
		 Сообщение.ИмяОтправителя = "ТСД";
		 Сообщение.Тема = "Ошибка у "+ИмяПользователя();
		 Сообщение.Тексты.Очистить();
		 Сообщение.Отправитель = "it_faq@dns-shop.ru";
		 Сообщение.Получатели.Добавить("zenkov@dns-shop.ru");
		 Сообщение.Получатели.Добавить("zheludkov@dns-shop.ru");
		 Сообщение.Тексты.Добавить(ТекстОшибки);
		 Почта.Подключиться(ПрофильПочты);
		 Почта.Послать(Сообщение);
		 Почта.Отключиться();
	 Исключение
	 КонецПопытки;
 КонецФункции
 //работа с переменными ТСД сессий =============================================================
 Процедура ЗаписатьРег(переменная,Хранилище)
	 Если ПараметрыСеанса.глТекПользователь.Пустая() Тогда возврат; КонецЕсли;
	 хз = Новый ХранилищеЗначения(Хранилище);
	 рс = РегистрыСведений.ВебСервисТСД.СоздатьНаборЗаписей();
	 рс.Отбор.Пользователь.Установить(ПараметрыСеанса.глТекПользователь);
	 рс.Отбор.Переменная.Установить(переменная);
	 рс.Прочитать();
	 Если рс.Количество()=0 Тогда
		 зпс = рс.Добавить();
		 зпс.Пользователь = ПараметрыСеанса.глТекПользователь;
		 зпс.Переменная = переменная;
	 Иначе
		 зпс = рс[0];
	 КонецЕсли;
	 зпс.Хранилище = хз;
	 рс.Записать();
 КонецПроцедуры
 //работа с переменными ТСД сессий
 Функция СчитатьРег(переменная)
	 Если ПараметрыСеанса.глТекПользователь.Пустая() Тогда возврат неопределено; КонецЕсли;
	 
	 рс = РегистрыСведений.ВебСервисТСД.СоздатьНаборЗаписей();
	 рс.Отбор.Пользователь.Установить(ПараметрыСеанса.глТекПользователь);
	 рс.Отбор.Переменная.Установить(переменная);
	 рс.Прочитать();
	 Если рс.Количество()=0 Тогда
		 возврат Неопределено;
	 Иначе
		 зпс = рс[0];
	 КонецЕсли;
	 Возврат зпс.Хранилище.Получить();
 КонецФункции
 //работа с переменными ТСД сессий
 Функция ЧитатьРег(переменная,возвратнеопределено)
	 Если ПараметрыСеанса.глТекПользователь.Пустая() Тогда возврат возвратнеопределено; КонецЕсли;
	 
	 рс = РегистрыСведений.ВебСервисТСД.СоздатьНаборЗаписей();
	 рс.Отбор.Пользователь.Установить(ПараметрыСеанса.глТекПользователь);
	 рс.Отбор.Переменная.Установить(переменная);
	 рс.Прочитать();
	 взврт = возвратнеопределено;
	 Если не рс.Количество()=0 Тогда
		 зпс = рс[0];
		 взврт = зпс.Хранилище.Получить();
		 Если не ТипЗнч(возвратнеопределено) = ТипЗнч(взврт) Тогда 
			 взврт = возвратнеопределено; 
			 ЗаписатьРег(переменная,возвратнеопределено);
		 КонецЕсли;
	 Иначе
		 ЗаписатьРег(переменная,возвратнеопределено);
	 КонецЕсли;
	 Возврат взврт;
 КонецФункции
 
 Функция ПроверитьРег(переменная,возвратнеопределено)
	 Если ПараметрыСеанса.глТекПользователь.Пустая() Тогда возврат возвратнеопределено; КонецЕсли;
	 
	 рс = РегистрыСведений.ВебСервисТСД.СоздатьНаборЗаписей();
	 рс.Отбор.Пользователь.Установить(ПараметрыСеанса.глТекПользователь);
	 рс.Отбор.Переменная.Установить(переменная);
	 рс.Прочитать();
	 взврт = возвратнеопределено;
	 Если не рс.Количество()=0 Тогда
		 зпс = рс[0];
		 взврт = зпс.Хранилище.Получить();
		 Если не ТипЗнч(возвратнеопределено) = ТипЗнч(взврт) Тогда 
			 взврт = возвратнеопределено; 
			 //ЗаписатьРег(переменная,возвратнеопределено);
		 КонецЕсли;
		 //Иначе
		 //	ЗаписатьРег(переменная,возвратнеопределено);
	 КонецЕсли;
	 Возврат взврт;
 КонецФункции
 //работа с переменными ТСД сессий
 Процедура ОчиститьРег()
	 Если ПараметрыСеанса.глТекПользователь.Пустая() Тогда возврат; КонецЕсли;
	 рс = РегистрыСведений.ВебСервисТСД.СоздатьНаборЗаписей();
	 рс.Отбор.Пользователь.Установить(ПараметрыСеанса.глТекПользователь);
	 рс.Записать();
 КонецПроцедуры
 //работа с переменными ТСД сессий
 Процедура УдалитьРег(переменная)
	 Если ПараметрыСеанса.глТекПользователь.Пустая() Тогда возврат; КонецЕсли;
	 рс = РегистрыСведений.ВебСервисТСД.СоздатьНаборЗаписей();
	 рс.Отбор.Пользователь.Установить(ПараметрыСеанса.глТекПользователь);
	 рс.Отбор.Переменная.Установить(переменная);
	 рс.Записать();
 КонецПроцедуры
 //работа с переменными ТСД сессий
 Процедура ПерегрузитьРег()
	 ТС =	СчитатьРег("ДинамическаяЯчейка");
	 кол =	СчитатьРег("КоличествоЗапусков");
	 версияклиента = СчитатьРег("ВерсияКлиента");
	 //Если считатьРег("АдресИнвентаризации") <> НЕопределено Тогда 
	 
	 очиститьрег();   
	 ЗаписатьРег("КоличествоЗапусков",Кол);
	 ЗаписатьРег("Онлайн",Истина);
	 ЗаписатьРег("ВерсияКлиента",версияклиента);
	 //ТС =	СчитатьРег("ДинамическаяЯчейка");
	 ЗаписатьРег("ДинамическаяЯчейка",ТС);
	 
	 
 КонецПроцедуры
